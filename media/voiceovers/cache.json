[
  {
    "input_text": "In the following we will explain the christofides algorithm.",
    "input_data": {
      "input_text": "In the following we will explain the christofides algorithm.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">In the following we will explain the christofides algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">In the following we will explain the christofides algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 175,
        "text_offset": 0,
        "word_length": 2,
        "text": "In",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2375000,
        "duration_milliseconds": 100,
        "text_offset": 3,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3625000,
        "duration_milliseconds": 450,
        "text_offset": 7,
        "word_length": 9,
        "text": "following",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8375000,
        "duration_milliseconds": 125,
        "text_offset": 17,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9875000,
        "duration_milliseconds": 137,
        "text_offset": 20,
        "word_length": 4,
        "text": "will",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11500000,
        "duration_milliseconds": 412,
        "text_offset": 25,
        "word_length": 7,
        "text": "explain",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15875000,
        "duration_milliseconds": 112,
        "text_offset": 33,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17250000,
        "duration_milliseconds": 875,
        "text_offset": 37,
        "word_length": 12,
        "text": "christofides",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26250000,
        "duration_milliseconds": 650,
        "text_offset": 50,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32875000,
        "duration_milliseconds": 100,
        "text_offset": 59,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "in-the-following-we-will-explain-the-christofides-94a11300.mp3",
    "final_audio": "in-the-following-we-will-explain-the-christofides-94a11300.mp3"
  },
  {
    "input_text": "This is an approximated algorithm to solve the TSP with a O(n^3) complexity. This algorithm guarantees a solution that is at most fifthy percent longer than the optimal round trip.",
    "input_data": {
      "input_text": "This is an approximated algorithm to solve the TSP with a O(n^3) complexity. This algorithm guarantees a solution that is at most fifthy percent longer than the optimal round trip.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">This is an approximated algorithm to solve the TSP with a O(n^3) complexity. This algorithm guarantees a solution that is at most fifthy percent longer than the optimal round trip.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">This is an approximated algorithm to solve the TSP with a O(n^3) complexity. This algorithm guarantees a solution that is at most fifthy percent longer than the optimal round trip.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 225,
        "text_offset": 0,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3000000,
        "duration_milliseconds": 100,
        "text_offset": 5,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4250000,
        "duration_milliseconds": 87,
        "text_offset": 8,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5375000,
        "duration_milliseconds": 762,
        "text_offset": 11,
        "word_length": 12,
        "text": "approximated",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13250000,
        "duration_milliseconds": 550,
        "text_offset": 24,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19000000,
        "duration_milliseconds": 100,
        "text_offset": 34,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20125000,
        "duration_milliseconds": 312,
        "text_offset": 37,
        "word_length": 5,
        "text": "solve",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23500000,
        "duration_milliseconds": 100,
        "text_offset": 43,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24625000,
        "duration_milliseconds": 562,
        "text_offset": 47,
        "word_length": 3,
        "text": "TSP",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30375000,
        "duration_milliseconds": 150,
        "text_offset": 51,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32125000,
        "duration_milliseconds": 100,
        "text_offset": 56,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33375000,
        "duration_milliseconds": 237,
        "text_offset": 58,
        "word_length": 1,
        "text": "O",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36625000,
        "duration_milliseconds": 100,
        "text_offset": 59,
        "word_length": 1,
        "text": "(",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 37625000,
        "duration_milliseconds": 587,
        "text_offset": 60,
        "word_length": 3,
        "text": "n^3",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44375000,
        "duration_milliseconds": 25,
        "text_offset": 63,
        "word_length": 1,
        "text": ")",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 44750000,
        "duration_milliseconds": 800,
        "text_offset": 65,
        "word_length": 10,
        "text": "complexity",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 53000000,
        "duration_milliseconds": 100,
        "text_offset": 75,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 61625000,
        "duration_milliseconds": 225,
        "text_offset": 77,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 64125000,
        "duration_milliseconds": 562,
        "text_offset": 82,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 70000000,
        "duration_milliseconds": 525,
        "text_offset": 92,
        "word_length": 10,
        "text": "guarantees",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 75500000,
        "duration_milliseconds": 62,
        "text_offset": 103,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76375000,
        "duration_milliseconds": 475,
        "text_offset": 105,
        "word_length": 8,
        "text": "solution",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 81375000,
        "duration_milliseconds": 125,
        "text_offset": 114,
        "word_length": 4,
        "text": "that",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 82750000,
        "duration_milliseconds": 112,
        "text_offset": 119,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 84125000,
        "duration_milliseconds": 100,
        "text_offset": 122,
        "word_length": 2,
        "text": "at",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 85375000,
        "duration_milliseconds": 275,
        "text_offset": 125,
        "word_length": 4,
        "text": "most",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 88375000,
        "duration_milliseconds": 300,
        "text_offset": 130,
        "word_length": 6,
        "text": "fifthy",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 91625000,
        "duration_milliseconds": 425,
        "text_offset": 137,
        "word_length": 7,
        "text": "percent",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 96000000,
        "duration_milliseconds": 337,
        "text_offset": 145,
        "word_length": 6,
        "text": "longer",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 99500000,
        "duration_milliseconds": 125,
        "text_offset": 152,
        "word_length": 4,
        "text": "than",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 101000000,
        "duration_milliseconds": 112,
        "text_offset": 157,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 102375000,
        "duration_milliseconds": 437,
        "text_offset": 161,
        "word_length": 7,
        "text": "optimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 106875000,
        "duration_milliseconds": 225,
        "text_offset": 169,
        "word_length": 5,
        "text": "round",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 109250000,
        "duration_milliseconds": 312,
        "text_offset": 175,
        "word_length": 4,
        "text": "trip",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 112500000,
        "duration_milliseconds": 100,
        "text_offset": 179,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "this-is-an-approximated-algorithm-to-solve-the-tsp-429c5ccc.mp3",
    "final_audio": "this-is-an-approximated-algorithm-to-solve-the-tsp-429c5ccc.mp3"
  },
  {
    "input_text": "First we will create a minimal spanning tree with every node by using the algrithm of Prim.",
    "input_data": {
      "input_text": "First we will create a minimal spanning tree with every node by using the algrithm of Prim.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">First we will create a minimal spanning tree with every node by using the algrithm of Prim.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">First we will create a minimal spanning tree with every node by using the algrithm of Prim.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 375,
        "text_offset": 0,
        "word_length": 5,
        "text": "First",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4500000,
        "duration_milliseconds": 112,
        "text_offset": 6,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5750000,
        "duration_milliseconds": 137,
        "text_offset": 9,
        "word_length": 4,
        "text": "will",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7375000,
        "duration_milliseconds": 312,
        "text_offset": 14,
        "word_length": 6,
        "text": "create",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10750000,
        "duration_milliseconds": 50,
        "text_offset": 21,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11375000,
        "duration_milliseconds": 375,
        "text_offset": 23,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15375000,
        "duration_milliseconds": 387,
        "text_offset": 31,
        "word_length": 8,
        "text": "spanning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19375000,
        "duration_milliseconds": 212,
        "text_offset": 40,
        "word_length": 4,
        "text": "tree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21625000,
        "duration_milliseconds": 187,
        "text_offset": 45,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23750000,
        "duration_milliseconds": 225,
        "text_offset": 50,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26250000,
        "duration_milliseconds": 275,
        "text_offset": 56,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29250000,
        "duration_milliseconds": 112,
        "text_offset": 61,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30625000,
        "duration_milliseconds": 362,
        "text_offset": 64,
        "word_length": 5,
        "text": "using",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34500000,
        "duration_milliseconds": 112,
        "text_offset": 70,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35875000,
        "duration_milliseconds": 475,
        "text_offset": 74,
        "word_length": 8,
        "text": "algrithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40875000,
        "duration_milliseconds": 112,
        "text_offset": 83,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 42250000,
        "duration_milliseconds": 375,
        "text_offset": 86,
        "word_length": 4,
        "text": "Prim",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 46250000,
        "duration_milliseconds": 100,
        "text_offset": 90,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "first-we-will-create-a-minimal-spanning-tree-with-a9ca7eef.mp3",
    "final_audio": "first-we-will-create-a-minimal-spanning-tree-with-a9ca7eef.mp3"
  },
  {
    "input_text": "Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom",
    "input_data": {
      "input_text": "Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 200,
        "text_offset": 0,
        "word_length": 4,
        "text": "Then",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2750000,
        "duration_milliseconds": 112,
        "text_offset": 5,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4125000,
        "duration_milliseconds": 250,
        "text_offset": 8,
        "word_length": 6,
        "text": "search",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6875000,
        "duration_milliseconds": 175,
        "text_offset": 15,
        "word_length": 3,
        "text": "for",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 212,
        "text_offset": 19,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11250000,
        "duration_milliseconds": 212,
        "text_offset": 25,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13500000,
        "duration_milliseconds": 62,
        "text_offset": 30,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14375000,
        "duration_milliseconds": 100,
        "text_offset": 33,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15625000,
        "duration_milliseconds": 312,
        "text_offset": 37,
        "word_length": 5,
        "text": "graph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19000000,
        "duration_milliseconds": 137,
        "text_offset": 43,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20625000,
        "duration_milliseconds": 87,
        "text_offset": 48,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21750000,
        "duration_milliseconds": 162,
        "text_offset": 51,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23500000,
        "duration_milliseconds": 362,
        "text_offset": 55,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28125000,
        "duration_milliseconds": 225,
        "text_offset": 61,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 30625000,
        "duration_milliseconds": 287,
        "text_offset": 63,
        "word_length": 7,
        "text": "meaning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33750000,
        "duration_milliseconds": 87,
        "text_offset": 71,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34750000,
        "duration_milliseconds": 200,
        "text_offset": 74,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37000000,
        "duration_milliseconds": 312,
        "text_offset": 78,
        "word_length": 6,
        "text": "number",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40250000,
        "duration_milliseconds": 75,
        "text_offset": 85,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41250000,
        "duration_milliseconds": 300,
        "text_offset": 88,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44500000,
        "duration_milliseconds": 125,
        "text_offset": 94,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 46000000,
        "duration_milliseconds": 362,
        "text_offset": 97,
        "word_length": 5,
        "text": "using",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 49875000,
        "duration_milliseconds": 112,
        "text_offset": 103,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 51250000,
        "duration_milliseconds": 587,
        "text_offset": 107,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 57375000,
        "duration_milliseconds": 112,
        "text_offset": 117,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58625000,
        "duration_milliseconds": 475,
        "text_offset": 120,
        "word_length": 7,
        "text": "Blossom",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "then-we-search-for-every-node-in-the-graph-with-an-cd2fe15a.mp3",
    "final_audio": "then-we-search-for-every-node-in-the-graph-with-an-cd2fe15a.mp3"
  },
  {
    "input_text": "After finding all the nodes with an odd degree we need to find a minimum perfect matching in the subgraph consisting only of the odd degree vertices. A perfect matching means every vertex is paired, and minimal means the sum of the lengths of the edges in the pairing is minimized.",
    "input_data": {
      "input_text": "After finding all the nodes with an odd degree we need to find a minimum perfect matching in the subgraph consisting only of the odd degree vertices. A perfect matching means every vertex is paired, and minimal means the sum of the lengths of the edges in the pairing is minimized.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">After finding all the nodes with an odd degree we need to find a minimum perfect matching in the subgraph consisting only of the odd degree vertices. A perfect matching means every vertex is paired, and minimal means the sum of the lengths of the edges in the pairing is minimized.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">After finding all the nodes with an odd degree we need to find a minimum perfect matching in the subgraph consisting only of the odd degree vertices. A perfect matching means every vertex is paired, and minimal means the sum of the lengths of the edges in the pairing is minimized.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 312,
        "text_offset": 0,
        "word_length": 5,
        "text": "After",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3875000,
        "duration_milliseconds": 350,
        "text_offset": 6,
        "word_length": 7,
        "text": "finding",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7625000,
        "duration_milliseconds": 112,
        "text_offset": 14,
        "word_length": 3,
        "text": "all",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 100,
        "text_offset": 18,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10125000,
        "duration_milliseconds": 275,
        "text_offset": 22,
        "word_length": 5,
        "text": "nodes",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13000000,
        "duration_milliseconds": 112,
        "text_offset": 28,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14375000,
        "duration_milliseconds": 100,
        "text_offset": 33,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15625000,
        "duration_milliseconds": 162,
        "text_offset": 36,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17500000,
        "duration_milliseconds": 312,
        "text_offset": 40,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20750000,
        "duration_milliseconds": 125,
        "text_offset": 47,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22250000,
        "duration_milliseconds": 150,
        "text_offset": 50,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23875000,
        "duration_milliseconds": 75,
        "text_offset": 55,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24875000,
        "duration_milliseconds": 237,
        "text_offset": 58,
        "word_length": 4,
        "text": "find",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27500000,
        "duration_milliseconds": 50,
        "text_offset": 63,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28125000,
        "duration_milliseconds": 412,
        "text_offset": 65,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32500000,
        "duration_milliseconds": 425,
        "text_offset": 73,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37000000,
        "duration_milliseconds": 375,
        "text_offset": 81,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40875000,
        "duration_milliseconds": 62,
        "text_offset": 90,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41625000,
        "duration_milliseconds": 100,
        "text_offset": 93,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 42875000,
        "duration_milliseconds": 525,
        "text_offset": 97,
        "word_length": 8,
        "text": "subgraph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 48375000,
        "duration_milliseconds": 550,
        "text_offset": 106,
        "word_length": 10,
        "text": "consisting",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 54125000,
        "duration_milliseconds": 237,
        "text_offset": 117,
        "word_length": 4,
        "text": "only",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 56750000,
        "duration_milliseconds": 62,
        "text_offset": 122,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 57625000,
        "duration_milliseconds": 100,
        "text_offset": 125,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58875000,
        "duration_milliseconds": 175,
        "text_offset": 129,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60750000,
        "duration_milliseconds": 275,
        "text_offset": 133,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 63750000,
        "duration_milliseconds": 637,
        "text_offset": 140,
        "word_length": 8,
        "text": "vertices",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 70375000,
        "duration_milliseconds": 100,
        "text_offset": 148,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 79000000,
        "duration_milliseconds": 137,
        "text_offset": 150,
        "word_length": 1,
        "text": "A",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 80500000,
        "duration_milliseconds": 412,
        "text_offset": 152,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 84875000,
        "duration_milliseconds": 375,
        "text_offset": 160,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 88875000,
        "duration_milliseconds": 300,
        "text_offset": 169,
        "word_length": 5,
        "text": "means",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 92000000,
        "duration_milliseconds": 212,
        "text_offset": 175,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 94250000,
        "duration_milliseconds": 437,
        "text_offset": 181,
        "word_length": 6,
        "text": "vertex",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 98750000,
        "duration_milliseconds": 112,
        "text_offset": 188,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 100125000,
        "duration_milliseconds": 350,
        "text_offset": 191,
        "word_length": 6,
        "text": "paired",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 104625000,
        "duration_milliseconds": 175,
        "text_offset": 197,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 106375000,
        "duration_milliseconds": 137,
        "text_offset": 199,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 108000000,
        "duration_milliseconds": 350,
        "text_offset": 203,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 111750000,
        "duration_milliseconds": 250,
        "text_offset": 211,
        "word_length": 5,
        "text": "means",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 114500000,
        "duration_milliseconds": 112,
        "text_offset": 217,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 115875000,
        "duration_milliseconds": 212,
        "text_offset": 221,
        "word_length": 3,
        "text": "sum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 118125000,
        "duration_milliseconds": 75,
        "text_offset": 225,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 119125000,
        "duration_milliseconds": 100,
        "text_offset": 228,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 120375000,
        "duration_milliseconds": 312,
        "text_offset": 232,
        "word_length": 7,
        "text": "lengths",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 123750000,
        "duration_milliseconds": 87,
        "text_offset": 240,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 124875000,
        "duration_milliseconds": 87,
        "text_offset": 243,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 126000000,
        "duration_milliseconds": 337,
        "text_offset": 247,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 129625000,
        "duration_milliseconds": 62,
        "text_offset": 253,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 130375000,
        "duration_milliseconds": 100,
        "text_offset": 256,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 131625000,
        "duration_milliseconds": 362,
        "text_offset": 260,
        "word_length": 7,
        "text": "pairing",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 135375000,
        "duration_milliseconds": 125,
        "text_offset": 268,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 136750000,
        "duration_milliseconds": 662,
        "text_offset": 271,
        "word_length": 9,
        "text": "minimized",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 143625000,
        "duration_milliseconds": 100,
        "text_offset": 280,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "after-finding-all-the-nodes-with-an-odd-degree-we-0f720219.mp3",
    "final_audio": "after-finding-all-the-nodes-with-an-odd-degree-we-0f720219.mp3"
  },
  {
    "input_text": "Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.",
    "input_data": {
      "input_text": "Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 200,
        "text_offset": 0,
        "word_length": 4,
        "text": "Then",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2750000,
        "duration_milliseconds": 100,
        "text_offset": 5,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4000000,
        "duration_milliseconds": 150,
        "text_offset": 8,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5625000,
        "duration_milliseconds": 100,
        "text_offset": 13,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6875000,
        "duration_milliseconds": 400,
        "text_offset": 16,
        "word_length": 7,
        "text": "combine",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11125000,
        "duration_milliseconds": 87,
        "text_offset": 24,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12250000,
        "duration_milliseconds": 362,
        "text_offset": 28,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16125000,
        "duration_milliseconds": 387,
        "text_offset": 36,
        "word_length": 8,
        "text": "spanning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20250000,
        "duration_milliseconds": 212,
        "text_offset": 45,
        "word_length": 4,
        "text": "tree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22625000,
        "duration_milliseconds": 137,
        "text_offset": 50,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24250000,
        "duration_milliseconds": 112,
        "text_offset": 55,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 25625000,
        "duration_milliseconds": 425,
        "text_offset": 59,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30000000,
        "duration_milliseconds": 362,
        "text_offset": 67,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33875000,
        "duration_milliseconds": 125,
        "text_offset": 76,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35375000,
        "duration_milliseconds": 300,
        "text_offset": 79,
        "word_length": 6,
        "text": "obtain",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 38625000,
        "duration_milliseconds": 62,
        "text_offset": 86,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39500000,
        "duration_milliseconds": 612,
        "text_offset": 88,
        "word_length": 10,
        "text": "multigraph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 45875000,
        "duration_milliseconds": 100,
        "text_offset": 99,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 47125000,
        "duration_milliseconds": 187,
        "text_offset": 102,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 49250000,
        "duration_milliseconds": 212,
        "text_offset": 108,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 51625000,
        "duration_milliseconds": 487,
        "text_offset": 114,
        "word_length": 6,
        "text": "vertex",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 56750000,
        "duration_milliseconds": 175,
        "text_offset": 121,
        "word_length": 3,
        "text": "has",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58750000,
        "duration_milliseconds": 100,
        "text_offset": 125,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60000000,
        "duration_milliseconds": 175,
        "text_offset": 128,
        "word_length": 4,
        "text": "even",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 61875000,
        "duration_milliseconds": 475,
        "text_offset": 133,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 66875000,
        "duration_milliseconds": 100,
        "text_offset": 139,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "then-we-need-to-combine-the-minimum-spanning-tree-ad2051d8.mp3",
    "final_audio": "then-we-need-to-combine-the-minimum-spanning-tree-ad2051d8.mp3"
  },
  {
    "input_text": "Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.",
    "input_data": {
      "input_text": "Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 325,
        "text_offset": 0,
        "word_length": 5,
        "text": "Since",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4000000,
        "duration_milliseconds": 237,
        "text_offset": 6,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6625000,
        "duration_milliseconds": 475,
        "text_offset": 12,
        "word_length": 6,
        "text": "vertex",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11625000,
        "duration_milliseconds": 175,
        "text_offset": 19,
        "word_length": 3,
        "text": "has",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13625000,
        "duration_milliseconds": 100,
        "text_offset": 23,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14875000,
        "duration_milliseconds": 187,
        "text_offset": 26,
        "word_length": 4,
        "text": "even",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17000000,
        "duration_milliseconds": 400,
        "text_offset": 31,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21875000,
        "duration_milliseconds": 112,
        "text_offset": 37,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 23000000,
        "duration_milliseconds": 162,
        "text_offset": 39,
        "word_length": 5,
        "text": "there",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24750000,
        "duration_milliseconds": 425,
        "text_offset": 45,
        "word_length": 6,
        "text": "exists",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29250000,
        "duration_milliseconds": 112,
        "text_offset": 52,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30625000,
        "duration_milliseconds": 550,
        "text_offset": 55,
        "word_length": 8,
        "text": "Eulerian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36375000,
        "duration_milliseconds": 375,
        "text_offset": 64,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40375000,
        "duration_milliseconds": 87,
        "text_offset": 72,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41500000,
        "duration_milliseconds": 175,
        "text_offset": 75,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 43375000,
        "duration_milliseconds": 575,
        "text_offset": 80,
        "word_length": 5,
        "text": "graph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 49375000,
        "duration_milliseconds": 100,
        "text_offset": 85,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 58000000,
        "duration_milliseconds": 175,
        "text_offset": 87,
        "word_length": 2,
        "text": "An",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60000000,
        "duration_milliseconds": 512,
        "text_offset": 90,
        "word_length": 8,
        "text": "Eulerian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 65375000,
        "duration_milliseconds": 375,
        "text_offset": 99,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 69250000,
        "duration_milliseconds": 125,
        "text_offset": 107,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 70750000,
        "duration_milliseconds": 62,
        "text_offset": 110,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 71625000,
        "duration_milliseconds": 312,
        "text_offset": 112,
        "word_length": 4,
        "text": "path",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 75000000,
        "duration_milliseconds": 150,
        "text_offset": 117,
        "word_length": 4,
        "text": "that",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76750000,
        "duration_milliseconds": 350,
        "text_offset": 122,
        "word_length": 6,
        "text": "visits",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 80500000,
        "duration_milliseconds": 212,
        "text_offset": 129,
        "word_length": 4,
        "text": "each",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 82875000,
        "duration_milliseconds": 150,
        "text_offset": 134,
        "word_length": 4,
        "text": "edge",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 84625000,
        "duration_milliseconds": 487,
        "text_offset": 139,
        "word_length": 7,
        "text": "exactly",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 89750000,
        "duration_milliseconds": 475,
        "text_offset": 147,
        "word_length": 4,
        "text": "once",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 94750000,
        "duration_milliseconds": 100,
        "text_offset": 151,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 103375000,
        "duration_milliseconds": 212,
        "text_offset": 153,
        "word_length": 2,
        "text": "We",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 105750000,
        "duration_milliseconds": 212,
        "text_offset": 156,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 108000000,
        "duration_milliseconds": 100,
        "text_offset": 161,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 109250000,
        "duration_milliseconds": 337,
        "text_offset": 164,
        "word_length": 4,
        "text": "find",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 112750000,
        "duration_milliseconds": 187,
        "text_offset": 169,
        "word_length": 2,
        "text": "it",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 114750000,
        "duration_milliseconds": 100,
        "text_offset": 171,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "since-every-vertex-has-an-even-degree-there-exists-20bb5a60.mp3",
    "final_audio": "since-every-vertex-has-an-even-degree-there-exists-20bb5a60.mp3"
  },
  {
    "input_text": "Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.",
    "input_data": {
      "input_text": "Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 237,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3125000,
        "duration_milliseconds": 125,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4625000,
        "duration_milliseconds": 375,
        "text_offset": 7,
        "word_length": 7,
        "text": "convert",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8625000,
        "duration_milliseconds": 75,
        "text_offset": 15,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9625000,
        "duration_milliseconds": 512,
        "text_offset": 19,
        "word_length": 8,
        "text": "Eulerian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15000000,
        "duration_milliseconds": 375,
        "text_offset": 28,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19000000,
        "duration_milliseconds": 125,
        "text_offset": 36,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20500000,
        "duration_milliseconds": 50,
        "text_offset": 39,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21250000,
        "duration_milliseconds": 712,
        "text_offset": 41,
        "word_length": 11,
        "text": "Hamiltonian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28625000,
        "duration_milliseconds": 387,
        "text_offset": 53,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32750000,
        "duration_milliseconds": 150,
        "text_offset": 61,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34500000,
        "duration_milliseconds": 462,
        "text_offset": 64,
        "word_length": 8,
        "text": "skipping",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39250000,
        "duration_milliseconds": 437,
        "text_offset": 73,
        "word_length": 8,
        "text": "repeated",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 43750000,
        "duration_milliseconds": 650,
        "text_offset": 82,
        "word_length": 8,
        "text": "vertices",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 50500000,
        "duration_milliseconds": 100,
        "text_offset": 90,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "now-we-convert-the-eulerian-circuit-to-a-5c9d1a2f.mp3",
    "final_audio": "now-we-convert-the-eulerian-circuit-to-a-5c9d1a2f.mp3"
  },
  {
    "input_text": "Let's take a look at the graph to visualize this algorithm.",
    "input_data": {
      "input_text": "Let's take a look at the graph to visualize this algorithm.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Let's take a look at the graph to visualize this algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Let's take a look at the graph to visualize this algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 300,
        "text_offset": 0,
        "word_length": 5,
        "text": "Let's",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3625000,
        "duration_milliseconds": 187,
        "text_offset": 6,
        "word_length": 4,
        "text": "take",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5750000,
        "duration_milliseconds": 62,
        "text_offset": 11,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6625000,
        "duration_milliseconds": 225,
        "text_offset": 13,
        "word_length": 4,
        "text": "look",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9125000,
        "duration_milliseconds": 75,
        "text_offset": 18,
        "word_length": 2,
        "text": "at",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10125000,
        "duration_milliseconds": 112,
        "text_offset": 21,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11500000,
        "duration_milliseconds": 325,
        "text_offset": 25,
        "word_length": 5,
        "text": "graph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15000000,
        "duration_milliseconds": 100,
        "text_offset": 31,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16250000,
        "duration_milliseconds": 600,
        "text_offset": 34,
        "word_length": 9,
        "text": "visualize",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22500000,
        "duration_milliseconds": 187,
        "text_offset": 44,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24625000,
        "duration_milliseconds": 625,
        "text_offset": 49,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 31125000,
        "duration_milliseconds": 100,
        "text_offset": 58,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "let-s-take-a-look-at-the-graph-to-visualize-this-c57f7870.mp3",
    "final_audio": "let-s-take-a-look-at-the-graph-to-visualize-this-c57f7870.mp3"
  },
  {
    "input_text": "Like explained before we create a minimal spanning tree.",
    "input_data": {
      "input_text": "Like explained before we create a minimal spanning tree.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Like explained before we create a minimal spanning tree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Like explained before we create a minimal spanning tree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 225,
        "text_offset": 0,
        "word_length": 4,
        "text": "Like",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3000000,
        "duration_milliseconds": 500,
        "text_offset": 5,
        "word_length": 9,
        "text": "explained",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8250000,
        "duration_milliseconds": 337,
        "text_offset": 15,
        "word_length": 6,
        "text": "before",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11750000,
        "duration_milliseconds": 125,
        "text_offset": 22,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13250000,
        "duration_milliseconds": 337,
        "text_offset": 25,
        "word_length": 6,
        "text": "create",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16875000,
        "duration_milliseconds": 50,
        "text_offset": 32,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17500000,
        "duration_milliseconds": 375,
        "text_offset": 34,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21500000,
        "duration_milliseconds": 400,
        "text_offset": 42,
        "word_length": 8,
        "text": "spanning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 25750000,
        "duration_milliseconds": 350,
        "text_offset": 51,
        "word_length": 4,
        "text": "tree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29500000,
        "duration_milliseconds": 100,
        "text_offset": 55,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "like-explained-before-we-create-a-minimal-spanning-44a9aef2.mp3",
    "final_audio": "like-explained-before-we-create-a-minimal-spanning-44a9aef2.mp3"
  },
  {
    "input_text": "Now we point out every node with an odd degree",
    "input_data": {
      "input_text": "Now we point out every node with an odd degree",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we point out every node with an odd degree</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we point out every node with an odd degree</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 250,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3250000,
        "duration_milliseconds": 125,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4625000,
        "duration_milliseconds": 262,
        "text_offset": 7,
        "word_length": 5,
        "text": "point",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7500000,
        "duration_milliseconds": 200,
        "text_offset": 13,
        "word_length": 3,
        "text": "out",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9625000,
        "duration_milliseconds": 225,
        "text_offset": 17,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12125000,
        "duration_milliseconds": 262,
        "text_offset": 23,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15000000,
        "duration_milliseconds": 137,
        "text_offset": 28,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16625000,
        "duration_milliseconds": 112,
        "text_offset": 33,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17875000,
        "duration_milliseconds": 162,
        "text_offset": 36,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19625000,
        "duration_milliseconds": 450,
        "text_offset": 40,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "now-we-point-out-every-node-with-an-odd-degree-02c8675e.mp3",
    "final_audio": "now-we-point-out-every-node-with-an-odd-degree-02c8675e.mp3"
  },
  {
    "input_text": "We can now point out the minimal perfect matching, so we add edges with the minimum weight until every node has an odd degree.",
    "input_data": {
      "input_text": "We can now point out the minimal perfect matching, so we add edges with the minimum weight until every node has an odd degree.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We can now point out the minimal perfect matching, so we add edges with the minimum weight until every node has an odd degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We can now point out the minimal perfect matching, so we add edges with the minimum weight until every node has an odd degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 162,
        "text_offset": 0,
        "word_length": 2,
        "text": "We",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2375000,
        "duration_milliseconds": 137,
        "text_offset": 3,
        "word_length": 3,
        "text": "can",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4000000,
        "duration_milliseconds": 175,
        "text_offset": 7,
        "word_length": 3,
        "text": "now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5875000,
        "duration_milliseconds": 250,
        "text_offset": 11,
        "word_length": 5,
        "text": "point",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8625000,
        "duration_milliseconds": 125,
        "text_offset": 17,
        "word_length": 3,
        "text": "out",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10125000,
        "duration_milliseconds": 87,
        "text_offset": 21,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11250000,
        "duration_milliseconds": 375,
        "text_offset": 25,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15250000,
        "duration_milliseconds": 400,
        "text_offset": 33,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19375000,
        "duration_milliseconds": 400,
        "text_offset": 41,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24250000,
        "duration_milliseconds": 162,
        "text_offset": 49,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 25875000,
        "duration_milliseconds": 100,
        "text_offset": 51,
        "word_length": 2,
        "text": "so",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27125000,
        "duration_milliseconds": 125,
        "text_offset": 54,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28625000,
        "duration_milliseconds": 162,
        "text_offset": 57,
        "word_length": 3,
        "text": "add",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30500000,
        "duration_milliseconds": 275,
        "text_offset": 61,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33500000,
        "duration_milliseconds": 137,
        "text_offset": 67,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35125000,
        "duration_milliseconds": 75,
        "text_offset": 72,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36000000,
        "duration_milliseconds": 387,
        "text_offset": 76,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40125000,
        "duration_milliseconds": 225,
        "text_offset": 84,
        "word_length": 6,
        "text": "weight",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 42500000,
        "duration_milliseconds": 337,
        "text_offset": 91,
        "word_length": 5,
        "text": "until",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 46000000,
        "duration_milliseconds": 212,
        "text_offset": 97,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 48375000,
        "duration_milliseconds": 212,
        "text_offset": 103,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 50750000,
        "duration_milliseconds": 187,
        "text_offset": 108,
        "word_length": 3,
        "text": "has",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 52875000,
        "duration_milliseconds": 100,
        "text_offset": 112,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 54000000,
        "duration_milliseconds": 162,
        "text_offset": 115,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 55750000,
        "duration_milliseconds": 425,
        "text_offset": 119,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60250000,
        "duration_milliseconds": 100,
        "text_offset": 125,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "we-can-now-point-out-the-minimal-perfect-matching-95146c38.mp3",
    "final_audio": "we-can-now-point-out-the-minimal-perfect-matching-95146c38.mp3"
  },
  {
    "input_text": "Now we are going to find an eulerian tour which hits every edge exact once.",
    "input_data": {
      "input_text": "Now we are going to find an eulerian tour which hits every edge exact once.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we are going to find an eulerian tour which hits every edge exact once.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we are going to find an eulerian tour which hits every edge exact once.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 250,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3250000,
        "duration_milliseconds": 112,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4625000,
        "duration_milliseconds": 100,
        "text_offset": 7,
        "word_length": 3,
        "text": "are",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5875000,
        "duration_milliseconds": 200,
        "text_offset": 11,
        "word_length": 5,
        "text": "going",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8000000,
        "duration_milliseconds": 75,
        "text_offset": 17,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 275,
        "text_offset": 20,
        "word_length": 4,
        "text": "find",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11875000,
        "duration_milliseconds": 75,
        "text_offset": 25,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12875000,
        "duration_milliseconds": 525,
        "text_offset": 28,
        "word_length": 8,
        "text": "eulerian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 18375000,
        "duration_milliseconds": 312,
        "text_offset": 37,
        "word_length": 4,
        "text": "tour",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21750000,
        "duration_milliseconds": 175,
        "text_offset": 42,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23750000,
        "duration_milliseconds": 237,
        "text_offset": 48,
        "word_length": 4,
        "text": "hits",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26250000,
        "duration_milliseconds": 275,
        "text_offset": 53,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29125000,
        "duration_milliseconds": 175,
        "text_offset": 59,
        "word_length": 4,
        "text": "edge",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 31000000,
        "duration_milliseconds": 412,
        "text_offset": 64,
        "word_length": 5,
        "text": "exact",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35375000,
        "duration_milliseconds": 387,
        "text_offset": 70,
        "word_length": 4,
        "text": "once",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39375000,
        "duration_milliseconds": 100,
        "text_offset": 74,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "now-we-are-going-to-find-an-eulerian-tour-which-332be64c.mp3",
    "final_audio": "now-we-are-going-to-find-an-eulerian-tour-which-332be64c.mp3"
  },
  {
    "input_text": "The last step will be to convert the euleric circle into a hamilton circle, so we have to delete all edges which make the circle visit a node which we have seen before. In our case these are the edges between 9 and 4.",
    "input_data": {
      "input_text": "The last step will be to convert the euleric circle into a hamilton circle, so we have to delete all edges which make the circle visit a node which we have seen before. In our case these are the edges between 9 and 4.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">The last step will be to convert the euleric circle into a hamilton circle, so we have to delete all edges which make the circle visit a node which we have seen before. In our case these are the edges between 9 and 4.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">The last step will be to convert the euleric circle into a hamilton circle, so we have to delete all edges which make the circle visit a node which we have seen before. In our case these are the edges between 9 and 4.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 137,
        "text_offset": 0,
        "word_length": 3,
        "text": "The",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2125000,
        "duration_milliseconds": 250,
        "text_offset": 4,
        "word_length": 4,
        "text": "last",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4875000,
        "duration_milliseconds": 250,
        "text_offset": 9,
        "word_length": 4,
        "text": "step",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7625000,
        "duration_milliseconds": 87,
        "text_offset": 14,
        "word_length": 4,
        "text": "will",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8750000,
        "duration_milliseconds": 112,
        "text_offset": 19,
        "word_length": 2,
        "text": "be",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10000000,
        "duration_milliseconds": 100,
        "text_offset": 22,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11250000,
        "duration_milliseconds": 400,
        "text_offset": 25,
        "word_length": 7,
        "text": "convert",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15500000,
        "duration_milliseconds": 75,
        "text_offset": 33,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16500000,
        "duration_milliseconds": 412,
        "text_offset": 37,
        "word_length": 7,
        "text": "euleric",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20875000,
        "duration_milliseconds": 387,
        "text_offset": 45,
        "word_length": 6,
        "text": "circle",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24875000,
        "duration_milliseconds": 200,
        "text_offset": 52,
        "word_length": 4,
        "text": "into",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27125000,
        "duration_milliseconds": 37,
        "text_offset": 57,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27625000,
        "duration_milliseconds": 462,
        "text_offset": 59,
        "word_length": 8,
        "text": "hamilton",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32500000,
        "duration_milliseconds": 400,
        "text_offset": 68,
        "word_length": 6,
        "text": "circle",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37500000,
        "duration_milliseconds": 187,
        "text_offset": 74,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 39375000,
        "duration_milliseconds": 100,
        "text_offset": 76,
        "word_length": 2,
        "text": "so",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40500000,
        "duration_milliseconds": 100,
        "text_offset": 79,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41750000,
        "duration_milliseconds": 150,
        "text_offset": 82,
        "word_length": 4,
        "text": "have",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 43375000,
        "duration_milliseconds": 87,
        "text_offset": 87,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44375000,
        "duration_milliseconds": 312,
        "text_offset": 90,
        "word_length": 6,
        "text": "delete",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 47750000,
        "duration_milliseconds": 225,
        "text_offset": 97,
        "word_length": 3,
        "text": "all",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 50250000,
        "duration_milliseconds": 300,
        "text_offset": 101,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 53500000,
        "duration_milliseconds": 187,
        "text_offset": 107,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 55500000,
        "duration_milliseconds": 175,
        "text_offset": 113,
        "word_length": 4,
        "text": "make",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 57500000,
        "duration_milliseconds": 100,
        "text_offset": 118,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58750000,
        "duration_milliseconds": 375,
        "text_offset": 122,
        "word_length": 6,
        "text": "circle",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 62625000,
        "duration_milliseconds": 287,
        "text_offset": 129,
        "word_length": 5,
        "text": "visit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 65750000,
        "duration_milliseconds": 37,
        "text_offset": 135,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 66250000,
        "duration_milliseconds": 275,
        "text_offset": 137,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 69250000,
        "duration_milliseconds": 187,
        "text_offset": 142,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 71250000,
        "duration_milliseconds": 125,
        "text_offset": 148,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 72750000,
        "duration_milliseconds": 112,
        "text_offset": 151,
        "word_length": 4,
        "text": "have",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 74000000,
        "duration_milliseconds": 225,
        "text_offset": 156,
        "word_length": 4,
        "text": "seen",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76500000,
        "duration_milliseconds": 525,
        "text_offset": 161,
        "word_length": 6,
        "text": "before",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 82000000,
        "duration_milliseconds": 100,
        "text_offset": 167,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 90625000,
        "duration_milliseconds": 162,
        "text_offset": 169,
        "word_length": 2,
        "text": "In",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 92500000,
        "duration_milliseconds": 125,
        "text_offset": 172,
        "word_length": 3,
        "text": "our",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 93875000,
        "duration_milliseconds": 262,
        "text_offset": 176,
        "word_length": 4,
        "text": "case",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 96750000,
        "duration_milliseconds": 212,
        "text_offset": 181,
        "word_length": 5,
        "text": "these",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 99125000,
        "duration_milliseconds": 100,
        "text_offset": 187,
        "word_length": 3,
        "text": "are",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 100250000,
        "duration_milliseconds": 87,
        "text_offset": 191,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 101375000,
        "duration_milliseconds": 387,
        "text_offset": 195,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 105500000,
        "duration_milliseconds": 362,
        "text_offset": 201,
        "word_length": 7,
        "text": "between",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 109375000,
        "duration_milliseconds": 250,
        "text_offset": 209,
        "word_length": 1,
        "text": "9",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 112000000,
        "duration_milliseconds": 87,
        "text_offset": 211,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 113125000,
        "duration_milliseconds": 487,
        "text_offset": 215,
        "word_length": 1,
        "text": "4",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 118250000,
        "duration_milliseconds": 100,
        "text_offset": 216,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "the-last-step-will-be-to-convert-the-euleric-3ff5adf2.mp3",
    "final_audio": "the-last-step-will-be-to-convert-the-euleric-3ff5adf2.mp3"
  },
  {
    "input_text": "If we take a look at the time complexity of the Christofides algorithm it is mainly determined by the step of finding a minimum perfect matching, which is O(n^3). Therefore, the overall complexity of the Christofides algorithm is O(n^3).",
    "input_data": {
      "input_text": "If we take a look at the time complexity of the Christofides algorithm it is mainly determined by the step of finding a minimum perfect matching, which is O(n^3). Therefore, the overall complexity of the Christofides algorithm is O(n^3).",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">If we take a look at the time complexity of the Christofides algorithm it is mainly determined by the step of finding a minimum perfect matching, which is O(n^3). Therefore, the overall complexity of the Christofides algorithm is O(n^3).</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">If we take a look at the time complexity of the Christofides algorithm it is mainly determined by the step of finding a minimum perfect matching, which is O(n^3). Therefore, the overall complexity of the Christofides algorithm is O(n^3).</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 175,
        "text_offset": 0,
        "word_length": 2,
        "text": "If",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2500000,
        "duration_milliseconds": 100,
        "text_offset": 3,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3625000,
        "duration_milliseconds": 175,
        "text_offset": 6,
        "word_length": 4,
        "text": "take",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5500000,
        "duration_milliseconds": 50,
        "text_offset": 11,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6250000,
        "duration_milliseconds": 187,
        "text_offset": 13,
        "word_length": 4,
        "text": "look",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8375000,
        "duration_milliseconds": 62,
        "text_offset": 18,
        "word_length": 2,
        "text": "at",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9125000,
        "duration_milliseconds": 100,
        "text_offset": 21,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10375000,
        "duration_milliseconds": 250,
        "text_offset": 25,
        "word_length": 4,
        "text": "time",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13000000,
        "duration_milliseconds": 637,
        "text_offset": 30,
        "word_length": 10,
        "text": "complexity",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19625000,
        "duration_milliseconds": 75,
        "text_offset": 41,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20625000,
        "duration_milliseconds": 87,
        "text_offset": 44,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21750000,
        "duration_milliseconds": 737,
        "text_offset": 48,
        "word_length": 12,
        "text": "Christofides",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29375000,
        "duration_milliseconds": 525,
        "text_offset": 61,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34875000,
        "duration_milliseconds": 87,
        "text_offset": 71,
        "word_length": 2,
        "text": "it",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35875000,
        "duration_milliseconds": 125,
        "text_offset": 74,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37250000,
        "duration_milliseconds": 312,
        "text_offset": 77,
        "word_length": 6,
        "text": "mainly",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40500000,
        "duration_milliseconds": 500,
        "text_offset": 84,
        "word_length": 10,
        "text": "determined",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 45750000,
        "duration_milliseconds": 112,
        "text_offset": 95,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 47000000,
        "duration_milliseconds": 112,
        "text_offset": 98,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 48375000,
        "duration_milliseconds": 250,
        "text_offset": 102,
        "word_length": 4,
        "text": "step",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 51000000,
        "duration_milliseconds": 112,
        "text_offset": 107,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 52375000,
        "duration_milliseconds": 362,
        "text_offset": 110,
        "word_length": 7,
        "text": "finding",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 56250000,
        "duration_milliseconds": 50,
        "text_offset": 118,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 56875000,
        "duration_milliseconds": 387,
        "text_offset": 120,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60875000,
        "duration_milliseconds": 400,
        "text_offset": 128,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 65000000,
        "duration_milliseconds": 387,
        "text_offset": 136,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 69750000,
        "duration_milliseconds": 100,
        "text_offset": 144,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 70875000,
        "duration_milliseconds": 175,
        "text_offset": 146,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 72750000,
        "duration_milliseconds": 137,
        "text_offset": 152,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 74375000,
        "duration_milliseconds": 162,
        "text_offset": 155,
        "word_length": 1,
        "text": "O",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76875000,
        "duration_milliseconds": 100,
        "text_offset": 156,
        "word_length": 1,
        "text": "(",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 77875000,
        "duration_milliseconds": 600,
        "text_offset": 157,
        "word_length": 3,
        "text": "n^3",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 84125000,
        "duration_milliseconds": 100,
        "text_offset": 161,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 92750000,
        "duration_milliseconds": 500,
        "text_offset": 163,
        "word_length": 9,
        "text": "Therefore",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 98750000,
        "duration_milliseconds": 75,
        "text_offset": 172,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 99500000,
        "duration_milliseconds": 112,
        "text_offset": 174,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 100875000,
        "duration_milliseconds": 425,
        "text_offset": 178,
        "word_length": 7,
        "text": "overall",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 105375000,
        "duration_milliseconds": 662,
        "text_offset": 186,
        "word_length": 10,
        "text": "complexity",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 112250000,
        "duration_milliseconds": 75,
        "text_offset": 197,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 113250000,
        "duration_milliseconds": 112,
        "text_offset": 200,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 114625000,
        "duration_milliseconds": 725,
        "text_offset": 204,
        "word_length": 12,
        "text": "Christofides",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 122125000,
        "duration_milliseconds": 550,
        "text_offset": 217,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 127750000,
        "duration_milliseconds": 150,
        "text_offset": 227,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 129375000,
        "duration_milliseconds": 212,
        "text_offset": 230,
        "word_length": 1,
        "text": "O",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 132375000,
        "duration_milliseconds": 87,
        "text_offset": 231,
        "word_length": 1,
        "text": "(",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 133250000,
        "duration_milliseconds": 600,
        "text_offset": 232,
        "word_length": 3,
        "text": "n^3",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 139375000,
        "duration_milliseconds": 100,
        "text_offset": 236,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "if-we-take-a-look-at-the-time-complexity-of-the-dabb1f2e.mp3",
    "final_audio": "if-we-take-a-look-at-the-time-complexity-of-the-dabb1f2e.mp3"
  },
  {
    "input_text": "Now we go on with the next topic",
    "input_data": {
      "input_text": "Now we go on with the next topic",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we go on with the next topic</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we go on with the next topic</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 275,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3375000,
        "duration_milliseconds": 137,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5000000,
        "duration_milliseconds": 250,
        "text_offset": 7,
        "word_length": 2,
        "text": "go",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7625000,
        "duration_milliseconds": 175,
        "text_offset": 10,
        "word_length": 2,
        "text": "on",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9500000,
        "duration_milliseconds": 125,
        "text_offset": 13,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11000000,
        "duration_milliseconds": 87,
        "text_offset": 18,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12000000,
        "duration_milliseconds": 250,
        "text_offset": 22,
        "word_length": 4,
        "text": "next",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14625000,
        "duration_milliseconds": 437,
        "text_offset": 27,
        "word_length": 5,
        "text": "topic",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "now-we-go-on-with-the-next-topic-b4db96e8.mp3",
    "final_audio": "now-we-go-on-with-the-next-topic-b4db96e8.mp3"
  },
  {
    "input_text": "In the following we will explain the christofides algorithm.",
    "input_data": {
      "input_text": "In the following we will explain the christofides algorithm.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">In the following we will explain the christofides algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">In the following we will explain the christofides algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 175,
        "text_offset": 0,
        "word_length": 2,
        "text": "In",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2375000,
        "duration_milliseconds": 100,
        "text_offset": 3,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3625000,
        "duration_milliseconds": 450,
        "text_offset": 7,
        "word_length": 9,
        "text": "following",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8375000,
        "duration_milliseconds": 125,
        "text_offset": 17,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9875000,
        "duration_milliseconds": 137,
        "text_offset": 20,
        "word_length": 4,
        "text": "will",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11500000,
        "duration_milliseconds": 412,
        "text_offset": 25,
        "word_length": 7,
        "text": "explain",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15875000,
        "duration_milliseconds": 112,
        "text_offset": 33,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17250000,
        "duration_milliseconds": 875,
        "text_offset": 37,
        "word_length": 12,
        "text": "christofides",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26250000,
        "duration_milliseconds": 650,
        "text_offset": 50,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32875000,
        "duration_milliseconds": 100,
        "text_offset": 59,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "in-the-following-we-will-explain-the-christofides-94a11300.mp3",
    "final_audio": "in-the-following-we-will-explain-the-christofides-94a11300.mp3"
  },
  {
    "input_text": "This is an approximated algorithm to solve the TSP with a O(n^3) complexity. This algorithm guarantees a solution that is at most fifthy percent longer than the optimal round trip.",
    "input_data": {
      "input_text": "This is an approximated algorithm to solve the TSP with a O(n^3) complexity. This algorithm guarantees a solution that is at most fifthy percent longer than the optimal round trip.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">This is an approximated algorithm to solve the TSP with a O(n^3) complexity. This algorithm guarantees a solution that is at most fifthy percent longer than the optimal round trip.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">This is an approximated algorithm to solve the TSP with a O(n^3) complexity. This algorithm guarantees a solution that is at most fifthy percent longer than the optimal round trip.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 225,
        "text_offset": 0,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3000000,
        "duration_milliseconds": 100,
        "text_offset": 5,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4250000,
        "duration_milliseconds": 87,
        "text_offset": 8,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5375000,
        "duration_milliseconds": 762,
        "text_offset": 11,
        "word_length": 12,
        "text": "approximated",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13250000,
        "duration_milliseconds": 550,
        "text_offset": 24,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19000000,
        "duration_milliseconds": 100,
        "text_offset": 34,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20125000,
        "duration_milliseconds": 312,
        "text_offset": 37,
        "word_length": 5,
        "text": "solve",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23500000,
        "duration_milliseconds": 100,
        "text_offset": 43,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24625000,
        "duration_milliseconds": 562,
        "text_offset": 47,
        "word_length": 3,
        "text": "TSP",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30375000,
        "duration_milliseconds": 150,
        "text_offset": 51,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32125000,
        "duration_milliseconds": 100,
        "text_offset": 56,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33375000,
        "duration_milliseconds": 237,
        "text_offset": 58,
        "word_length": 1,
        "text": "O",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36625000,
        "duration_milliseconds": 100,
        "text_offset": 59,
        "word_length": 1,
        "text": "(",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 37625000,
        "duration_milliseconds": 587,
        "text_offset": 60,
        "word_length": 3,
        "text": "n^3",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44375000,
        "duration_milliseconds": 25,
        "text_offset": 63,
        "word_length": 1,
        "text": ")",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 44750000,
        "duration_milliseconds": 800,
        "text_offset": 65,
        "word_length": 10,
        "text": "complexity",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 53000000,
        "duration_milliseconds": 100,
        "text_offset": 75,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 61625000,
        "duration_milliseconds": 225,
        "text_offset": 77,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 64125000,
        "duration_milliseconds": 562,
        "text_offset": 82,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 70000000,
        "duration_milliseconds": 525,
        "text_offset": 92,
        "word_length": 10,
        "text": "guarantees",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 75500000,
        "duration_milliseconds": 62,
        "text_offset": 103,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76375000,
        "duration_milliseconds": 475,
        "text_offset": 105,
        "word_length": 8,
        "text": "solution",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 81375000,
        "duration_milliseconds": 125,
        "text_offset": 114,
        "word_length": 4,
        "text": "that",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 82750000,
        "duration_milliseconds": 112,
        "text_offset": 119,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 84125000,
        "duration_milliseconds": 100,
        "text_offset": 122,
        "word_length": 2,
        "text": "at",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 85375000,
        "duration_milliseconds": 275,
        "text_offset": 125,
        "word_length": 4,
        "text": "most",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 88375000,
        "duration_milliseconds": 300,
        "text_offset": 130,
        "word_length": 6,
        "text": "fifthy",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 91625000,
        "duration_milliseconds": 425,
        "text_offset": 137,
        "word_length": 7,
        "text": "percent",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 96000000,
        "duration_milliseconds": 337,
        "text_offset": 145,
        "word_length": 6,
        "text": "longer",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 99500000,
        "duration_milliseconds": 125,
        "text_offset": 152,
        "word_length": 4,
        "text": "than",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 101000000,
        "duration_milliseconds": 112,
        "text_offset": 157,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 102375000,
        "duration_milliseconds": 437,
        "text_offset": 161,
        "word_length": 7,
        "text": "optimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 106875000,
        "duration_milliseconds": 225,
        "text_offset": 169,
        "word_length": 5,
        "text": "round",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 109250000,
        "duration_milliseconds": 312,
        "text_offset": 175,
        "word_length": 4,
        "text": "trip",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 112500000,
        "duration_milliseconds": 100,
        "text_offset": 179,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "this-is-an-approximated-algorithm-to-solve-the-tsp-429c5ccc.mp3",
    "final_audio": "this-is-an-approximated-algorithm-to-solve-the-tsp-429c5ccc.mp3"
  },
  {
    "input_text": "In the following we will explain the christofides algorithm.",
    "input_data": {
      "input_text": "In the following we will explain the christofides algorithm.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">In the following we will explain the christofides algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">In the following we will explain the christofides algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 175,
        "text_offset": 0,
        "word_length": 2,
        "text": "In",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2375000,
        "duration_milliseconds": 100,
        "text_offset": 3,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3625000,
        "duration_milliseconds": 450,
        "text_offset": 7,
        "word_length": 9,
        "text": "following",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8375000,
        "duration_milliseconds": 125,
        "text_offset": 17,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9875000,
        "duration_milliseconds": 137,
        "text_offset": 20,
        "word_length": 4,
        "text": "will",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11500000,
        "duration_milliseconds": 412,
        "text_offset": 25,
        "word_length": 7,
        "text": "explain",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15875000,
        "duration_milliseconds": 112,
        "text_offset": 33,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17250000,
        "duration_milliseconds": 875,
        "text_offset": 37,
        "word_length": 12,
        "text": "christofides",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26250000,
        "duration_milliseconds": 650,
        "text_offset": 50,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32875000,
        "duration_milliseconds": 100,
        "text_offset": 59,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "in-the-following-we-will-explain-the-christofides-94a11300.mp3",
    "final_audio": "in-the-following-we-will-explain-the-christofides-94a11300.mp3"
  },
  {
    "input_text": "First we will create a minimal spanning tree with every node by using the algrithm of Prim.",
    "input_data": {
      "input_text": "First we will create a minimal spanning tree with every node by using the algrithm of Prim.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">First we will create a minimal spanning tree with every node by using the algrithm of Prim.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">First we will create a minimal spanning tree with every node by using the algrithm of Prim.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 375,
        "text_offset": 0,
        "word_length": 5,
        "text": "First",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4500000,
        "duration_milliseconds": 112,
        "text_offset": 6,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5750000,
        "duration_milliseconds": 137,
        "text_offset": 9,
        "word_length": 4,
        "text": "will",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7375000,
        "duration_milliseconds": 312,
        "text_offset": 14,
        "word_length": 6,
        "text": "create",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10750000,
        "duration_milliseconds": 50,
        "text_offset": 21,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11375000,
        "duration_milliseconds": 375,
        "text_offset": 23,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15375000,
        "duration_milliseconds": 387,
        "text_offset": 31,
        "word_length": 8,
        "text": "spanning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19375000,
        "duration_milliseconds": 212,
        "text_offset": 40,
        "word_length": 4,
        "text": "tree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21625000,
        "duration_milliseconds": 187,
        "text_offset": 45,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23750000,
        "duration_milliseconds": 225,
        "text_offset": 50,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26250000,
        "duration_milliseconds": 275,
        "text_offset": 56,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29250000,
        "duration_milliseconds": 112,
        "text_offset": 61,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30625000,
        "duration_milliseconds": 362,
        "text_offset": 64,
        "word_length": 5,
        "text": "using",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34500000,
        "duration_milliseconds": 112,
        "text_offset": 70,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35875000,
        "duration_milliseconds": 475,
        "text_offset": 74,
        "word_length": 8,
        "text": "algrithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40875000,
        "duration_milliseconds": 112,
        "text_offset": 83,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 42250000,
        "duration_milliseconds": 375,
        "text_offset": 86,
        "word_length": 4,
        "text": "Prim",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 46250000,
        "duration_milliseconds": 100,
        "text_offset": 90,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "first-we-will-create-a-minimal-spanning-tree-with-a9ca7eef.mp3",
    "final_audio": "first-we-will-create-a-minimal-spanning-tree-with-a9ca7eef.mp3"
  },
  {
    "input_text": "Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom",
    "input_data": {
      "input_text": "Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 200,
        "text_offset": 0,
        "word_length": 4,
        "text": "Then",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2750000,
        "duration_milliseconds": 112,
        "text_offset": 5,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4125000,
        "duration_milliseconds": 250,
        "text_offset": 8,
        "word_length": 6,
        "text": "search",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6875000,
        "duration_milliseconds": 175,
        "text_offset": 15,
        "word_length": 3,
        "text": "for",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 212,
        "text_offset": 19,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11250000,
        "duration_milliseconds": 212,
        "text_offset": 25,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13500000,
        "duration_milliseconds": 62,
        "text_offset": 30,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14375000,
        "duration_milliseconds": 100,
        "text_offset": 33,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15625000,
        "duration_milliseconds": 312,
        "text_offset": 37,
        "word_length": 5,
        "text": "graph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19000000,
        "duration_milliseconds": 137,
        "text_offset": 43,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20625000,
        "duration_milliseconds": 87,
        "text_offset": 48,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21750000,
        "duration_milliseconds": 162,
        "text_offset": 51,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23500000,
        "duration_milliseconds": 362,
        "text_offset": 55,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28125000,
        "duration_milliseconds": 225,
        "text_offset": 61,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 30625000,
        "duration_milliseconds": 287,
        "text_offset": 63,
        "word_length": 7,
        "text": "meaning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33750000,
        "duration_milliseconds": 87,
        "text_offset": 71,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34750000,
        "duration_milliseconds": 200,
        "text_offset": 74,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37000000,
        "duration_milliseconds": 312,
        "text_offset": 78,
        "word_length": 6,
        "text": "number",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40250000,
        "duration_milliseconds": 75,
        "text_offset": 85,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41250000,
        "duration_milliseconds": 300,
        "text_offset": 88,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44500000,
        "duration_milliseconds": 125,
        "text_offset": 94,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 46000000,
        "duration_milliseconds": 362,
        "text_offset": 97,
        "word_length": 5,
        "text": "using",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 49875000,
        "duration_milliseconds": 112,
        "text_offset": 103,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 51250000,
        "duration_milliseconds": 587,
        "text_offset": 107,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 57375000,
        "duration_milliseconds": 112,
        "text_offset": 117,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58625000,
        "duration_milliseconds": 475,
        "text_offset": 120,
        "word_length": 7,
        "text": "Blossom",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "then-we-search-for-every-node-in-the-graph-with-an-cd2fe15a.mp3",
    "final_audio": "then-we-search-for-every-node-in-the-graph-with-an-cd2fe15a.mp3"
  },
  {
    "input_text": "After finding all the nodes with an odd degree we need to find a minimum perfect matching in the subgraph consisting only of the odd degree vertices. A perfect matching means every vertex is paired, and minimal means the sum of the lengths of the edges in the pairing is minimized.",
    "input_data": {
      "input_text": "After finding all the nodes with an odd degree we need to find a minimum perfect matching in the subgraph consisting only of the odd degree vertices. A perfect matching means every vertex is paired, and minimal means the sum of the lengths of the edges in the pairing is minimized.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">After finding all the nodes with an odd degree we need to find a minimum perfect matching in the subgraph consisting only of the odd degree vertices. A perfect matching means every vertex is paired, and minimal means the sum of the lengths of the edges in the pairing is minimized.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">After finding all the nodes with an odd degree we need to find a minimum perfect matching in the subgraph consisting only of the odd degree vertices. A perfect matching means every vertex is paired, and minimal means the sum of the lengths of the edges in the pairing is minimized.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 312,
        "text_offset": 0,
        "word_length": 5,
        "text": "After",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3875000,
        "duration_milliseconds": 350,
        "text_offset": 6,
        "word_length": 7,
        "text": "finding",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7625000,
        "duration_milliseconds": 112,
        "text_offset": 14,
        "word_length": 3,
        "text": "all",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 100,
        "text_offset": 18,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10125000,
        "duration_milliseconds": 275,
        "text_offset": 22,
        "word_length": 5,
        "text": "nodes",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13000000,
        "duration_milliseconds": 112,
        "text_offset": 28,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14375000,
        "duration_milliseconds": 100,
        "text_offset": 33,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15625000,
        "duration_milliseconds": 162,
        "text_offset": 36,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17500000,
        "duration_milliseconds": 312,
        "text_offset": 40,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20750000,
        "duration_milliseconds": 125,
        "text_offset": 47,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22250000,
        "duration_milliseconds": 150,
        "text_offset": 50,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23875000,
        "duration_milliseconds": 75,
        "text_offset": 55,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24875000,
        "duration_milliseconds": 237,
        "text_offset": 58,
        "word_length": 4,
        "text": "find",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27500000,
        "duration_milliseconds": 50,
        "text_offset": 63,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28125000,
        "duration_milliseconds": 412,
        "text_offset": 65,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32500000,
        "duration_milliseconds": 425,
        "text_offset": 73,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37000000,
        "duration_milliseconds": 375,
        "text_offset": 81,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40875000,
        "duration_milliseconds": 62,
        "text_offset": 90,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41625000,
        "duration_milliseconds": 100,
        "text_offset": 93,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 42875000,
        "duration_milliseconds": 525,
        "text_offset": 97,
        "word_length": 8,
        "text": "subgraph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 48375000,
        "duration_milliseconds": 550,
        "text_offset": 106,
        "word_length": 10,
        "text": "consisting",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 54125000,
        "duration_milliseconds": 237,
        "text_offset": 117,
        "word_length": 4,
        "text": "only",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 56750000,
        "duration_milliseconds": 62,
        "text_offset": 122,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 57625000,
        "duration_milliseconds": 100,
        "text_offset": 125,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58875000,
        "duration_milliseconds": 175,
        "text_offset": 129,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60750000,
        "duration_milliseconds": 275,
        "text_offset": 133,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 63750000,
        "duration_milliseconds": 637,
        "text_offset": 140,
        "word_length": 8,
        "text": "vertices",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 70375000,
        "duration_milliseconds": 100,
        "text_offset": 148,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 79000000,
        "duration_milliseconds": 137,
        "text_offset": 150,
        "word_length": 1,
        "text": "A",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 80500000,
        "duration_milliseconds": 412,
        "text_offset": 152,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 84875000,
        "duration_milliseconds": 375,
        "text_offset": 160,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 88875000,
        "duration_milliseconds": 300,
        "text_offset": 169,
        "word_length": 5,
        "text": "means",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 92000000,
        "duration_milliseconds": 212,
        "text_offset": 175,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 94250000,
        "duration_milliseconds": 437,
        "text_offset": 181,
        "word_length": 6,
        "text": "vertex",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 98750000,
        "duration_milliseconds": 112,
        "text_offset": 188,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 100125000,
        "duration_milliseconds": 350,
        "text_offset": 191,
        "word_length": 6,
        "text": "paired",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 104625000,
        "duration_milliseconds": 175,
        "text_offset": 197,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 106375000,
        "duration_milliseconds": 137,
        "text_offset": 199,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 108000000,
        "duration_milliseconds": 350,
        "text_offset": 203,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 111750000,
        "duration_milliseconds": 250,
        "text_offset": 211,
        "word_length": 5,
        "text": "means",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 114500000,
        "duration_milliseconds": 112,
        "text_offset": 217,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 115875000,
        "duration_milliseconds": 212,
        "text_offset": 221,
        "word_length": 3,
        "text": "sum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 118125000,
        "duration_milliseconds": 75,
        "text_offset": 225,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 119125000,
        "duration_milliseconds": 100,
        "text_offset": 228,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 120375000,
        "duration_milliseconds": 312,
        "text_offset": 232,
        "word_length": 7,
        "text": "lengths",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 123750000,
        "duration_milliseconds": 87,
        "text_offset": 240,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 124875000,
        "duration_milliseconds": 87,
        "text_offset": 243,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 126000000,
        "duration_milliseconds": 337,
        "text_offset": 247,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 129625000,
        "duration_milliseconds": 62,
        "text_offset": 253,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 130375000,
        "duration_milliseconds": 100,
        "text_offset": 256,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 131625000,
        "duration_milliseconds": 362,
        "text_offset": 260,
        "word_length": 7,
        "text": "pairing",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 135375000,
        "duration_milliseconds": 125,
        "text_offset": 268,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 136750000,
        "duration_milliseconds": 662,
        "text_offset": 271,
        "word_length": 9,
        "text": "minimized",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 143625000,
        "duration_milliseconds": 100,
        "text_offset": 280,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "after-finding-all-the-nodes-with-an-odd-degree-we-0f720219.mp3",
    "final_audio": "after-finding-all-the-nodes-with-an-odd-degree-we-0f720219.mp3"
  },
  {
    "input_text": "Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.",
    "input_data": {
      "input_text": "Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 200,
        "text_offset": 0,
        "word_length": 4,
        "text": "Then",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2750000,
        "duration_milliseconds": 100,
        "text_offset": 5,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4000000,
        "duration_milliseconds": 150,
        "text_offset": 8,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5625000,
        "duration_milliseconds": 100,
        "text_offset": 13,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6875000,
        "duration_milliseconds": 400,
        "text_offset": 16,
        "word_length": 7,
        "text": "combine",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11125000,
        "duration_milliseconds": 87,
        "text_offset": 24,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12250000,
        "duration_milliseconds": 362,
        "text_offset": 28,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16125000,
        "duration_milliseconds": 387,
        "text_offset": 36,
        "word_length": 8,
        "text": "spanning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20250000,
        "duration_milliseconds": 212,
        "text_offset": 45,
        "word_length": 4,
        "text": "tree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22625000,
        "duration_milliseconds": 137,
        "text_offset": 50,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24250000,
        "duration_milliseconds": 112,
        "text_offset": 55,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 25625000,
        "duration_milliseconds": 425,
        "text_offset": 59,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30000000,
        "duration_milliseconds": 362,
        "text_offset": 67,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33875000,
        "duration_milliseconds": 125,
        "text_offset": 76,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35375000,
        "duration_milliseconds": 300,
        "text_offset": 79,
        "word_length": 6,
        "text": "obtain",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 38625000,
        "duration_milliseconds": 62,
        "text_offset": 86,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39500000,
        "duration_milliseconds": 612,
        "text_offset": 88,
        "word_length": 10,
        "text": "multigraph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 45875000,
        "duration_milliseconds": 100,
        "text_offset": 99,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 47125000,
        "duration_milliseconds": 187,
        "text_offset": 102,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 49250000,
        "duration_milliseconds": 212,
        "text_offset": 108,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 51625000,
        "duration_milliseconds": 487,
        "text_offset": 114,
        "word_length": 6,
        "text": "vertex",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 56750000,
        "duration_milliseconds": 175,
        "text_offset": 121,
        "word_length": 3,
        "text": "has",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58750000,
        "duration_milliseconds": 100,
        "text_offset": 125,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60000000,
        "duration_milliseconds": 175,
        "text_offset": 128,
        "word_length": 4,
        "text": "even",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 61875000,
        "duration_milliseconds": 475,
        "text_offset": 133,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 66875000,
        "duration_milliseconds": 100,
        "text_offset": 139,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "then-we-need-to-combine-the-minimum-spanning-tree-ad2051d8.mp3",
    "final_audio": "then-we-need-to-combine-the-minimum-spanning-tree-ad2051d8.mp3"
  },
  {
    "input_text": "Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.",
    "input_data": {
      "input_text": "Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 325,
        "text_offset": 0,
        "word_length": 5,
        "text": "Since",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4000000,
        "duration_milliseconds": 237,
        "text_offset": 6,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6625000,
        "duration_milliseconds": 475,
        "text_offset": 12,
        "word_length": 6,
        "text": "vertex",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11625000,
        "duration_milliseconds": 175,
        "text_offset": 19,
        "word_length": 3,
        "text": "has",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13625000,
        "duration_milliseconds": 100,
        "text_offset": 23,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14875000,
        "duration_milliseconds": 187,
        "text_offset": 26,
        "word_length": 4,
        "text": "even",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17000000,
        "duration_milliseconds": 400,
        "text_offset": 31,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21875000,
        "duration_milliseconds": 112,
        "text_offset": 37,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 23000000,
        "duration_milliseconds": 162,
        "text_offset": 39,
        "word_length": 5,
        "text": "there",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24750000,
        "duration_milliseconds": 425,
        "text_offset": 45,
        "word_length": 6,
        "text": "exists",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29250000,
        "duration_milliseconds": 112,
        "text_offset": 52,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30625000,
        "duration_milliseconds": 550,
        "text_offset": 55,
        "word_length": 8,
        "text": "Eulerian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36375000,
        "duration_milliseconds": 375,
        "text_offset": 64,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40375000,
        "duration_milliseconds": 87,
        "text_offset": 72,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41500000,
        "duration_milliseconds": 175,
        "text_offset": 75,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 43375000,
        "duration_milliseconds": 575,
        "text_offset": 80,
        "word_length": 5,
        "text": "graph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 49375000,
        "duration_milliseconds": 100,
        "text_offset": 85,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 58000000,
        "duration_milliseconds": 175,
        "text_offset": 87,
        "word_length": 2,
        "text": "An",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60000000,
        "duration_milliseconds": 512,
        "text_offset": 90,
        "word_length": 8,
        "text": "Eulerian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 65375000,
        "duration_milliseconds": 375,
        "text_offset": 99,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 69250000,
        "duration_milliseconds": 125,
        "text_offset": 107,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 70750000,
        "duration_milliseconds": 62,
        "text_offset": 110,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 71625000,
        "duration_milliseconds": 312,
        "text_offset": 112,
        "word_length": 4,
        "text": "path",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 75000000,
        "duration_milliseconds": 150,
        "text_offset": 117,
        "word_length": 4,
        "text": "that",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76750000,
        "duration_milliseconds": 350,
        "text_offset": 122,
        "word_length": 6,
        "text": "visits",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 80500000,
        "duration_milliseconds": 212,
        "text_offset": 129,
        "word_length": 4,
        "text": "each",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 82875000,
        "duration_milliseconds": 150,
        "text_offset": 134,
        "word_length": 4,
        "text": "edge",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 84625000,
        "duration_milliseconds": 487,
        "text_offset": 139,
        "word_length": 7,
        "text": "exactly",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 89750000,
        "duration_milliseconds": 475,
        "text_offset": 147,
        "word_length": 4,
        "text": "once",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 94750000,
        "duration_milliseconds": 100,
        "text_offset": 151,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 103375000,
        "duration_milliseconds": 212,
        "text_offset": 153,
        "word_length": 2,
        "text": "We",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 105750000,
        "duration_milliseconds": 212,
        "text_offset": 156,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 108000000,
        "duration_milliseconds": 100,
        "text_offset": 161,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 109250000,
        "duration_milliseconds": 337,
        "text_offset": 164,
        "word_length": 4,
        "text": "find",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 112750000,
        "duration_milliseconds": 187,
        "text_offset": 169,
        "word_length": 2,
        "text": "it",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 114750000,
        "duration_milliseconds": 100,
        "text_offset": 171,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "since-every-vertex-has-an-even-degree-there-exists-20bb5a60.mp3",
    "final_audio": "since-every-vertex-has-an-even-degree-there-exists-20bb5a60.mp3"
  },
  {
    "input_text": "Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.",
    "input_data": {
      "input_text": "Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 237,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3125000,
        "duration_milliseconds": 125,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4625000,
        "duration_milliseconds": 375,
        "text_offset": 7,
        "word_length": 7,
        "text": "convert",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8625000,
        "duration_milliseconds": 75,
        "text_offset": 15,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9625000,
        "duration_milliseconds": 512,
        "text_offset": 19,
        "word_length": 8,
        "text": "Eulerian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15000000,
        "duration_milliseconds": 375,
        "text_offset": 28,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19000000,
        "duration_milliseconds": 125,
        "text_offset": 36,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20500000,
        "duration_milliseconds": 50,
        "text_offset": 39,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21250000,
        "duration_milliseconds": 712,
        "text_offset": 41,
        "word_length": 11,
        "text": "Hamiltonian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28625000,
        "duration_milliseconds": 387,
        "text_offset": 53,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32750000,
        "duration_milliseconds": 150,
        "text_offset": 61,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34500000,
        "duration_milliseconds": 462,
        "text_offset": 64,
        "word_length": 8,
        "text": "skipping",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39250000,
        "duration_milliseconds": 437,
        "text_offset": 73,
        "word_length": 8,
        "text": "repeated",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 43750000,
        "duration_milliseconds": 650,
        "text_offset": 82,
        "word_length": 8,
        "text": "vertices",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 50500000,
        "duration_milliseconds": 100,
        "text_offset": 90,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "now-we-convert-the-eulerian-circuit-to-a-5c9d1a2f.mp3",
    "final_audio": "now-we-convert-the-eulerian-circuit-to-a-5c9d1a2f.mp3"
  },
  {
    "input_text": "Let's take a look at the graph to visualize this algorithm.",
    "input_data": {
      "input_text": "Let's take a look at the graph to visualize this algorithm.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Let's take a look at the graph to visualize this algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Let's take a look at the graph to visualize this algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 300,
        "text_offset": 0,
        "word_length": 5,
        "text": "Let's",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3625000,
        "duration_milliseconds": 187,
        "text_offset": 6,
        "word_length": 4,
        "text": "take",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5750000,
        "duration_milliseconds": 62,
        "text_offset": 11,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6625000,
        "duration_milliseconds": 225,
        "text_offset": 13,
        "word_length": 4,
        "text": "look",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9125000,
        "duration_milliseconds": 75,
        "text_offset": 18,
        "word_length": 2,
        "text": "at",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10125000,
        "duration_milliseconds": 112,
        "text_offset": 21,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11500000,
        "duration_milliseconds": 325,
        "text_offset": 25,
        "word_length": 5,
        "text": "graph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15000000,
        "duration_milliseconds": 100,
        "text_offset": 31,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16250000,
        "duration_milliseconds": 600,
        "text_offset": 34,
        "word_length": 9,
        "text": "visualize",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22500000,
        "duration_milliseconds": 187,
        "text_offset": 44,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24625000,
        "duration_milliseconds": 625,
        "text_offset": 49,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 31125000,
        "duration_milliseconds": 100,
        "text_offset": 58,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "let-s-take-a-look-at-the-graph-to-visualize-this-c57f7870.mp3",
    "final_audio": "let-s-take-a-look-at-the-graph-to-visualize-this-c57f7870.mp3"
  },
  {
    "input_text": "In the following we will explain the christofides algorithm.",
    "input_data": {
      "input_text": "In the following we will explain the christofides algorithm.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">In the following we will explain the christofides algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">In the following we will explain the christofides algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 175,
        "text_offset": 0,
        "word_length": 2,
        "text": "In",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2375000,
        "duration_milliseconds": 100,
        "text_offset": 3,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3625000,
        "duration_milliseconds": 450,
        "text_offset": 7,
        "word_length": 9,
        "text": "following",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8375000,
        "duration_milliseconds": 125,
        "text_offset": 17,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9875000,
        "duration_milliseconds": 137,
        "text_offset": 20,
        "word_length": 4,
        "text": "will",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11500000,
        "duration_milliseconds": 412,
        "text_offset": 25,
        "word_length": 7,
        "text": "explain",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15875000,
        "duration_milliseconds": 112,
        "text_offset": 33,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17250000,
        "duration_milliseconds": 875,
        "text_offset": 37,
        "word_length": 12,
        "text": "christofides",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26250000,
        "duration_milliseconds": 650,
        "text_offset": 50,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32875000,
        "duration_milliseconds": 100,
        "text_offset": 59,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "in-the-following-we-will-explain-the-christofides-94a11300.mp3",
    "final_audio": "in-the-following-we-will-explain-the-christofides-94a11300.mp3"
  },
  {
    "input_text": "First we will create a minimal spanning tree with every node by using the algrithm of Prim.",
    "input_data": {
      "input_text": "First we will create a minimal spanning tree with every node by using the algrithm of Prim.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">First we will create a minimal spanning tree with every node by using the algrithm of Prim.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">First we will create a minimal spanning tree with every node by using the algrithm of Prim.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 375,
        "text_offset": 0,
        "word_length": 5,
        "text": "First",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4500000,
        "duration_milliseconds": 112,
        "text_offset": 6,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5750000,
        "duration_milliseconds": 137,
        "text_offset": 9,
        "word_length": 4,
        "text": "will",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7375000,
        "duration_milliseconds": 312,
        "text_offset": 14,
        "word_length": 6,
        "text": "create",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10750000,
        "duration_milliseconds": 50,
        "text_offset": 21,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11375000,
        "duration_milliseconds": 375,
        "text_offset": 23,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15375000,
        "duration_milliseconds": 387,
        "text_offset": 31,
        "word_length": 8,
        "text": "spanning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19375000,
        "duration_milliseconds": 212,
        "text_offset": 40,
        "word_length": 4,
        "text": "tree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21625000,
        "duration_milliseconds": 187,
        "text_offset": 45,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23750000,
        "duration_milliseconds": 225,
        "text_offset": 50,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26250000,
        "duration_milliseconds": 275,
        "text_offset": 56,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29250000,
        "duration_milliseconds": 112,
        "text_offset": 61,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30625000,
        "duration_milliseconds": 362,
        "text_offset": 64,
        "word_length": 5,
        "text": "using",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34500000,
        "duration_milliseconds": 112,
        "text_offset": 70,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35875000,
        "duration_milliseconds": 475,
        "text_offset": 74,
        "word_length": 8,
        "text": "algrithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40875000,
        "duration_milliseconds": 112,
        "text_offset": 83,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 42250000,
        "duration_milliseconds": 375,
        "text_offset": 86,
        "word_length": 4,
        "text": "Prim",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 46250000,
        "duration_milliseconds": 100,
        "text_offset": 90,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "first-we-will-create-a-minimal-spanning-tree-with-a9ca7eef.mp3",
    "final_audio": "first-we-will-create-a-minimal-spanning-tree-with-a9ca7eef.mp3"
  },
  {
    "input_text": "Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom",
    "input_data": {
      "input_text": "Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 200,
        "text_offset": 0,
        "word_length": 4,
        "text": "Then",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2750000,
        "duration_milliseconds": 112,
        "text_offset": 5,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4125000,
        "duration_milliseconds": 250,
        "text_offset": 8,
        "word_length": 6,
        "text": "search",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6875000,
        "duration_milliseconds": 175,
        "text_offset": 15,
        "word_length": 3,
        "text": "for",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 212,
        "text_offset": 19,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11250000,
        "duration_milliseconds": 212,
        "text_offset": 25,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13500000,
        "duration_milliseconds": 62,
        "text_offset": 30,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14375000,
        "duration_milliseconds": 100,
        "text_offset": 33,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15625000,
        "duration_milliseconds": 312,
        "text_offset": 37,
        "word_length": 5,
        "text": "graph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19000000,
        "duration_milliseconds": 137,
        "text_offset": 43,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20625000,
        "duration_milliseconds": 87,
        "text_offset": 48,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21750000,
        "duration_milliseconds": 162,
        "text_offset": 51,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23500000,
        "duration_milliseconds": 362,
        "text_offset": 55,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28125000,
        "duration_milliseconds": 225,
        "text_offset": 61,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 30625000,
        "duration_milliseconds": 287,
        "text_offset": 63,
        "word_length": 7,
        "text": "meaning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33750000,
        "duration_milliseconds": 87,
        "text_offset": 71,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34750000,
        "duration_milliseconds": 200,
        "text_offset": 74,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37000000,
        "duration_milliseconds": 312,
        "text_offset": 78,
        "word_length": 6,
        "text": "number",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40250000,
        "duration_milliseconds": 75,
        "text_offset": 85,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41250000,
        "duration_milliseconds": 300,
        "text_offset": 88,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44500000,
        "duration_milliseconds": 125,
        "text_offset": 94,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 46000000,
        "duration_milliseconds": 362,
        "text_offset": 97,
        "word_length": 5,
        "text": "using",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 49875000,
        "duration_milliseconds": 112,
        "text_offset": 103,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 51250000,
        "duration_milliseconds": 587,
        "text_offset": 107,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 57375000,
        "duration_milliseconds": 112,
        "text_offset": 117,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58625000,
        "duration_milliseconds": 475,
        "text_offset": 120,
        "word_length": 7,
        "text": "Blossom",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "then-we-search-for-every-node-in-the-graph-with-an-cd2fe15a.mp3",
    "final_audio": "then-we-search-for-every-node-in-the-graph-with-an-cd2fe15a.mp3"
  },
  {
    "input_text": "After finding all the nodes with an odd degree we need to find a minimum perfect matching in the subgraph consisting only of the odd degree vertices. A perfect matching means every vertex is paired, and minimal means the sum of the lengths of the edges in the pairing is minimized.",
    "input_data": {
      "input_text": "After finding all the nodes with an odd degree we need to find a minimum perfect matching in the subgraph consisting only of the odd degree vertices. A perfect matching means every vertex is paired, and minimal means the sum of the lengths of the edges in the pairing is minimized.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">After finding all the nodes with an odd degree we need to find a minimum perfect matching in the subgraph consisting only of the odd degree vertices. A perfect matching means every vertex is paired, and minimal means the sum of the lengths of the edges in the pairing is minimized.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">After finding all the nodes with an odd degree we need to find a minimum perfect matching in the subgraph consisting only of the odd degree vertices. A perfect matching means every vertex is paired, and minimal means the sum of the lengths of the edges in the pairing is minimized.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 312,
        "text_offset": 0,
        "word_length": 5,
        "text": "After",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3875000,
        "duration_milliseconds": 350,
        "text_offset": 6,
        "word_length": 7,
        "text": "finding",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7625000,
        "duration_milliseconds": 112,
        "text_offset": 14,
        "word_length": 3,
        "text": "all",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 100,
        "text_offset": 18,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10125000,
        "duration_milliseconds": 275,
        "text_offset": 22,
        "word_length": 5,
        "text": "nodes",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13000000,
        "duration_milliseconds": 112,
        "text_offset": 28,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14375000,
        "duration_milliseconds": 100,
        "text_offset": 33,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15625000,
        "duration_milliseconds": 162,
        "text_offset": 36,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17500000,
        "duration_milliseconds": 312,
        "text_offset": 40,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20750000,
        "duration_milliseconds": 125,
        "text_offset": 47,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22250000,
        "duration_milliseconds": 150,
        "text_offset": 50,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23875000,
        "duration_milliseconds": 75,
        "text_offset": 55,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24875000,
        "duration_milliseconds": 237,
        "text_offset": 58,
        "word_length": 4,
        "text": "find",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27500000,
        "duration_milliseconds": 50,
        "text_offset": 63,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28125000,
        "duration_milliseconds": 412,
        "text_offset": 65,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32500000,
        "duration_milliseconds": 425,
        "text_offset": 73,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37000000,
        "duration_milliseconds": 375,
        "text_offset": 81,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40875000,
        "duration_milliseconds": 62,
        "text_offset": 90,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41625000,
        "duration_milliseconds": 100,
        "text_offset": 93,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 42875000,
        "duration_milliseconds": 525,
        "text_offset": 97,
        "word_length": 8,
        "text": "subgraph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 48375000,
        "duration_milliseconds": 550,
        "text_offset": 106,
        "word_length": 10,
        "text": "consisting",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 54125000,
        "duration_milliseconds": 237,
        "text_offset": 117,
        "word_length": 4,
        "text": "only",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 56750000,
        "duration_milliseconds": 62,
        "text_offset": 122,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 57625000,
        "duration_milliseconds": 100,
        "text_offset": 125,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58875000,
        "duration_milliseconds": 175,
        "text_offset": 129,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60750000,
        "duration_milliseconds": 275,
        "text_offset": 133,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 63750000,
        "duration_milliseconds": 637,
        "text_offset": 140,
        "word_length": 8,
        "text": "vertices",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 70375000,
        "duration_milliseconds": 100,
        "text_offset": 148,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 79000000,
        "duration_milliseconds": 137,
        "text_offset": 150,
        "word_length": 1,
        "text": "A",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 80500000,
        "duration_milliseconds": 412,
        "text_offset": 152,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 84875000,
        "duration_milliseconds": 375,
        "text_offset": 160,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 88875000,
        "duration_milliseconds": 300,
        "text_offset": 169,
        "word_length": 5,
        "text": "means",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 92000000,
        "duration_milliseconds": 212,
        "text_offset": 175,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 94250000,
        "duration_milliseconds": 437,
        "text_offset": 181,
        "word_length": 6,
        "text": "vertex",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 98750000,
        "duration_milliseconds": 112,
        "text_offset": 188,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 100125000,
        "duration_milliseconds": 350,
        "text_offset": 191,
        "word_length": 6,
        "text": "paired",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 104625000,
        "duration_milliseconds": 175,
        "text_offset": 197,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 106375000,
        "duration_milliseconds": 137,
        "text_offset": 199,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 108000000,
        "duration_milliseconds": 350,
        "text_offset": 203,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 111750000,
        "duration_milliseconds": 250,
        "text_offset": 211,
        "word_length": 5,
        "text": "means",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 114500000,
        "duration_milliseconds": 112,
        "text_offset": 217,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 115875000,
        "duration_milliseconds": 212,
        "text_offset": 221,
        "word_length": 3,
        "text": "sum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 118125000,
        "duration_milliseconds": 75,
        "text_offset": 225,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 119125000,
        "duration_milliseconds": 100,
        "text_offset": 228,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 120375000,
        "duration_milliseconds": 312,
        "text_offset": 232,
        "word_length": 7,
        "text": "lengths",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 123750000,
        "duration_milliseconds": 87,
        "text_offset": 240,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 124875000,
        "duration_milliseconds": 87,
        "text_offset": 243,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 126000000,
        "duration_milliseconds": 337,
        "text_offset": 247,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 129625000,
        "duration_milliseconds": 62,
        "text_offset": 253,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 130375000,
        "duration_milliseconds": 100,
        "text_offset": 256,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 131625000,
        "duration_milliseconds": 362,
        "text_offset": 260,
        "word_length": 7,
        "text": "pairing",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 135375000,
        "duration_milliseconds": 125,
        "text_offset": 268,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 136750000,
        "duration_milliseconds": 662,
        "text_offset": 271,
        "word_length": 9,
        "text": "minimized",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 143625000,
        "duration_milliseconds": 100,
        "text_offset": 280,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "after-finding-all-the-nodes-with-an-odd-degree-we-0f720219.mp3",
    "final_audio": "after-finding-all-the-nodes-with-an-odd-degree-we-0f720219.mp3"
  },
  {
    "input_text": "Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.",
    "input_data": {
      "input_text": "Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 200,
        "text_offset": 0,
        "word_length": 4,
        "text": "Then",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2750000,
        "duration_milliseconds": 100,
        "text_offset": 5,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4000000,
        "duration_milliseconds": 150,
        "text_offset": 8,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5625000,
        "duration_milliseconds": 100,
        "text_offset": 13,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6875000,
        "duration_milliseconds": 400,
        "text_offset": 16,
        "word_length": 7,
        "text": "combine",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11125000,
        "duration_milliseconds": 87,
        "text_offset": 24,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12250000,
        "duration_milliseconds": 362,
        "text_offset": 28,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16125000,
        "duration_milliseconds": 387,
        "text_offset": 36,
        "word_length": 8,
        "text": "spanning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20250000,
        "duration_milliseconds": 212,
        "text_offset": 45,
        "word_length": 4,
        "text": "tree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22625000,
        "duration_milliseconds": 137,
        "text_offset": 50,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24250000,
        "duration_milliseconds": 112,
        "text_offset": 55,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 25625000,
        "duration_milliseconds": 425,
        "text_offset": 59,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30000000,
        "duration_milliseconds": 362,
        "text_offset": 67,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33875000,
        "duration_milliseconds": 125,
        "text_offset": 76,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35375000,
        "duration_milliseconds": 300,
        "text_offset": 79,
        "word_length": 6,
        "text": "obtain",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 38625000,
        "duration_milliseconds": 62,
        "text_offset": 86,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39500000,
        "duration_milliseconds": 612,
        "text_offset": 88,
        "word_length": 10,
        "text": "multigraph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 45875000,
        "duration_milliseconds": 100,
        "text_offset": 99,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 47125000,
        "duration_milliseconds": 187,
        "text_offset": 102,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 49250000,
        "duration_milliseconds": 212,
        "text_offset": 108,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 51625000,
        "duration_milliseconds": 487,
        "text_offset": 114,
        "word_length": 6,
        "text": "vertex",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 56750000,
        "duration_milliseconds": 175,
        "text_offset": 121,
        "word_length": 3,
        "text": "has",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58750000,
        "duration_milliseconds": 100,
        "text_offset": 125,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60000000,
        "duration_milliseconds": 175,
        "text_offset": 128,
        "word_length": 4,
        "text": "even",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 61875000,
        "duration_milliseconds": 475,
        "text_offset": 133,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 66875000,
        "duration_milliseconds": 100,
        "text_offset": 139,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "then-we-need-to-combine-the-minimum-spanning-tree-ad2051d8.mp3",
    "final_audio": "then-we-need-to-combine-the-minimum-spanning-tree-ad2051d8.mp3"
  },
  {
    "input_text": "Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.",
    "input_data": {
      "input_text": "Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 325,
        "text_offset": 0,
        "word_length": 5,
        "text": "Since",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4000000,
        "duration_milliseconds": 237,
        "text_offset": 6,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6625000,
        "duration_milliseconds": 475,
        "text_offset": 12,
        "word_length": 6,
        "text": "vertex",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11625000,
        "duration_milliseconds": 175,
        "text_offset": 19,
        "word_length": 3,
        "text": "has",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13625000,
        "duration_milliseconds": 100,
        "text_offset": 23,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14875000,
        "duration_milliseconds": 187,
        "text_offset": 26,
        "word_length": 4,
        "text": "even",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17000000,
        "duration_milliseconds": 400,
        "text_offset": 31,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21875000,
        "duration_milliseconds": 112,
        "text_offset": 37,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 23000000,
        "duration_milliseconds": 162,
        "text_offset": 39,
        "word_length": 5,
        "text": "there",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24750000,
        "duration_milliseconds": 425,
        "text_offset": 45,
        "word_length": 6,
        "text": "exists",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29250000,
        "duration_milliseconds": 112,
        "text_offset": 52,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30625000,
        "duration_milliseconds": 550,
        "text_offset": 55,
        "word_length": 8,
        "text": "Eulerian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36375000,
        "duration_milliseconds": 375,
        "text_offset": 64,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40375000,
        "duration_milliseconds": 87,
        "text_offset": 72,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41500000,
        "duration_milliseconds": 175,
        "text_offset": 75,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 43375000,
        "duration_milliseconds": 575,
        "text_offset": 80,
        "word_length": 5,
        "text": "graph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 49375000,
        "duration_milliseconds": 100,
        "text_offset": 85,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 58000000,
        "duration_milliseconds": 175,
        "text_offset": 87,
        "word_length": 2,
        "text": "An",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60000000,
        "duration_milliseconds": 512,
        "text_offset": 90,
        "word_length": 8,
        "text": "Eulerian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 65375000,
        "duration_milliseconds": 375,
        "text_offset": 99,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 69250000,
        "duration_milliseconds": 125,
        "text_offset": 107,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 70750000,
        "duration_milliseconds": 62,
        "text_offset": 110,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 71625000,
        "duration_milliseconds": 312,
        "text_offset": 112,
        "word_length": 4,
        "text": "path",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 75000000,
        "duration_milliseconds": 150,
        "text_offset": 117,
        "word_length": 4,
        "text": "that",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76750000,
        "duration_milliseconds": 350,
        "text_offset": 122,
        "word_length": 6,
        "text": "visits",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 80500000,
        "duration_milliseconds": 212,
        "text_offset": 129,
        "word_length": 4,
        "text": "each",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 82875000,
        "duration_milliseconds": 150,
        "text_offset": 134,
        "word_length": 4,
        "text": "edge",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 84625000,
        "duration_milliseconds": 487,
        "text_offset": 139,
        "word_length": 7,
        "text": "exactly",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 89750000,
        "duration_milliseconds": 475,
        "text_offset": 147,
        "word_length": 4,
        "text": "once",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 94750000,
        "duration_milliseconds": 100,
        "text_offset": 151,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 103375000,
        "duration_milliseconds": 212,
        "text_offset": 153,
        "word_length": 2,
        "text": "We",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 105750000,
        "duration_milliseconds": 212,
        "text_offset": 156,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 108000000,
        "duration_milliseconds": 100,
        "text_offset": 161,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 109250000,
        "duration_milliseconds": 337,
        "text_offset": 164,
        "word_length": 4,
        "text": "find",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 112750000,
        "duration_milliseconds": 187,
        "text_offset": 169,
        "word_length": 2,
        "text": "it",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 114750000,
        "duration_milliseconds": 100,
        "text_offset": 171,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "since-every-vertex-has-an-even-degree-there-exists-20bb5a60.mp3",
    "final_audio": "since-every-vertex-has-an-even-degree-there-exists-20bb5a60.mp3"
  },
  {
    "input_text": "Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.",
    "input_data": {
      "input_text": "Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 237,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3125000,
        "duration_milliseconds": 125,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4625000,
        "duration_milliseconds": 375,
        "text_offset": 7,
        "word_length": 7,
        "text": "convert",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8625000,
        "duration_milliseconds": 75,
        "text_offset": 15,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9625000,
        "duration_milliseconds": 512,
        "text_offset": 19,
        "word_length": 8,
        "text": "Eulerian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15000000,
        "duration_milliseconds": 375,
        "text_offset": 28,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19000000,
        "duration_milliseconds": 125,
        "text_offset": 36,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20500000,
        "duration_milliseconds": 50,
        "text_offset": 39,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21250000,
        "duration_milliseconds": 712,
        "text_offset": 41,
        "word_length": 11,
        "text": "Hamiltonian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28625000,
        "duration_milliseconds": 387,
        "text_offset": 53,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32750000,
        "duration_milliseconds": 150,
        "text_offset": 61,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34500000,
        "duration_milliseconds": 462,
        "text_offset": 64,
        "word_length": 8,
        "text": "skipping",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39250000,
        "duration_milliseconds": 437,
        "text_offset": 73,
        "word_length": 8,
        "text": "repeated",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 43750000,
        "duration_milliseconds": 650,
        "text_offset": 82,
        "word_length": 8,
        "text": "vertices",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 50500000,
        "duration_milliseconds": 100,
        "text_offset": 90,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "now-we-convert-the-eulerian-circuit-to-a-5c9d1a2f.mp3",
    "final_audio": "now-we-convert-the-eulerian-circuit-to-a-5c9d1a2f.mp3"
  },
  {
    "input_text": "Let's take a look at the graph to visualize this algorithm.",
    "input_data": {
      "input_text": "Let's take a look at the graph to visualize this algorithm.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Let's take a look at the graph to visualize this algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Let's take a look at the graph to visualize this algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 300,
        "text_offset": 0,
        "word_length": 5,
        "text": "Let's",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3625000,
        "duration_milliseconds": 187,
        "text_offset": 6,
        "word_length": 4,
        "text": "take",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5750000,
        "duration_milliseconds": 62,
        "text_offset": 11,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6625000,
        "duration_milliseconds": 225,
        "text_offset": 13,
        "word_length": 4,
        "text": "look",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9125000,
        "duration_milliseconds": 75,
        "text_offset": 18,
        "word_length": 2,
        "text": "at",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10125000,
        "duration_milliseconds": 112,
        "text_offset": 21,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11500000,
        "duration_milliseconds": 325,
        "text_offset": 25,
        "word_length": 5,
        "text": "graph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15000000,
        "duration_milliseconds": 100,
        "text_offset": 31,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16250000,
        "duration_milliseconds": 600,
        "text_offset": 34,
        "word_length": 9,
        "text": "visualize",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22500000,
        "duration_milliseconds": 187,
        "text_offset": 44,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24625000,
        "duration_milliseconds": 625,
        "text_offset": 49,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 31125000,
        "duration_milliseconds": 100,
        "text_offset": 58,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "let-s-take-a-look-at-the-graph-to-visualize-this-c57f7870.mp3",
    "final_audio": "let-s-take-a-look-at-the-graph-to-visualize-this-c57f7870.mp3"
  },
  {
    "input_text": "Like explained before we create a minimal spanning tree.",
    "input_data": {
      "input_text": "Like explained before we create a minimal spanning tree.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Like explained before we create a minimal spanning tree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Like explained before we create a minimal spanning tree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 225,
        "text_offset": 0,
        "word_length": 4,
        "text": "Like",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3000000,
        "duration_milliseconds": 500,
        "text_offset": 5,
        "word_length": 9,
        "text": "explained",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8250000,
        "duration_milliseconds": 337,
        "text_offset": 15,
        "word_length": 6,
        "text": "before",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11750000,
        "duration_milliseconds": 125,
        "text_offset": 22,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13250000,
        "duration_milliseconds": 337,
        "text_offset": 25,
        "word_length": 6,
        "text": "create",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16875000,
        "duration_milliseconds": 50,
        "text_offset": 32,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17500000,
        "duration_milliseconds": 375,
        "text_offset": 34,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21500000,
        "duration_milliseconds": 400,
        "text_offset": 42,
        "word_length": 8,
        "text": "spanning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 25750000,
        "duration_milliseconds": 350,
        "text_offset": 51,
        "word_length": 4,
        "text": "tree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29500000,
        "duration_milliseconds": 100,
        "text_offset": 55,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "like-explained-before-we-create-a-minimal-spanning-44a9aef2.mp3",
    "final_audio": "like-explained-before-we-create-a-minimal-spanning-44a9aef2.mp3"
  },
  {
    "input_text": "Now we point out every node with an odd degree",
    "input_data": {
      "input_text": "Now we point out every node with an odd degree",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we point out every node with an odd degree</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we point out every node with an odd degree</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 250,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3250000,
        "duration_milliseconds": 125,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4625000,
        "duration_milliseconds": 262,
        "text_offset": 7,
        "word_length": 5,
        "text": "point",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7500000,
        "duration_milliseconds": 200,
        "text_offset": 13,
        "word_length": 3,
        "text": "out",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9625000,
        "duration_milliseconds": 225,
        "text_offset": 17,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12125000,
        "duration_milliseconds": 262,
        "text_offset": 23,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15000000,
        "duration_milliseconds": 137,
        "text_offset": 28,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16625000,
        "duration_milliseconds": 112,
        "text_offset": 33,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17875000,
        "duration_milliseconds": 162,
        "text_offset": 36,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19625000,
        "duration_milliseconds": 450,
        "text_offset": 40,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "now-we-point-out-every-node-with-an-odd-degree-02c8675e.mp3",
    "final_audio": "now-we-point-out-every-node-with-an-odd-degree-02c8675e.mp3"
  },
  {
    "input_text": "We can now point out the minimal perfect matching, so we add edges with the minimum weight until every node has an odd degree.",
    "input_data": {
      "input_text": "We can now point out the minimal perfect matching, so we add edges with the minimum weight until every node has an odd degree.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We can now point out the minimal perfect matching, so we add edges with the minimum weight until every node has an odd degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We can now point out the minimal perfect matching, so we add edges with the minimum weight until every node has an odd degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 162,
        "text_offset": 0,
        "word_length": 2,
        "text": "We",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2375000,
        "duration_milliseconds": 137,
        "text_offset": 3,
        "word_length": 3,
        "text": "can",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4000000,
        "duration_milliseconds": 175,
        "text_offset": 7,
        "word_length": 3,
        "text": "now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5875000,
        "duration_milliseconds": 250,
        "text_offset": 11,
        "word_length": 5,
        "text": "point",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8625000,
        "duration_milliseconds": 125,
        "text_offset": 17,
        "word_length": 3,
        "text": "out",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10125000,
        "duration_milliseconds": 87,
        "text_offset": 21,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11250000,
        "duration_milliseconds": 375,
        "text_offset": 25,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15250000,
        "duration_milliseconds": 400,
        "text_offset": 33,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19375000,
        "duration_milliseconds": 400,
        "text_offset": 41,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24250000,
        "duration_milliseconds": 162,
        "text_offset": 49,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 25875000,
        "duration_milliseconds": 100,
        "text_offset": 51,
        "word_length": 2,
        "text": "so",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27125000,
        "duration_milliseconds": 125,
        "text_offset": 54,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28625000,
        "duration_milliseconds": 162,
        "text_offset": 57,
        "word_length": 3,
        "text": "add",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30500000,
        "duration_milliseconds": 275,
        "text_offset": 61,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33500000,
        "duration_milliseconds": 137,
        "text_offset": 67,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35125000,
        "duration_milliseconds": 75,
        "text_offset": 72,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36000000,
        "duration_milliseconds": 387,
        "text_offset": 76,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40125000,
        "duration_milliseconds": 225,
        "text_offset": 84,
        "word_length": 6,
        "text": "weight",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 42500000,
        "duration_milliseconds": 337,
        "text_offset": 91,
        "word_length": 5,
        "text": "until",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 46000000,
        "duration_milliseconds": 212,
        "text_offset": 97,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 48375000,
        "duration_milliseconds": 212,
        "text_offset": 103,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 50750000,
        "duration_milliseconds": 187,
        "text_offset": 108,
        "word_length": 3,
        "text": "has",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 52875000,
        "duration_milliseconds": 100,
        "text_offset": 112,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 54000000,
        "duration_milliseconds": 162,
        "text_offset": 115,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 55750000,
        "duration_milliseconds": 425,
        "text_offset": 119,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60250000,
        "duration_milliseconds": 100,
        "text_offset": 125,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "we-can-now-point-out-the-minimal-perfect-matching-95146c38.mp3",
    "final_audio": "we-can-now-point-out-the-minimal-perfect-matching-95146c38.mp3"
  },
  {
    "input_text": "Now we are going to find an eulerian tour which hits every edge exact once.",
    "input_data": {
      "input_text": "Now we are going to find an eulerian tour which hits every edge exact once.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we are going to find an eulerian tour which hits every edge exact once.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we are going to find an eulerian tour which hits every edge exact once.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 250,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3250000,
        "duration_milliseconds": 112,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4625000,
        "duration_milliseconds": 100,
        "text_offset": 7,
        "word_length": 3,
        "text": "are",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5875000,
        "duration_milliseconds": 200,
        "text_offset": 11,
        "word_length": 5,
        "text": "going",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8000000,
        "duration_milliseconds": 75,
        "text_offset": 17,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 275,
        "text_offset": 20,
        "word_length": 4,
        "text": "find",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11875000,
        "duration_milliseconds": 75,
        "text_offset": 25,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12875000,
        "duration_milliseconds": 525,
        "text_offset": 28,
        "word_length": 8,
        "text": "eulerian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 18375000,
        "duration_milliseconds": 312,
        "text_offset": 37,
        "word_length": 4,
        "text": "tour",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21750000,
        "duration_milliseconds": 175,
        "text_offset": 42,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23750000,
        "duration_milliseconds": 237,
        "text_offset": 48,
        "word_length": 4,
        "text": "hits",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26250000,
        "duration_milliseconds": 275,
        "text_offset": 53,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29125000,
        "duration_milliseconds": 175,
        "text_offset": 59,
        "word_length": 4,
        "text": "edge",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 31000000,
        "duration_milliseconds": 412,
        "text_offset": 64,
        "word_length": 5,
        "text": "exact",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35375000,
        "duration_milliseconds": 387,
        "text_offset": 70,
        "word_length": 4,
        "text": "once",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39375000,
        "duration_milliseconds": 100,
        "text_offset": 74,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "now-we-are-going-to-find-an-eulerian-tour-which-332be64c.mp3",
    "final_audio": "now-we-are-going-to-find-an-eulerian-tour-which-332be64c.mp3"
  },
  {
    "input_text": "The last step will be to convert the euleric circle into a hamilton circle, so we have to delete all edges which make the circle visit a node which we have seen before. In our case these are the edges between 9 and 4.",
    "input_data": {
      "input_text": "The last step will be to convert the euleric circle into a hamilton circle, so we have to delete all edges which make the circle visit a node which we have seen before. In our case these are the edges between 9 and 4.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">The last step will be to convert the euleric circle into a hamilton circle, so we have to delete all edges which make the circle visit a node which we have seen before. In our case these are the edges between 9 and 4.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">The last step will be to convert the euleric circle into a hamilton circle, so we have to delete all edges which make the circle visit a node which we have seen before. In our case these are the edges between 9 and 4.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 137,
        "text_offset": 0,
        "word_length": 3,
        "text": "The",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2125000,
        "duration_milliseconds": 250,
        "text_offset": 4,
        "word_length": 4,
        "text": "last",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4875000,
        "duration_milliseconds": 250,
        "text_offset": 9,
        "word_length": 4,
        "text": "step",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7625000,
        "duration_milliseconds": 87,
        "text_offset": 14,
        "word_length": 4,
        "text": "will",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8750000,
        "duration_milliseconds": 112,
        "text_offset": 19,
        "word_length": 2,
        "text": "be",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10000000,
        "duration_milliseconds": 100,
        "text_offset": 22,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11250000,
        "duration_milliseconds": 400,
        "text_offset": 25,
        "word_length": 7,
        "text": "convert",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15500000,
        "duration_milliseconds": 75,
        "text_offset": 33,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16500000,
        "duration_milliseconds": 412,
        "text_offset": 37,
        "word_length": 7,
        "text": "euleric",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20875000,
        "duration_milliseconds": 387,
        "text_offset": 45,
        "word_length": 6,
        "text": "circle",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24875000,
        "duration_milliseconds": 200,
        "text_offset": 52,
        "word_length": 4,
        "text": "into",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27125000,
        "duration_milliseconds": 37,
        "text_offset": 57,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27625000,
        "duration_milliseconds": 462,
        "text_offset": 59,
        "word_length": 8,
        "text": "hamilton",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32500000,
        "duration_milliseconds": 400,
        "text_offset": 68,
        "word_length": 6,
        "text": "circle",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37500000,
        "duration_milliseconds": 187,
        "text_offset": 74,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 39375000,
        "duration_milliseconds": 100,
        "text_offset": 76,
        "word_length": 2,
        "text": "so",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40500000,
        "duration_milliseconds": 100,
        "text_offset": 79,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41750000,
        "duration_milliseconds": 150,
        "text_offset": 82,
        "word_length": 4,
        "text": "have",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 43375000,
        "duration_milliseconds": 87,
        "text_offset": 87,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44375000,
        "duration_milliseconds": 312,
        "text_offset": 90,
        "word_length": 6,
        "text": "delete",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 47750000,
        "duration_milliseconds": 225,
        "text_offset": 97,
        "word_length": 3,
        "text": "all",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 50250000,
        "duration_milliseconds": 300,
        "text_offset": 101,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 53500000,
        "duration_milliseconds": 187,
        "text_offset": 107,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 55500000,
        "duration_milliseconds": 175,
        "text_offset": 113,
        "word_length": 4,
        "text": "make",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 57500000,
        "duration_milliseconds": 100,
        "text_offset": 118,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58750000,
        "duration_milliseconds": 375,
        "text_offset": 122,
        "word_length": 6,
        "text": "circle",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 62625000,
        "duration_milliseconds": 287,
        "text_offset": 129,
        "word_length": 5,
        "text": "visit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 65750000,
        "duration_milliseconds": 37,
        "text_offset": 135,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 66250000,
        "duration_milliseconds": 275,
        "text_offset": 137,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 69250000,
        "duration_milliseconds": 187,
        "text_offset": 142,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 71250000,
        "duration_milliseconds": 125,
        "text_offset": 148,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 72750000,
        "duration_milliseconds": 112,
        "text_offset": 151,
        "word_length": 4,
        "text": "have",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 74000000,
        "duration_milliseconds": 225,
        "text_offset": 156,
        "word_length": 4,
        "text": "seen",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76500000,
        "duration_milliseconds": 525,
        "text_offset": 161,
        "word_length": 6,
        "text": "before",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 82000000,
        "duration_milliseconds": 100,
        "text_offset": 167,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 90625000,
        "duration_milliseconds": 162,
        "text_offset": 169,
        "word_length": 2,
        "text": "In",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 92500000,
        "duration_milliseconds": 125,
        "text_offset": 172,
        "word_length": 3,
        "text": "our",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 93875000,
        "duration_milliseconds": 262,
        "text_offset": 176,
        "word_length": 4,
        "text": "case",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 96750000,
        "duration_milliseconds": 212,
        "text_offset": 181,
        "word_length": 5,
        "text": "these",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 99125000,
        "duration_milliseconds": 100,
        "text_offset": 187,
        "word_length": 3,
        "text": "are",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 100250000,
        "duration_milliseconds": 87,
        "text_offset": 191,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 101375000,
        "duration_milliseconds": 387,
        "text_offset": 195,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 105500000,
        "duration_milliseconds": 362,
        "text_offset": 201,
        "word_length": 7,
        "text": "between",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 109375000,
        "duration_milliseconds": 250,
        "text_offset": 209,
        "word_length": 1,
        "text": "9",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 112000000,
        "duration_milliseconds": 87,
        "text_offset": 211,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 113125000,
        "duration_milliseconds": 487,
        "text_offset": 215,
        "word_length": 1,
        "text": "4",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 118250000,
        "duration_milliseconds": 100,
        "text_offset": 216,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "the-last-step-will-be-to-convert-the-euleric-3ff5adf2.mp3",
    "final_audio": "the-last-step-will-be-to-convert-the-euleric-3ff5adf2.mp3"
  },
  {
    "input_text": "If we take a look at the time complexity of the Christofides algorithm it is mainly determined by the step of finding a minimum perfect matching, which is O(n^3). Therefore, the overall complexity of the Christofides algorithm is O(n^3).",
    "input_data": {
      "input_text": "If we take a look at the time complexity of the Christofides algorithm it is mainly determined by the step of finding a minimum perfect matching, which is O(n^3). Therefore, the overall complexity of the Christofides algorithm is O(n^3).",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">If we take a look at the time complexity of the Christofides algorithm it is mainly determined by the step of finding a minimum perfect matching, which is O(n^3). Therefore, the overall complexity of the Christofides algorithm is O(n^3).</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">If we take a look at the time complexity of the Christofides algorithm it is mainly determined by the step of finding a minimum perfect matching, which is O(n^3). Therefore, the overall complexity of the Christofides algorithm is O(n^3).</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 175,
        "text_offset": 0,
        "word_length": 2,
        "text": "If",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2500000,
        "duration_milliseconds": 100,
        "text_offset": 3,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3625000,
        "duration_milliseconds": 175,
        "text_offset": 6,
        "word_length": 4,
        "text": "take",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5500000,
        "duration_milliseconds": 50,
        "text_offset": 11,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6250000,
        "duration_milliseconds": 187,
        "text_offset": 13,
        "word_length": 4,
        "text": "look",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8375000,
        "duration_milliseconds": 62,
        "text_offset": 18,
        "word_length": 2,
        "text": "at",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9125000,
        "duration_milliseconds": 100,
        "text_offset": 21,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10375000,
        "duration_milliseconds": 250,
        "text_offset": 25,
        "word_length": 4,
        "text": "time",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13000000,
        "duration_milliseconds": 637,
        "text_offset": 30,
        "word_length": 10,
        "text": "complexity",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19625000,
        "duration_milliseconds": 75,
        "text_offset": 41,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20625000,
        "duration_milliseconds": 87,
        "text_offset": 44,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21750000,
        "duration_milliseconds": 737,
        "text_offset": 48,
        "word_length": 12,
        "text": "Christofides",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29375000,
        "duration_milliseconds": 525,
        "text_offset": 61,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34875000,
        "duration_milliseconds": 87,
        "text_offset": 71,
        "word_length": 2,
        "text": "it",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35875000,
        "duration_milliseconds": 125,
        "text_offset": 74,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37250000,
        "duration_milliseconds": 312,
        "text_offset": 77,
        "word_length": 6,
        "text": "mainly",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40500000,
        "duration_milliseconds": 500,
        "text_offset": 84,
        "word_length": 10,
        "text": "determined",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 45750000,
        "duration_milliseconds": 112,
        "text_offset": 95,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 47000000,
        "duration_milliseconds": 112,
        "text_offset": 98,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 48375000,
        "duration_milliseconds": 250,
        "text_offset": 102,
        "word_length": 4,
        "text": "step",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 51000000,
        "duration_milliseconds": 112,
        "text_offset": 107,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 52375000,
        "duration_milliseconds": 362,
        "text_offset": 110,
        "word_length": 7,
        "text": "finding",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 56250000,
        "duration_milliseconds": 50,
        "text_offset": 118,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 56875000,
        "duration_milliseconds": 387,
        "text_offset": 120,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60875000,
        "duration_milliseconds": 400,
        "text_offset": 128,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 65000000,
        "duration_milliseconds": 387,
        "text_offset": 136,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 69750000,
        "duration_milliseconds": 100,
        "text_offset": 144,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 70875000,
        "duration_milliseconds": 175,
        "text_offset": 146,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 72750000,
        "duration_milliseconds": 137,
        "text_offset": 152,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 74375000,
        "duration_milliseconds": 162,
        "text_offset": 155,
        "word_length": 1,
        "text": "O",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76875000,
        "duration_milliseconds": 100,
        "text_offset": 156,
        "word_length": 1,
        "text": "(",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 77875000,
        "duration_milliseconds": 600,
        "text_offset": 157,
        "word_length": 3,
        "text": "n^3",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 84125000,
        "duration_milliseconds": 100,
        "text_offset": 161,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 92750000,
        "duration_milliseconds": 500,
        "text_offset": 163,
        "word_length": 9,
        "text": "Therefore",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 98750000,
        "duration_milliseconds": 75,
        "text_offset": 172,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 99500000,
        "duration_milliseconds": 112,
        "text_offset": 174,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 100875000,
        "duration_milliseconds": 425,
        "text_offset": 178,
        "word_length": 7,
        "text": "overall",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 105375000,
        "duration_milliseconds": 662,
        "text_offset": 186,
        "word_length": 10,
        "text": "complexity",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 112250000,
        "duration_milliseconds": 75,
        "text_offset": 197,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 113250000,
        "duration_milliseconds": 112,
        "text_offset": 200,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 114625000,
        "duration_milliseconds": 725,
        "text_offset": 204,
        "word_length": 12,
        "text": "Christofides",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 122125000,
        "duration_milliseconds": 550,
        "text_offset": 217,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 127750000,
        "duration_milliseconds": 150,
        "text_offset": 227,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 129375000,
        "duration_milliseconds": 212,
        "text_offset": 230,
        "word_length": 1,
        "text": "O",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 132375000,
        "duration_milliseconds": 87,
        "text_offset": 231,
        "word_length": 1,
        "text": "(",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 133250000,
        "duration_milliseconds": 600,
        "text_offset": 232,
        "word_length": 3,
        "text": "n^3",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 139375000,
        "duration_milliseconds": 100,
        "text_offset": 236,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "if-we-take-a-look-at-the-time-complexity-of-the-dabb1f2e.mp3",
    "final_audio": "if-we-take-a-look-at-the-time-complexity-of-the-dabb1f2e.mp3"
  },
  {
    "input_text": "Now we go on with the next topic",
    "input_data": {
      "input_text": "Now we go on with the next topic",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we go on with the next topic</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we go on with the next topic</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 275,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3375000,
        "duration_milliseconds": 137,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5000000,
        "duration_milliseconds": 250,
        "text_offset": 7,
        "word_length": 2,
        "text": "go",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7625000,
        "duration_milliseconds": 175,
        "text_offset": 10,
        "word_length": 2,
        "text": "on",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9500000,
        "duration_milliseconds": 125,
        "text_offset": 13,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11000000,
        "duration_milliseconds": 87,
        "text_offset": 18,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12000000,
        "duration_milliseconds": 250,
        "text_offset": 22,
        "word_length": 4,
        "text": "next",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14625000,
        "duration_milliseconds": 437,
        "text_offset": 27,
        "word_length": 5,
        "text": "topic",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "now-we-go-on-with-the-next-topic-b4db96e8.mp3",
    "final_audio": "now-we-go-on-with-the-next-topic-b4db96e8.mp3"
  },
  {
    "input_text": "In the following we will explain the christofides algorithm.",
    "input_data": {
      "input_text": "In the following we will explain the christofides algorithm.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">In the following we will explain the christofides algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">In the following we will explain the christofides algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 175,
        "text_offset": 0,
        "word_length": 2,
        "text": "In",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2375000,
        "duration_milliseconds": 100,
        "text_offset": 3,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3625000,
        "duration_milliseconds": 450,
        "text_offset": 7,
        "word_length": 9,
        "text": "following",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8375000,
        "duration_milliseconds": 125,
        "text_offset": 17,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9875000,
        "duration_milliseconds": 137,
        "text_offset": 20,
        "word_length": 4,
        "text": "will",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11500000,
        "duration_milliseconds": 412,
        "text_offset": 25,
        "word_length": 7,
        "text": "explain",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15875000,
        "duration_milliseconds": 112,
        "text_offset": 33,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17250000,
        "duration_milliseconds": 875,
        "text_offset": 37,
        "word_length": 12,
        "text": "christofides",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26250000,
        "duration_milliseconds": 650,
        "text_offset": 50,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32875000,
        "duration_milliseconds": 100,
        "text_offset": 59,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "in-the-following-we-will-explain-the-christofides-94a11300.mp3",
    "final_audio": "in-the-following-we-will-explain-the-christofides-94a11300.mp3"
  },
  {
    "input_text": "This is an approximated algorithm to solve the TSP with a O(n^3) complexity. This algorithm guarantees a solution that is at most fifthy percent longer than the optimal round trip.",
    "input_data": {
      "input_text": "This is an approximated algorithm to solve the TSP with a O(n^3) complexity. This algorithm guarantees a solution that is at most fifthy percent longer than the optimal round trip.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">This is an approximated algorithm to solve the TSP with a O(n^3) complexity. This algorithm guarantees a solution that is at most fifthy percent longer than the optimal round trip.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">This is an approximated algorithm to solve the TSP with a O(n^3) complexity. This algorithm guarantees a solution that is at most fifthy percent longer than the optimal round trip.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 225,
        "text_offset": 0,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3000000,
        "duration_milliseconds": 100,
        "text_offset": 5,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4250000,
        "duration_milliseconds": 87,
        "text_offset": 8,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5375000,
        "duration_milliseconds": 762,
        "text_offset": 11,
        "word_length": 12,
        "text": "approximated",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13250000,
        "duration_milliseconds": 550,
        "text_offset": 24,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19000000,
        "duration_milliseconds": 100,
        "text_offset": 34,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20125000,
        "duration_milliseconds": 312,
        "text_offset": 37,
        "word_length": 5,
        "text": "solve",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23500000,
        "duration_milliseconds": 100,
        "text_offset": 43,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24625000,
        "duration_milliseconds": 562,
        "text_offset": 47,
        "word_length": 3,
        "text": "TSP",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30375000,
        "duration_milliseconds": 150,
        "text_offset": 51,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32125000,
        "duration_milliseconds": 100,
        "text_offset": 56,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33375000,
        "duration_milliseconds": 237,
        "text_offset": 58,
        "word_length": 1,
        "text": "O",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36625000,
        "duration_milliseconds": 100,
        "text_offset": 59,
        "word_length": 1,
        "text": "(",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 37625000,
        "duration_milliseconds": 587,
        "text_offset": 60,
        "word_length": 3,
        "text": "n^3",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44375000,
        "duration_milliseconds": 25,
        "text_offset": 63,
        "word_length": 1,
        "text": ")",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 44750000,
        "duration_milliseconds": 800,
        "text_offset": 65,
        "word_length": 10,
        "text": "complexity",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 53000000,
        "duration_milliseconds": 100,
        "text_offset": 75,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 61625000,
        "duration_milliseconds": 225,
        "text_offset": 77,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 64125000,
        "duration_milliseconds": 562,
        "text_offset": 82,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 70000000,
        "duration_milliseconds": 525,
        "text_offset": 92,
        "word_length": 10,
        "text": "guarantees",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 75500000,
        "duration_milliseconds": 62,
        "text_offset": 103,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76375000,
        "duration_milliseconds": 475,
        "text_offset": 105,
        "word_length": 8,
        "text": "solution",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 81375000,
        "duration_milliseconds": 125,
        "text_offset": 114,
        "word_length": 4,
        "text": "that",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 82750000,
        "duration_milliseconds": 112,
        "text_offset": 119,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 84125000,
        "duration_milliseconds": 100,
        "text_offset": 122,
        "word_length": 2,
        "text": "at",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 85375000,
        "duration_milliseconds": 275,
        "text_offset": 125,
        "word_length": 4,
        "text": "most",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 88375000,
        "duration_milliseconds": 300,
        "text_offset": 130,
        "word_length": 6,
        "text": "fifthy",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 91625000,
        "duration_milliseconds": 425,
        "text_offset": 137,
        "word_length": 7,
        "text": "percent",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 96000000,
        "duration_milliseconds": 337,
        "text_offset": 145,
        "word_length": 6,
        "text": "longer",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 99500000,
        "duration_milliseconds": 125,
        "text_offset": 152,
        "word_length": 4,
        "text": "than",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 101000000,
        "duration_milliseconds": 112,
        "text_offset": 157,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 102375000,
        "duration_milliseconds": 437,
        "text_offset": 161,
        "word_length": 7,
        "text": "optimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 106875000,
        "duration_milliseconds": 225,
        "text_offset": 169,
        "word_length": 5,
        "text": "round",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 109250000,
        "duration_milliseconds": 312,
        "text_offset": 175,
        "word_length": 4,
        "text": "trip",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 112500000,
        "duration_milliseconds": 100,
        "text_offset": 179,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "this-is-an-approximated-algorithm-to-solve-the-tsp-429c5ccc.mp3",
    "final_audio": "this-is-an-approximated-algorithm-to-solve-the-tsp-429c5ccc.mp3"
  },
  {
    "input_text": "First we will create a minimal spanning tree with every node by using the algrithm of Prim.",
    "input_data": {
      "input_text": "First we will create a minimal spanning tree with every node by using the algrithm of Prim.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">First we will create a minimal spanning tree with every node by using the algrithm of Prim.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">First we will create a minimal spanning tree with every node by using the algrithm of Prim.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 375,
        "text_offset": 0,
        "word_length": 5,
        "text": "First",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4500000,
        "duration_milliseconds": 112,
        "text_offset": 6,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5750000,
        "duration_milliseconds": 137,
        "text_offset": 9,
        "word_length": 4,
        "text": "will",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7375000,
        "duration_milliseconds": 312,
        "text_offset": 14,
        "word_length": 6,
        "text": "create",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10750000,
        "duration_milliseconds": 50,
        "text_offset": 21,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11375000,
        "duration_milliseconds": 375,
        "text_offset": 23,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15375000,
        "duration_milliseconds": 387,
        "text_offset": 31,
        "word_length": 8,
        "text": "spanning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19375000,
        "duration_milliseconds": 212,
        "text_offset": 40,
        "word_length": 4,
        "text": "tree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21625000,
        "duration_milliseconds": 187,
        "text_offset": 45,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23750000,
        "duration_milliseconds": 225,
        "text_offset": 50,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26250000,
        "duration_milliseconds": 275,
        "text_offset": 56,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29250000,
        "duration_milliseconds": 112,
        "text_offset": 61,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30625000,
        "duration_milliseconds": 362,
        "text_offset": 64,
        "word_length": 5,
        "text": "using",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34500000,
        "duration_milliseconds": 112,
        "text_offset": 70,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35875000,
        "duration_milliseconds": 475,
        "text_offset": 74,
        "word_length": 8,
        "text": "algrithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40875000,
        "duration_milliseconds": 112,
        "text_offset": 83,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 42250000,
        "duration_milliseconds": 375,
        "text_offset": 86,
        "word_length": 4,
        "text": "Prim",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 46250000,
        "duration_milliseconds": 100,
        "text_offset": 90,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "first-we-will-create-a-minimal-spanning-tree-with-a9ca7eef.mp3",
    "final_audio": "first-we-will-create-a-minimal-spanning-tree-with-a9ca7eef.mp3"
  },
  {
    "input_text": "Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom",
    "input_data": {
      "input_text": "Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 200,
        "text_offset": 0,
        "word_length": 4,
        "text": "Then",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2750000,
        "duration_milliseconds": 112,
        "text_offset": 5,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4125000,
        "duration_milliseconds": 250,
        "text_offset": 8,
        "word_length": 6,
        "text": "search",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6875000,
        "duration_milliseconds": 175,
        "text_offset": 15,
        "word_length": 3,
        "text": "for",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 212,
        "text_offset": 19,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11250000,
        "duration_milliseconds": 212,
        "text_offset": 25,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13500000,
        "duration_milliseconds": 62,
        "text_offset": 30,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14375000,
        "duration_milliseconds": 100,
        "text_offset": 33,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15625000,
        "duration_milliseconds": 312,
        "text_offset": 37,
        "word_length": 5,
        "text": "graph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19000000,
        "duration_milliseconds": 137,
        "text_offset": 43,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20625000,
        "duration_milliseconds": 87,
        "text_offset": 48,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21750000,
        "duration_milliseconds": 162,
        "text_offset": 51,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23500000,
        "duration_milliseconds": 362,
        "text_offset": 55,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28125000,
        "duration_milliseconds": 225,
        "text_offset": 61,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 30625000,
        "duration_milliseconds": 287,
        "text_offset": 63,
        "word_length": 7,
        "text": "meaning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33750000,
        "duration_milliseconds": 87,
        "text_offset": 71,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34750000,
        "duration_milliseconds": 200,
        "text_offset": 74,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37000000,
        "duration_milliseconds": 312,
        "text_offset": 78,
        "word_length": 6,
        "text": "number",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40250000,
        "duration_milliseconds": 75,
        "text_offset": 85,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41250000,
        "duration_milliseconds": 300,
        "text_offset": 88,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44500000,
        "duration_milliseconds": 125,
        "text_offset": 94,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 46000000,
        "duration_milliseconds": 362,
        "text_offset": 97,
        "word_length": 5,
        "text": "using",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 49875000,
        "duration_milliseconds": 112,
        "text_offset": 103,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 51250000,
        "duration_milliseconds": 587,
        "text_offset": 107,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 57375000,
        "duration_milliseconds": 112,
        "text_offset": 117,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58625000,
        "duration_milliseconds": 475,
        "text_offset": 120,
        "word_length": 7,
        "text": "Blossom",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "then-we-search-for-every-node-in-the-graph-with-an-cd2fe15a.mp3",
    "final_audio": "then-we-search-for-every-node-in-the-graph-with-an-cd2fe15a.mp3"
  },
  {
    "input_text": "After finding all the nodes with an odd degree we need to find a minimum perfect matching in the subgraph consisting only of the odd degree vertices. A perfect matching means every vertex is paired, and minimal means the sum of the lengths of the edges in the pairing is minimized.",
    "input_data": {
      "input_text": "After finding all the nodes with an odd degree we need to find a minimum perfect matching in the subgraph consisting only of the odd degree vertices. A perfect matching means every vertex is paired, and minimal means the sum of the lengths of the edges in the pairing is minimized.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">After finding all the nodes with an odd degree we need to find a minimum perfect matching in the subgraph consisting only of the odd degree vertices. A perfect matching means every vertex is paired, and minimal means the sum of the lengths of the edges in the pairing is minimized.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">After finding all the nodes with an odd degree we need to find a minimum perfect matching in the subgraph consisting only of the odd degree vertices. A perfect matching means every vertex is paired, and minimal means the sum of the lengths of the edges in the pairing is minimized.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 312,
        "text_offset": 0,
        "word_length": 5,
        "text": "After",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3875000,
        "duration_milliseconds": 350,
        "text_offset": 6,
        "word_length": 7,
        "text": "finding",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7625000,
        "duration_milliseconds": 112,
        "text_offset": 14,
        "word_length": 3,
        "text": "all",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 100,
        "text_offset": 18,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10125000,
        "duration_milliseconds": 275,
        "text_offset": 22,
        "word_length": 5,
        "text": "nodes",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13000000,
        "duration_milliseconds": 112,
        "text_offset": 28,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14375000,
        "duration_milliseconds": 100,
        "text_offset": 33,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15625000,
        "duration_milliseconds": 162,
        "text_offset": 36,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17500000,
        "duration_milliseconds": 312,
        "text_offset": 40,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20750000,
        "duration_milliseconds": 125,
        "text_offset": 47,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22250000,
        "duration_milliseconds": 150,
        "text_offset": 50,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23875000,
        "duration_milliseconds": 75,
        "text_offset": 55,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24875000,
        "duration_milliseconds": 237,
        "text_offset": 58,
        "word_length": 4,
        "text": "find",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27500000,
        "duration_milliseconds": 50,
        "text_offset": 63,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28125000,
        "duration_milliseconds": 412,
        "text_offset": 65,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32500000,
        "duration_milliseconds": 425,
        "text_offset": 73,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37000000,
        "duration_milliseconds": 375,
        "text_offset": 81,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40875000,
        "duration_milliseconds": 62,
        "text_offset": 90,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41625000,
        "duration_milliseconds": 100,
        "text_offset": 93,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 42875000,
        "duration_milliseconds": 525,
        "text_offset": 97,
        "word_length": 8,
        "text": "subgraph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 48375000,
        "duration_milliseconds": 550,
        "text_offset": 106,
        "word_length": 10,
        "text": "consisting",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 54125000,
        "duration_milliseconds": 237,
        "text_offset": 117,
        "word_length": 4,
        "text": "only",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 56750000,
        "duration_milliseconds": 62,
        "text_offset": 122,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 57625000,
        "duration_milliseconds": 100,
        "text_offset": 125,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58875000,
        "duration_milliseconds": 175,
        "text_offset": 129,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60750000,
        "duration_milliseconds": 275,
        "text_offset": 133,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 63750000,
        "duration_milliseconds": 637,
        "text_offset": 140,
        "word_length": 8,
        "text": "vertices",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 70375000,
        "duration_milliseconds": 100,
        "text_offset": 148,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 79000000,
        "duration_milliseconds": 137,
        "text_offset": 150,
        "word_length": 1,
        "text": "A",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 80500000,
        "duration_milliseconds": 412,
        "text_offset": 152,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 84875000,
        "duration_milliseconds": 375,
        "text_offset": 160,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 88875000,
        "duration_milliseconds": 300,
        "text_offset": 169,
        "word_length": 5,
        "text": "means",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 92000000,
        "duration_milliseconds": 212,
        "text_offset": 175,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 94250000,
        "duration_milliseconds": 437,
        "text_offset": 181,
        "word_length": 6,
        "text": "vertex",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 98750000,
        "duration_milliseconds": 112,
        "text_offset": 188,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 100125000,
        "duration_milliseconds": 350,
        "text_offset": 191,
        "word_length": 6,
        "text": "paired",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 104625000,
        "duration_milliseconds": 175,
        "text_offset": 197,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 106375000,
        "duration_milliseconds": 137,
        "text_offset": 199,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 108000000,
        "duration_milliseconds": 350,
        "text_offset": 203,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 111750000,
        "duration_milliseconds": 250,
        "text_offset": 211,
        "word_length": 5,
        "text": "means",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 114500000,
        "duration_milliseconds": 112,
        "text_offset": 217,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 115875000,
        "duration_milliseconds": 212,
        "text_offset": 221,
        "word_length": 3,
        "text": "sum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 118125000,
        "duration_milliseconds": 75,
        "text_offset": 225,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 119125000,
        "duration_milliseconds": 100,
        "text_offset": 228,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 120375000,
        "duration_milliseconds": 312,
        "text_offset": 232,
        "word_length": 7,
        "text": "lengths",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 123750000,
        "duration_milliseconds": 87,
        "text_offset": 240,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 124875000,
        "duration_milliseconds": 87,
        "text_offset": 243,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 126000000,
        "duration_milliseconds": 337,
        "text_offset": 247,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 129625000,
        "duration_milliseconds": 62,
        "text_offset": 253,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 130375000,
        "duration_milliseconds": 100,
        "text_offset": 256,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 131625000,
        "duration_milliseconds": 362,
        "text_offset": 260,
        "word_length": 7,
        "text": "pairing",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 135375000,
        "duration_milliseconds": 125,
        "text_offset": 268,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 136750000,
        "duration_milliseconds": 662,
        "text_offset": 271,
        "word_length": 9,
        "text": "minimized",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 143625000,
        "duration_milliseconds": 100,
        "text_offset": 280,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "after-finding-all-the-nodes-with-an-odd-degree-we-0f720219.mp3",
    "final_audio": "after-finding-all-the-nodes-with-an-odd-degree-we-0f720219.mp3"
  },
  {
    "input_text": "Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.",
    "input_data": {
      "input_text": "Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 200,
        "text_offset": 0,
        "word_length": 4,
        "text": "Then",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2750000,
        "duration_milliseconds": 100,
        "text_offset": 5,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4000000,
        "duration_milliseconds": 150,
        "text_offset": 8,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5625000,
        "duration_milliseconds": 100,
        "text_offset": 13,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6875000,
        "duration_milliseconds": 400,
        "text_offset": 16,
        "word_length": 7,
        "text": "combine",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11125000,
        "duration_milliseconds": 87,
        "text_offset": 24,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12250000,
        "duration_milliseconds": 362,
        "text_offset": 28,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16125000,
        "duration_milliseconds": 387,
        "text_offset": 36,
        "word_length": 8,
        "text": "spanning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20250000,
        "duration_milliseconds": 212,
        "text_offset": 45,
        "word_length": 4,
        "text": "tree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22625000,
        "duration_milliseconds": 137,
        "text_offset": 50,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24250000,
        "duration_milliseconds": 112,
        "text_offset": 55,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 25625000,
        "duration_milliseconds": 425,
        "text_offset": 59,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30000000,
        "duration_milliseconds": 362,
        "text_offset": 67,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33875000,
        "duration_milliseconds": 125,
        "text_offset": 76,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35375000,
        "duration_milliseconds": 300,
        "text_offset": 79,
        "word_length": 6,
        "text": "obtain",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 38625000,
        "duration_milliseconds": 62,
        "text_offset": 86,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39500000,
        "duration_milliseconds": 612,
        "text_offset": 88,
        "word_length": 10,
        "text": "multigraph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 45875000,
        "duration_milliseconds": 100,
        "text_offset": 99,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 47125000,
        "duration_milliseconds": 187,
        "text_offset": 102,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 49250000,
        "duration_milliseconds": 212,
        "text_offset": 108,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 51625000,
        "duration_milliseconds": 487,
        "text_offset": 114,
        "word_length": 6,
        "text": "vertex",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 56750000,
        "duration_milliseconds": 175,
        "text_offset": 121,
        "word_length": 3,
        "text": "has",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58750000,
        "duration_milliseconds": 100,
        "text_offset": 125,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60000000,
        "duration_milliseconds": 175,
        "text_offset": 128,
        "word_length": 4,
        "text": "even",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 61875000,
        "duration_milliseconds": 475,
        "text_offset": 133,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 66875000,
        "duration_milliseconds": 100,
        "text_offset": 139,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "then-we-need-to-combine-the-minimum-spanning-tree-ad2051d8.mp3",
    "final_audio": "then-we-need-to-combine-the-minimum-spanning-tree-ad2051d8.mp3"
  },
  {
    "input_text": "Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.",
    "input_data": {
      "input_text": "Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 325,
        "text_offset": 0,
        "word_length": 5,
        "text": "Since",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4000000,
        "duration_milliseconds": 237,
        "text_offset": 6,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6625000,
        "duration_milliseconds": 475,
        "text_offset": 12,
        "word_length": 6,
        "text": "vertex",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11625000,
        "duration_milliseconds": 175,
        "text_offset": 19,
        "word_length": 3,
        "text": "has",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13625000,
        "duration_milliseconds": 100,
        "text_offset": 23,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14875000,
        "duration_milliseconds": 187,
        "text_offset": 26,
        "word_length": 4,
        "text": "even",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17000000,
        "duration_milliseconds": 400,
        "text_offset": 31,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21875000,
        "duration_milliseconds": 112,
        "text_offset": 37,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 23000000,
        "duration_milliseconds": 162,
        "text_offset": 39,
        "word_length": 5,
        "text": "there",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24750000,
        "duration_milliseconds": 425,
        "text_offset": 45,
        "word_length": 6,
        "text": "exists",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29250000,
        "duration_milliseconds": 112,
        "text_offset": 52,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30625000,
        "duration_milliseconds": 550,
        "text_offset": 55,
        "word_length": 8,
        "text": "Eulerian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36375000,
        "duration_milliseconds": 375,
        "text_offset": 64,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40375000,
        "duration_milliseconds": 87,
        "text_offset": 72,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41500000,
        "duration_milliseconds": 175,
        "text_offset": 75,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 43375000,
        "duration_milliseconds": 575,
        "text_offset": 80,
        "word_length": 5,
        "text": "graph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 49375000,
        "duration_milliseconds": 100,
        "text_offset": 85,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 58000000,
        "duration_milliseconds": 175,
        "text_offset": 87,
        "word_length": 2,
        "text": "An",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60000000,
        "duration_milliseconds": 512,
        "text_offset": 90,
        "word_length": 8,
        "text": "Eulerian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 65375000,
        "duration_milliseconds": 375,
        "text_offset": 99,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 69250000,
        "duration_milliseconds": 125,
        "text_offset": 107,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 70750000,
        "duration_milliseconds": 62,
        "text_offset": 110,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 71625000,
        "duration_milliseconds": 312,
        "text_offset": 112,
        "word_length": 4,
        "text": "path",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 75000000,
        "duration_milliseconds": 150,
        "text_offset": 117,
        "word_length": 4,
        "text": "that",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76750000,
        "duration_milliseconds": 350,
        "text_offset": 122,
        "word_length": 6,
        "text": "visits",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 80500000,
        "duration_milliseconds": 212,
        "text_offset": 129,
        "word_length": 4,
        "text": "each",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 82875000,
        "duration_milliseconds": 150,
        "text_offset": 134,
        "word_length": 4,
        "text": "edge",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 84625000,
        "duration_milliseconds": 487,
        "text_offset": 139,
        "word_length": 7,
        "text": "exactly",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 89750000,
        "duration_milliseconds": 475,
        "text_offset": 147,
        "word_length": 4,
        "text": "once",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 94750000,
        "duration_milliseconds": 100,
        "text_offset": 151,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 103375000,
        "duration_milliseconds": 212,
        "text_offset": 153,
        "word_length": 2,
        "text": "We",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 105750000,
        "duration_milliseconds": 212,
        "text_offset": 156,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 108000000,
        "duration_milliseconds": 100,
        "text_offset": 161,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 109250000,
        "duration_milliseconds": 337,
        "text_offset": 164,
        "word_length": 4,
        "text": "find",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 112750000,
        "duration_milliseconds": 187,
        "text_offset": 169,
        "word_length": 2,
        "text": "it",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 114750000,
        "duration_milliseconds": 100,
        "text_offset": 171,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "since-every-vertex-has-an-even-degree-there-exists-20bb5a60.mp3",
    "final_audio": "since-every-vertex-has-an-even-degree-there-exists-20bb5a60.mp3"
  },
  {
    "input_text": "Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.",
    "input_data": {
      "input_text": "Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 237,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3125000,
        "duration_milliseconds": 125,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4625000,
        "duration_milliseconds": 375,
        "text_offset": 7,
        "word_length": 7,
        "text": "convert",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8625000,
        "duration_milliseconds": 75,
        "text_offset": 15,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9625000,
        "duration_milliseconds": 512,
        "text_offset": 19,
        "word_length": 8,
        "text": "Eulerian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15000000,
        "duration_milliseconds": 375,
        "text_offset": 28,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19000000,
        "duration_milliseconds": 125,
        "text_offset": 36,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20500000,
        "duration_milliseconds": 50,
        "text_offset": 39,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21250000,
        "duration_milliseconds": 712,
        "text_offset": 41,
        "word_length": 11,
        "text": "Hamiltonian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28625000,
        "duration_milliseconds": 387,
        "text_offset": 53,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32750000,
        "duration_milliseconds": 150,
        "text_offset": 61,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34500000,
        "duration_milliseconds": 462,
        "text_offset": 64,
        "word_length": 8,
        "text": "skipping",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39250000,
        "duration_milliseconds": 437,
        "text_offset": 73,
        "word_length": 8,
        "text": "repeated",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 43750000,
        "duration_milliseconds": 650,
        "text_offset": 82,
        "word_length": 8,
        "text": "vertices",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 50500000,
        "duration_milliseconds": 100,
        "text_offset": 90,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "now-we-convert-the-eulerian-circuit-to-a-5c9d1a2f.mp3",
    "final_audio": "now-we-convert-the-eulerian-circuit-to-a-5c9d1a2f.mp3"
  },
  {
    "input_text": "Let's take a look at the graph to visualize this algorithm.",
    "input_data": {
      "input_text": "Let's take a look at the graph to visualize this algorithm.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Let's take a look at the graph to visualize this algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Let's take a look at the graph to visualize this algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 300,
        "text_offset": 0,
        "word_length": 5,
        "text": "Let's",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3625000,
        "duration_milliseconds": 187,
        "text_offset": 6,
        "word_length": 4,
        "text": "take",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5750000,
        "duration_milliseconds": 62,
        "text_offset": 11,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6625000,
        "duration_milliseconds": 225,
        "text_offset": 13,
        "word_length": 4,
        "text": "look",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9125000,
        "duration_milliseconds": 75,
        "text_offset": 18,
        "word_length": 2,
        "text": "at",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10125000,
        "duration_milliseconds": 112,
        "text_offset": 21,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11500000,
        "duration_milliseconds": 325,
        "text_offset": 25,
        "word_length": 5,
        "text": "graph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15000000,
        "duration_milliseconds": 100,
        "text_offset": 31,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16250000,
        "duration_milliseconds": 600,
        "text_offset": 34,
        "word_length": 9,
        "text": "visualize",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22500000,
        "duration_milliseconds": 187,
        "text_offset": 44,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24625000,
        "duration_milliseconds": 625,
        "text_offset": 49,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 31125000,
        "duration_milliseconds": 100,
        "text_offset": 58,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "let-s-take-a-look-at-the-graph-to-visualize-this-c57f7870.mp3",
    "final_audio": "let-s-take-a-look-at-the-graph-to-visualize-this-c57f7870.mp3"
  },
  {
    "input_text": "Like explained before we create a minimal spanning tree.",
    "input_data": {
      "input_text": "Like explained before we create a minimal spanning tree.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Like explained before we create a minimal spanning tree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Like explained before we create a minimal spanning tree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 225,
        "text_offset": 0,
        "word_length": 4,
        "text": "Like",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3000000,
        "duration_milliseconds": 500,
        "text_offset": 5,
        "word_length": 9,
        "text": "explained",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8250000,
        "duration_milliseconds": 337,
        "text_offset": 15,
        "word_length": 6,
        "text": "before",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11750000,
        "duration_milliseconds": 125,
        "text_offset": 22,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13250000,
        "duration_milliseconds": 337,
        "text_offset": 25,
        "word_length": 6,
        "text": "create",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16875000,
        "duration_milliseconds": 50,
        "text_offset": 32,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17500000,
        "duration_milliseconds": 375,
        "text_offset": 34,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21500000,
        "duration_milliseconds": 400,
        "text_offset": 42,
        "word_length": 8,
        "text": "spanning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 25750000,
        "duration_milliseconds": 350,
        "text_offset": 51,
        "word_length": 4,
        "text": "tree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29500000,
        "duration_milliseconds": 100,
        "text_offset": 55,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "like-explained-before-we-create-a-minimal-spanning-44a9aef2.mp3",
    "final_audio": "like-explained-before-we-create-a-minimal-spanning-44a9aef2.mp3"
  },
  {
    "input_text": "Now we point out every node with an odd degree",
    "input_data": {
      "input_text": "Now we point out every node with an odd degree",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we point out every node with an odd degree</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we point out every node with an odd degree</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 250,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3250000,
        "duration_milliseconds": 125,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4625000,
        "duration_milliseconds": 262,
        "text_offset": 7,
        "word_length": 5,
        "text": "point",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7500000,
        "duration_milliseconds": 200,
        "text_offset": 13,
        "word_length": 3,
        "text": "out",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9625000,
        "duration_milliseconds": 225,
        "text_offset": 17,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12125000,
        "duration_milliseconds": 262,
        "text_offset": 23,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15000000,
        "duration_milliseconds": 137,
        "text_offset": 28,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16625000,
        "duration_milliseconds": 112,
        "text_offset": 33,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17875000,
        "duration_milliseconds": 162,
        "text_offset": 36,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19625000,
        "duration_milliseconds": 450,
        "text_offset": 40,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "now-we-point-out-every-node-with-an-odd-degree-02c8675e.mp3",
    "final_audio": "now-we-point-out-every-node-with-an-odd-degree-02c8675e.mp3"
  },
  {
    "input_text": "We can now point out the minimal perfect matching, so we add edges with the minimum weight until every node has an odd degree.",
    "input_data": {
      "input_text": "We can now point out the minimal perfect matching, so we add edges with the minimum weight until every node has an odd degree.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We can now point out the minimal perfect matching, so we add edges with the minimum weight until every node has an odd degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We can now point out the minimal perfect matching, so we add edges with the minimum weight until every node has an odd degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 162,
        "text_offset": 0,
        "word_length": 2,
        "text": "We",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2375000,
        "duration_milliseconds": 137,
        "text_offset": 3,
        "word_length": 3,
        "text": "can",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4000000,
        "duration_milliseconds": 175,
        "text_offset": 7,
        "word_length": 3,
        "text": "now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5875000,
        "duration_milliseconds": 250,
        "text_offset": 11,
        "word_length": 5,
        "text": "point",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8625000,
        "duration_milliseconds": 125,
        "text_offset": 17,
        "word_length": 3,
        "text": "out",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10125000,
        "duration_milliseconds": 87,
        "text_offset": 21,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11250000,
        "duration_milliseconds": 375,
        "text_offset": 25,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15250000,
        "duration_milliseconds": 400,
        "text_offset": 33,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19375000,
        "duration_milliseconds": 400,
        "text_offset": 41,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24250000,
        "duration_milliseconds": 162,
        "text_offset": 49,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 25875000,
        "duration_milliseconds": 100,
        "text_offset": 51,
        "word_length": 2,
        "text": "so",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27125000,
        "duration_milliseconds": 125,
        "text_offset": 54,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28625000,
        "duration_milliseconds": 162,
        "text_offset": 57,
        "word_length": 3,
        "text": "add",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30500000,
        "duration_milliseconds": 275,
        "text_offset": 61,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33500000,
        "duration_milliseconds": 137,
        "text_offset": 67,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35125000,
        "duration_milliseconds": 75,
        "text_offset": 72,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36000000,
        "duration_milliseconds": 387,
        "text_offset": 76,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40125000,
        "duration_milliseconds": 225,
        "text_offset": 84,
        "word_length": 6,
        "text": "weight",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 42500000,
        "duration_milliseconds": 337,
        "text_offset": 91,
        "word_length": 5,
        "text": "until",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 46000000,
        "duration_milliseconds": 212,
        "text_offset": 97,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 48375000,
        "duration_milliseconds": 212,
        "text_offset": 103,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 50750000,
        "duration_milliseconds": 187,
        "text_offset": 108,
        "word_length": 3,
        "text": "has",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 52875000,
        "duration_milliseconds": 100,
        "text_offset": 112,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 54000000,
        "duration_milliseconds": 162,
        "text_offset": 115,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 55750000,
        "duration_milliseconds": 425,
        "text_offset": 119,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60250000,
        "duration_milliseconds": 100,
        "text_offset": 125,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "we-can-now-point-out-the-minimal-perfect-matching-95146c38.mp3",
    "final_audio": "we-can-now-point-out-the-minimal-perfect-matching-95146c38.mp3"
  },
  {
    "input_text": "Now we are going to find an eulerian tour which hits every edge exact once.",
    "input_data": {
      "input_text": "Now we are going to find an eulerian tour which hits every edge exact once.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we are going to find an eulerian tour which hits every edge exact once.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we are going to find an eulerian tour which hits every edge exact once.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 250,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3250000,
        "duration_milliseconds": 112,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4625000,
        "duration_milliseconds": 100,
        "text_offset": 7,
        "word_length": 3,
        "text": "are",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5875000,
        "duration_milliseconds": 200,
        "text_offset": 11,
        "word_length": 5,
        "text": "going",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8000000,
        "duration_milliseconds": 75,
        "text_offset": 17,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 275,
        "text_offset": 20,
        "word_length": 4,
        "text": "find",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11875000,
        "duration_milliseconds": 75,
        "text_offset": 25,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12875000,
        "duration_milliseconds": 525,
        "text_offset": 28,
        "word_length": 8,
        "text": "eulerian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 18375000,
        "duration_milliseconds": 312,
        "text_offset": 37,
        "word_length": 4,
        "text": "tour",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21750000,
        "duration_milliseconds": 175,
        "text_offset": 42,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23750000,
        "duration_milliseconds": 237,
        "text_offset": 48,
        "word_length": 4,
        "text": "hits",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26250000,
        "duration_milliseconds": 275,
        "text_offset": 53,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29125000,
        "duration_milliseconds": 175,
        "text_offset": 59,
        "word_length": 4,
        "text": "edge",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 31000000,
        "duration_milliseconds": 412,
        "text_offset": 64,
        "word_length": 5,
        "text": "exact",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35375000,
        "duration_milliseconds": 387,
        "text_offset": 70,
        "word_length": 4,
        "text": "once",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39375000,
        "duration_milliseconds": 100,
        "text_offset": 74,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "now-we-are-going-to-find-an-eulerian-tour-which-332be64c.mp3",
    "final_audio": "now-we-are-going-to-find-an-eulerian-tour-which-332be64c.mp3"
  },
  {
    "input_text": "The last step will be to convert the euleric circle into a hamilton circle, so we have to delete all edges which make the circle visit a node which we have seen before. In our case these are the edges between 9 and 4.",
    "input_data": {
      "input_text": "The last step will be to convert the euleric circle into a hamilton circle, so we have to delete all edges which make the circle visit a node which we have seen before. In our case these are the edges between 9 and 4.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">The last step will be to convert the euleric circle into a hamilton circle, so we have to delete all edges which make the circle visit a node which we have seen before. In our case these are the edges between 9 and 4.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">The last step will be to convert the euleric circle into a hamilton circle, so we have to delete all edges which make the circle visit a node which we have seen before. In our case these are the edges between 9 and 4.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 137,
        "text_offset": 0,
        "word_length": 3,
        "text": "The",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2125000,
        "duration_milliseconds": 250,
        "text_offset": 4,
        "word_length": 4,
        "text": "last",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4875000,
        "duration_milliseconds": 250,
        "text_offset": 9,
        "word_length": 4,
        "text": "step",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7625000,
        "duration_milliseconds": 87,
        "text_offset": 14,
        "word_length": 4,
        "text": "will",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8750000,
        "duration_milliseconds": 112,
        "text_offset": 19,
        "word_length": 2,
        "text": "be",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10000000,
        "duration_milliseconds": 100,
        "text_offset": 22,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11250000,
        "duration_milliseconds": 400,
        "text_offset": 25,
        "word_length": 7,
        "text": "convert",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15500000,
        "duration_milliseconds": 75,
        "text_offset": 33,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16500000,
        "duration_milliseconds": 412,
        "text_offset": 37,
        "word_length": 7,
        "text": "euleric",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20875000,
        "duration_milliseconds": 387,
        "text_offset": 45,
        "word_length": 6,
        "text": "circle",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24875000,
        "duration_milliseconds": 200,
        "text_offset": 52,
        "word_length": 4,
        "text": "into",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27125000,
        "duration_milliseconds": 37,
        "text_offset": 57,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27625000,
        "duration_milliseconds": 462,
        "text_offset": 59,
        "word_length": 8,
        "text": "hamilton",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32500000,
        "duration_milliseconds": 400,
        "text_offset": 68,
        "word_length": 6,
        "text": "circle",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37500000,
        "duration_milliseconds": 187,
        "text_offset": 74,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 39375000,
        "duration_milliseconds": 100,
        "text_offset": 76,
        "word_length": 2,
        "text": "so",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40500000,
        "duration_milliseconds": 100,
        "text_offset": 79,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41750000,
        "duration_milliseconds": 150,
        "text_offset": 82,
        "word_length": 4,
        "text": "have",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 43375000,
        "duration_milliseconds": 87,
        "text_offset": 87,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44375000,
        "duration_milliseconds": 312,
        "text_offset": 90,
        "word_length": 6,
        "text": "delete",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 47750000,
        "duration_milliseconds": 225,
        "text_offset": 97,
        "word_length": 3,
        "text": "all",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 50250000,
        "duration_milliseconds": 300,
        "text_offset": 101,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 53500000,
        "duration_milliseconds": 187,
        "text_offset": 107,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 55500000,
        "duration_milliseconds": 175,
        "text_offset": 113,
        "word_length": 4,
        "text": "make",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 57500000,
        "duration_milliseconds": 100,
        "text_offset": 118,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58750000,
        "duration_milliseconds": 375,
        "text_offset": 122,
        "word_length": 6,
        "text": "circle",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 62625000,
        "duration_milliseconds": 287,
        "text_offset": 129,
        "word_length": 5,
        "text": "visit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 65750000,
        "duration_milliseconds": 37,
        "text_offset": 135,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 66250000,
        "duration_milliseconds": 275,
        "text_offset": 137,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 69250000,
        "duration_milliseconds": 187,
        "text_offset": 142,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 71250000,
        "duration_milliseconds": 125,
        "text_offset": 148,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 72750000,
        "duration_milliseconds": 112,
        "text_offset": 151,
        "word_length": 4,
        "text": "have",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 74000000,
        "duration_milliseconds": 225,
        "text_offset": 156,
        "word_length": 4,
        "text": "seen",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76500000,
        "duration_milliseconds": 525,
        "text_offset": 161,
        "word_length": 6,
        "text": "before",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 82000000,
        "duration_milliseconds": 100,
        "text_offset": 167,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 90625000,
        "duration_milliseconds": 162,
        "text_offset": 169,
        "word_length": 2,
        "text": "In",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 92500000,
        "duration_milliseconds": 125,
        "text_offset": 172,
        "word_length": 3,
        "text": "our",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 93875000,
        "duration_milliseconds": 262,
        "text_offset": 176,
        "word_length": 4,
        "text": "case",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 96750000,
        "duration_milliseconds": 212,
        "text_offset": 181,
        "word_length": 5,
        "text": "these",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 99125000,
        "duration_milliseconds": 100,
        "text_offset": 187,
        "word_length": 3,
        "text": "are",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 100250000,
        "duration_milliseconds": 87,
        "text_offset": 191,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 101375000,
        "duration_milliseconds": 387,
        "text_offset": 195,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 105500000,
        "duration_milliseconds": 362,
        "text_offset": 201,
        "word_length": 7,
        "text": "between",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 109375000,
        "duration_milliseconds": 250,
        "text_offset": 209,
        "word_length": 1,
        "text": "9",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 112000000,
        "duration_milliseconds": 87,
        "text_offset": 211,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 113125000,
        "duration_milliseconds": 487,
        "text_offset": 215,
        "word_length": 1,
        "text": "4",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 118250000,
        "duration_milliseconds": 100,
        "text_offset": 216,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "the-last-step-will-be-to-convert-the-euleric-3ff5adf2.mp3",
    "final_audio": "the-last-step-will-be-to-convert-the-euleric-3ff5adf2.mp3"
  },
  {
    "input_text": "If we take a look at the time complexity of the Christofides algorithm it is mainly determined by the step of finding a minimum perfect matching, which is O(n^3). Therefore, the overall complexity of the Christofides algorithm is O(n^3).",
    "input_data": {
      "input_text": "If we take a look at the time complexity of the Christofides algorithm it is mainly determined by the step of finding a minimum perfect matching, which is O(n^3). Therefore, the overall complexity of the Christofides algorithm is O(n^3).",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">If we take a look at the time complexity of the Christofides algorithm it is mainly determined by the step of finding a minimum perfect matching, which is O(n^3). Therefore, the overall complexity of the Christofides algorithm is O(n^3).</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">If we take a look at the time complexity of the Christofides algorithm it is mainly determined by the step of finding a minimum perfect matching, which is O(n^3). Therefore, the overall complexity of the Christofides algorithm is O(n^3).</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 175,
        "text_offset": 0,
        "word_length": 2,
        "text": "If",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2500000,
        "duration_milliseconds": 100,
        "text_offset": 3,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3625000,
        "duration_milliseconds": 175,
        "text_offset": 6,
        "word_length": 4,
        "text": "take",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5500000,
        "duration_milliseconds": 50,
        "text_offset": 11,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6250000,
        "duration_milliseconds": 187,
        "text_offset": 13,
        "word_length": 4,
        "text": "look",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8375000,
        "duration_milliseconds": 62,
        "text_offset": 18,
        "word_length": 2,
        "text": "at",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9125000,
        "duration_milliseconds": 100,
        "text_offset": 21,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10375000,
        "duration_milliseconds": 250,
        "text_offset": 25,
        "word_length": 4,
        "text": "time",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13000000,
        "duration_milliseconds": 637,
        "text_offset": 30,
        "word_length": 10,
        "text": "complexity",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19625000,
        "duration_milliseconds": 75,
        "text_offset": 41,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20625000,
        "duration_milliseconds": 87,
        "text_offset": 44,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21750000,
        "duration_milliseconds": 737,
        "text_offset": 48,
        "word_length": 12,
        "text": "Christofides",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29375000,
        "duration_milliseconds": 525,
        "text_offset": 61,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34875000,
        "duration_milliseconds": 87,
        "text_offset": 71,
        "word_length": 2,
        "text": "it",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35875000,
        "duration_milliseconds": 125,
        "text_offset": 74,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37250000,
        "duration_milliseconds": 312,
        "text_offset": 77,
        "word_length": 6,
        "text": "mainly",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40500000,
        "duration_milliseconds": 500,
        "text_offset": 84,
        "word_length": 10,
        "text": "determined",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 45750000,
        "duration_milliseconds": 112,
        "text_offset": 95,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 47000000,
        "duration_milliseconds": 112,
        "text_offset": 98,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 48375000,
        "duration_milliseconds": 250,
        "text_offset": 102,
        "word_length": 4,
        "text": "step",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 51000000,
        "duration_milliseconds": 112,
        "text_offset": 107,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 52375000,
        "duration_milliseconds": 362,
        "text_offset": 110,
        "word_length": 7,
        "text": "finding",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 56250000,
        "duration_milliseconds": 50,
        "text_offset": 118,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 56875000,
        "duration_milliseconds": 387,
        "text_offset": 120,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60875000,
        "duration_milliseconds": 400,
        "text_offset": 128,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 65000000,
        "duration_milliseconds": 387,
        "text_offset": 136,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 69750000,
        "duration_milliseconds": 100,
        "text_offset": 144,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 70875000,
        "duration_milliseconds": 175,
        "text_offset": 146,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 72750000,
        "duration_milliseconds": 137,
        "text_offset": 152,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 74375000,
        "duration_milliseconds": 162,
        "text_offset": 155,
        "word_length": 1,
        "text": "O",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76875000,
        "duration_milliseconds": 100,
        "text_offset": 156,
        "word_length": 1,
        "text": "(",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 77875000,
        "duration_milliseconds": 600,
        "text_offset": 157,
        "word_length": 3,
        "text": "n^3",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 84125000,
        "duration_milliseconds": 100,
        "text_offset": 161,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 92750000,
        "duration_milliseconds": 500,
        "text_offset": 163,
        "word_length": 9,
        "text": "Therefore",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 98750000,
        "duration_milliseconds": 75,
        "text_offset": 172,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 99500000,
        "duration_milliseconds": 112,
        "text_offset": 174,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 100875000,
        "duration_milliseconds": 425,
        "text_offset": 178,
        "word_length": 7,
        "text": "overall",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 105375000,
        "duration_milliseconds": 662,
        "text_offset": 186,
        "word_length": 10,
        "text": "complexity",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 112250000,
        "duration_milliseconds": 75,
        "text_offset": 197,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 113250000,
        "duration_milliseconds": 112,
        "text_offset": 200,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 114625000,
        "duration_milliseconds": 725,
        "text_offset": 204,
        "word_length": 12,
        "text": "Christofides",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 122125000,
        "duration_milliseconds": 550,
        "text_offset": 217,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 127750000,
        "duration_milliseconds": 150,
        "text_offset": 227,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 129375000,
        "duration_milliseconds": 212,
        "text_offset": 230,
        "word_length": 1,
        "text": "O",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 132375000,
        "duration_milliseconds": 87,
        "text_offset": 231,
        "word_length": 1,
        "text": "(",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 133250000,
        "duration_milliseconds": 600,
        "text_offset": 232,
        "word_length": 3,
        "text": "n^3",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 139375000,
        "duration_milliseconds": 100,
        "text_offset": 236,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "if-we-take-a-look-at-the-time-complexity-of-the-dabb1f2e.mp3",
    "final_audio": "if-we-take-a-look-at-the-time-complexity-of-the-dabb1f2e.mp3"
  },
  {
    "input_text": "Now we go on with the next topic",
    "input_data": {
      "input_text": "Now we go on with the next topic",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we go on with the next topic</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we go on with the next topic</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 275,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3375000,
        "duration_milliseconds": 137,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5000000,
        "duration_milliseconds": 250,
        "text_offset": 7,
        "word_length": 2,
        "text": "go",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7625000,
        "duration_milliseconds": 175,
        "text_offset": 10,
        "word_length": 2,
        "text": "on",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9500000,
        "duration_milliseconds": 125,
        "text_offset": 13,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11000000,
        "duration_milliseconds": 87,
        "text_offset": 18,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12000000,
        "duration_milliseconds": 250,
        "text_offset": 22,
        "word_length": 4,
        "text": "next",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14625000,
        "duration_milliseconds": 437,
        "text_offset": 27,
        "word_length": 5,
        "text": "topic",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "now-we-go-on-with-the-next-topic-b4db96e8.mp3",
    "final_audio": "now-we-go-on-with-the-next-topic-b4db96e8.mp3"
  },
  {
    "input_text": "There are symmetrical and asymmetrical TSPs.",
    "input_data": {
      "input_text": "There are symmetrical and asymmetrical TSPs.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">There are symmetrical and asymmetrical TSPs.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">There are symmetrical and asymmetrical TSPs.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 212,
        "text_offset": 0,
        "word_length": 5,
        "text": "There",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2750000,
        "duration_milliseconds": 112,
        "text_offset": 6,
        "word_length": 3,
        "text": "are",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4125000,
        "duration_milliseconds": 675,
        "text_offset": 10,
        "word_length": 11,
        "text": "symmetrical",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11125000,
        "duration_milliseconds": 162,
        "text_offset": 22,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12875000,
        "duration_milliseconds": 775,
        "text_offset": 26,
        "word_length": 12,
        "text": "asymmetrical",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20875000,
        "duration_milliseconds": 900,
        "text_offset": 39,
        "word_length": 4,
        "text": "TSPs",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30125000,
        "duration_milliseconds": 100,
        "text_offset": 43,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "there-are-symmetrical-and-asymmetrical-tsps-c4eb97f5.mp3",
    "final_audio": "there-are-symmetrical-and-asymmetrical-tsps-c4eb97f5.mp3"
  },
  {
    "input_text": "First we will explain the symmetrical TSP",
    "input_data": {
      "input_text": "First we will explain the symmetrical TSP",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">First we will explain the symmetrical TSP</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">First we will explain the symmetrical TSP</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 400,
        "text_offset": 0,
        "word_length": 5,
        "text": "First",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4750000,
        "duration_milliseconds": 125,
        "text_offset": 6,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6250000,
        "duration_milliseconds": 137,
        "text_offset": 9,
        "word_length": 4,
        "text": "will",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7875000,
        "duration_milliseconds": 425,
        "text_offset": 14,
        "word_length": 7,
        "text": "explain",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12375000,
        "duration_milliseconds": 100,
        "text_offset": 22,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13500000,
        "duration_milliseconds": 650,
        "text_offset": 26,
        "word_length": 11,
        "text": "symmetrical",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20250000,
        "duration_milliseconds": 800,
        "text_offset": 38,
        "word_length": 3,
        "text": "TSP",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "first-we-will-explain-the-symmetrical-tsp-de54a032.mp3",
    "final_audio": "first-we-will-explain-the-symmetrical-tsp-de54a032.mp3"
  },
  {
    "input_text": "A TSP is called symmetrical, if the edges between two nodes have the same value in both directions. This means the way form one town to another would be exact the same in both directions. This isn't really accurate because of conditions of the landscape or construction sites.",
    "input_data": {
      "input_text": "A TSP is called symmetrical, if the edges between two nodes have the same value in both directions. This means the way form one town to another would be exact the same in both directions. This isn't really accurate because of conditions of the landscape or construction sites.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">A TSP is called symmetrical, if the edges between two nodes have the same value in both directions. This means the way form one town to another would be exact the same in both directions. This isn't really accurate because of conditions of the landscape or construction sites.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">A TSP is called symmetrical, if the edges between two nodes have the same value in both directions. This means the way form one town to another would be exact the same in both directions. This isn't really accurate because of conditions of the landscape or construction sites.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 137,
        "text_offset": 0,
        "word_length": 1,
        "text": "A",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2125000,
        "duration_milliseconds": 512,
        "text_offset": 2,
        "word_length": 3,
        "text": "TSP",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7500000,
        "duration_milliseconds": 125,
        "text_offset": 6,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 225,
        "text_offset": 9,
        "word_length": 6,
        "text": "called",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11375000,
        "duration_milliseconds": 625,
        "text_offset": 16,
        "word_length": 11,
        "text": "symmetrical",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 18500000,
        "duration_milliseconds": 100,
        "text_offset": 27,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 19500000,
        "duration_milliseconds": 100,
        "text_offset": 29,
        "word_length": 2,
        "text": "if",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20750000,
        "duration_milliseconds": 87,
        "text_offset": 32,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21875000,
        "duration_milliseconds": 312,
        "text_offset": 36,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 25250000,
        "duration_milliseconds": 350,
        "text_offset": 42,
        "word_length": 7,
        "text": "between",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29000000,
        "duration_milliseconds": 187,
        "text_offset": 50,
        "word_length": 3,
        "text": "two",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 31125000,
        "duration_milliseconds": 312,
        "text_offset": 54,
        "word_length": 5,
        "text": "nodes",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34500000,
        "duration_milliseconds": 125,
        "text_offset": 60,
        "word_length": 4,
        "text": "have",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36000000,
        "duration_milliseconds": 87,
        "text_offset": 65,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37000000,
        "duration_milliseconds": 275,
        "text_offset": 69,
        "word_length": 4,
        "text": "same",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40000000,
        "duration_milliseconds": 387,
        "text_offset": 74,
        "word_length": 5,
        "text": "value",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44125000,
        "duration_milliseconds": 100,
        "text_offset": 80,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 45375000,
        "duration_milliseconds": 212,
        "text_offset": 83,
        "word_length": 4,
        "text": "both",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 47625000,
        "duration_milliseconds": 650,
        "text_offset": 88,
        "word_length": 10,
        "text": "directions",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 54375000,
        "duration_milliseconds": 100,
        "text_offset": 98,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 63000000,
        "duration_milliseconds": 237,
        "text_offset": 100,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 65500000,
        "duration_milliseconds": 237,
        "text_offset": 105,
        "word_length": 5,
        "text": "means",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 68125000,
        "duration_milliseconds": 112,
        "text_offset": 111,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 69375000,
        "duration_milliseconds": 150,
        "text_offset": 115,
        "word_length": 3,
        "text": "way",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 71000000,
        "duration_milliseconds": 287,
        "text_offset": 119,
        "word_length": 4,
        "text": "form",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 74125000,
        "duration_milliseconds": 187,
        "text_offset": 124,
        "word_length": 3,
        "text": "one",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76250000,
        "duration_milliseconds": 275,
        "text_offset": 128,
        "word_length": 4,
        "text": "town",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 79250000,
        "duration_milliseconds": 125,
        "text_offset": 133,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 80750000,
        "duration_milliseconds": 362,
        "text_offset": 136,
        "word_length": 7,
        "text": "another",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 84625000,
        "duration_milliseconds": 112,
        "text_offset": 144,
        "word_length": 5,
        "text": "would",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 86000000,
        "duration_milliseconds": 125,
        "text_offset": 150,
        "word_length": 2,
        "text": "be",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 87500000,
        "duration_milliseconds": 412,
        "text_offset": 153,
        "word_length": 5,
        "text": "exact",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 91750000,
        "duration_milliseconds": 87,
        "text_offset": 159,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 92875000,
        "duration_milliseconds": 325,
        "text_offset": 163,
        "word_length": 4,
        "text": "same",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 96250000,
        "duration_milliseconds": 100,
        "text_offset": 168,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 97500000,
        "duration_milliseconds": 212,
        "text_offset": 171,
        "word_length": 4,
        "text": "both",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 99750000,
        "duration_milliseconds": 650,
        "text_offset": 176,
        "word_length": 10,
        "text": "directions",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 106500000,
        "duration_milliseconds": 100,
        "text_offset": 186,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 115000000,
        "duration_milliseconds": 212,
        "text_offset": 188,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 117375000,
        "duration_milliseconds": 250,
        "text_offset": 193,
        "word_length": 5,
        "text": "isn't",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 120000000,
        "duration_milliseconds": 287,
        "text_offset": 199,
        "word_length": 6,
        "text": "really",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 123000000,
        "duration_milliseconds": 437,
        "text_offset": 206,
        "word_length": 8,
        "text": "accurate",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 127500000,
        "duration_milliseconds": 312,
        "text_offset": 215,
        "word_length": 7,
        "text": "because",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 130875000,
        "duration_milliseconds": 75,
        "text_offset": 223,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 131875000,
        "duration_milliseconds": 550,
        "text_offset": 226,
        "word_length": 10,
        "text": "conditions",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 137625000,
        "duration_milliseconds": 75,
        "text_offset": 237,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 138625000,
        "duration_milliseconds": 100,
        "text_offset": 240,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 139875000,
        "duration_milliseconds": 500,
        "text_offset": 244,
        "word_length": 9,
        "text": "landscape",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 145000000,
        "duration_milliseconds": 125,
        "text_offset": 254,
        "word_length": 2,
        "text": "or",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 146375000,
        "duration_milliseconds": 637,
        "text_offset": 257,
        "word_length": 12,
        "text": "construction",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 153000000,
        "duration_milliseconds": 462,
        "text_offset": 270,
        "word_length": 5,
        "text": "sites",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 157750000,
        "duration_milliseconds": 100,
        "text_offset": 275,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "a-tsp-is-called-symmetrical-if-the-edges-between-97121736.mp3",
    "final_audio": "a-tsp-is-called-symmetrical-if-the-edges-between-97121736.mp3"
  },
  {
    "input_text": "Thats why there is also a asymmetrical TSP.",
    "input_data": {
      "input_text": "Thats why there is also a asymmetrical TSP.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Thats why there is also a asymmetrical TSP.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Thats why there is also a asymmetrical TSP.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 275,
        "text_offset": 0,
        "word_length": 5,
        "text": "Thats",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3375000,
        "duration_milliseconds": 137,
        "text_offset": 6,
        "word_length": 3,
        "text": "why",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4875000,
        "duration_milliseconds": 187,
        "text_offset": 10,
        "word_length": 5,
        "text": "there",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7000000,
        "duration_milliseconds": 125,
        "text_offset": 16,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8500000,
        "duration_milliseconds": 275,
        "text_offset": 19,
        "word_length": 4,
        "text": "also",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11500000,
        "duration_milliseconds": 87,
        "text_offset": 24,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12500000,
        "duration_milliseconds": 775,
        "text_offset": 26,
        "word_length": 12,
        "text": "asymmetrical",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20500000,
        "duration_milliseconds": 762,
        "text_offset": 39,
        "word_length": 3,
        "text": "TSP",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28375000,
        "duration_milliseconds": 100,
        "text_offset": 42,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "thats-why-there-is-also-a-asymmetrical-tsp-62980a24.mp3",
    "final_audio": "thats-why-there-is-also-a-asymmetrical-tsp-62980a24.mp3"
  },
  {
    "input_text": "The TSP is called asymmetrical if there are two edges between every node and they don't have the same weight. As you can see the graph is then directed. This is way more accurate to the real world, but this is also twice as complex to solve then the symmetrical. This is why we only observe symmetrical TSPs in the following.",
    "input_data": {
      "input_text": "The TSP is called asymmetrical if there are two edges between every node and they don't have the same weight. As you can see the graph is then directed. This is way more accurate to the real world, but this is also twice as complex to solve then the symmetrical. This is why we only observe symmetrical TSPs in the following.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">The TSP is called asymmetrical if there are two edges between every node and they don't have the same weight. As you can see the graph is then directed. This is way more accurate to the real world, but this is also twice as complex to solve then the symmetrical. This is why we only observe symmetrical TSPs in the following.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">The TSP is called asymmetrical if there are two edges between every node and they don't have the same weight. As you can see the graph is then directed. This is way more accurate to the real world, but this is also twice as complex to solve then the symmetrical. This is why we only observe symmetrical TSPs in the following.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 137,
        "text_offset": 0,
        "word_length": 3,
        "text": "The",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2125000,
        "duration_milliseconds": 500,
        "text_offset": 4,
        "word_length": 3,
        "text": "TSP",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7375000,
        "duration_milliseconds": 125,
        "text_offset": 8,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8750000,
        "duration_milliseconds": 262,
        "text_offset": 11,
        "word_length": 6,
        "text": "called",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11625000,
        "duration_milliseconds": 737,
        "text_offset": 18,
        "word_length": 12,
        "text": "asymmetrical",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19250000,
        "duration_milliseconds": 100,
        "text_offset": 31,
        "word_length": 2,
        "text": "if",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20375000,
        "duration_milliseconds": 150,
        "text_offset": 34,
        "word_length": 5,
        "text": "there",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22000000,
        "duration_milliseconds": 100,
        "text_offset": 40,
        "word_length": 3,
        "text": "are",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23125000,
        "duration_milliseconds": 225,
        "text_offset": 44,
        "word_length": 3,
        "text": "two",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 25625000,
        "duration_milliseconds": 300,
        "text_offset": 48,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28875000,
        "duration_milliseconds": 350,
        "text_offset": 54,
        "word_length": 7,
        "text": "between",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32625000,
        "duration_milliseconds": 225,
        "text_offset": 62,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35125000,
        "duration_milliseconds": 312,
        "text_offset": 68,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 38375000,
        "duration_milliseconds": 100,
        "text_offset": 73,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39625000,
        "duration_milliseconds": 100,
        "text_offset": 77,
        "word_length": 4,
        "text": "they",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40750000,
        "duration_milliseconds": 187,
        "text_offset": 82,
        "word_length": 5,
        "text": "don't",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 42875000,
        "duration_milliseconds": 162,
        "text_offset": 88,
        "word_length": 4,
        "text": "have",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44750000,
        "duration_milliseconds": 100,
        "text_offset": 93,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 45875000,
        "duration_milliseconds": 262,
        "text_offset": 97,
        "word_length": 4,
        "text": "same",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 48625000,
        "duration_milliseconds": 350,
        "text_offset": 102,
        "word_length": 6,
        "text": "weight",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 52250000,
        "duration_milliseconds": 100,
        "text_offset": 108,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 60875000,
        "duration_milliseconds": 212,
        "text_offset": 110,
        "word_length": 2,
        "text": "As",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 63250000,
        "duration_milliseconds": 112,
        "text_offset": 113,
        "word_length": 3,
        "text": "you",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 64625000,
        "duration_milliseconds": 162,
        "text_offset": 117,
        "word_length": 3,
        "text": "can",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 66500000,
        "duration_milliseconds": 200,
        "text_offset": 121,
        "word_length": 3,
        "text": "see",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 68750000,
        "duration_milliseconds": 125,
        "text_offset": 125,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 70250000,
        "duration_milliseconds": 362,
        "text_offset": 129,
        "word_length": 5,
        "text": "graph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 74000000,
        "duration_milliseconds": 125,
        "text_offset": 135,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 75500000,
        "duration_milliseconds": 175,
        "text_offset": 138,
        "word_length": 4,
        "text": "then",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 77375000,
        "duration_milliseconds": 575,
        "text_offset": 143,
        "word_length": 8,
        "text": "directed",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 83375000,
        "duration_milliseconds": 100,
        "text_offset": 151,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 91875000,
        "duration_milliseconds": 212,
        "text_offset": 153,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 94250000,
        "duration_milliseconds": 112,
        "text_offset": 158,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 95625000,
        "duration_milliseconds": 175,
        "text_offset": 161,
        "word_length": 3,
        "text": "way",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 97500000,
        "duration_milliseconds": 262,
        "text_offset": 165,
        "word_length": 4,
        "text": "more",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 100250000,
        "duration_milliseconds": 375,
        "text_offset": 170,
        "word_length": 8,
        "text": "accurate",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 104250000,
        "duration_milliseconds": 87,
        "text_offset": 179,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 105375000,
        "duration_milliseconds": 100,
        "text_offset": 182,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 106500000,
        "duration_milliseconds": 250,
        "text_offset": 186,
        "word_length": 4,
        "text": "real",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 109250000,
        "duration_milliseconds": 275,
        "text_offset": 191,
        "word_length": 5,
        "text": "world",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 112875000,
        "duration_milliseconds": 100,
        "text_offset": 196,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 113875000,
        "duration_milliseconds": 137,
        "text_offset": 198,
        "word_length": 3,
        "text": "but",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 115500000,
        "duration_milliseconds": 162,
        "text_offset": 202,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 117250000,
        "duration_milliseconds": 125,
        "text_offset": 207,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 118750000,
        "duration_milliseconds": 250,
        "text_offset": 210,
        "word_length": 4,
        "text": "also",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 121375000,
        "duration_milliseconds": 325,
        "text_offset": 215,
        "word_length": 5,
        "text": "twice",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 124875000,
        "duration_milliseconds": 112,
        "text_offset": 221,
        "word_length": 2,
        "text": "as",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 126250000,
        "duration_milliseconds": 475,
        "text_offset": 224,
        "word_length": 7,
        "text": "complex",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 131250000,
        "duration_milliseconds": 100,
        "text_offset": 232,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 132500000,
        "duration_milliseconds": 300,
        "text_offset": 235,
        "word_length": 5,
        "text": "solve",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 135750000,
        "duration_milliseconds": 137,
        "text_offset": 241,
        "word_length": 4,
        "text": "then",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 137375000,
        "duration_milliseconds": 87,
        "text_offset": 246,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 138375000,
        "duration_milliseconds": 662,
        "text_offset": 250,
        "word_length": 11,
        "text": "symmetrical",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 145125000,
        "duration_milliseconds": 100,
        "text_offset": 261,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 153750000,
        "duration_milliseconds": 237,
        "text_offset": 263,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 156375000,
        "duration_milliseconds": 112,
        "text_offset": 268,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 157750000,
        "duration_milliseconds": 162,
        "text_offset": 271,
        "word_length": 3,
        "text": "why",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 159625000,
        "duration_milliseconds": 162,
        "text_offset": 275,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 161500000,
        "duration_milliseconds": 275,
        "text_offset": 278,
        "word_length": 4,
        "text": "only",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 164500000,
        "duration_milliseconds": 387,
        "text_offset": 283,
        "word_length": 7,
        "text": "observe",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 168625000,
        "duration_milliseconds": 637,
        "text_offset": 291,
        "word_length": 11,
        "text": "symmetrical",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 175250000,
        "duration_milliseconds": 700,
        "text_offset": 303,
        "word_length": 4,
        "text": "TSPs",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 182500000,
        "duration_milliseconds": 75,
        "text_offset": 308,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 183500000,
        "duration_milliseconds": 87,
        "text_offset": 311,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 184625000,
        "duration_milliseconds": 512,
        "text_offset": 315,
        "word_length": 9,
        "text": "following",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 190000000,
        "duration_milliseconds": 100,
        "text_offset": 324,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "the-tsp-is-called-asymmetrical-if-there-are-two-0e27fdc3.mp3",
    "final_audio": "the-tsp-is-called-asymmetrical-if-there-are-two-0e27fdc3.mp3"
  },
  {
    "input_text": "now we go on with the next topic",
    "input_data": {
      "input_text": "now we go on with the next topic",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">now we go on with the next topic</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">now we go on with the next topic</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 275,
        "text_offset": 0,
        "word_length": 3,
        "text": "now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3375000,
        "duration_milliseconds": 137,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5000000,
        "duration_milliseconds": 250,
        "text_offset": 7,
        "word_length": 2,
        "text": "go",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7625000,
        "duration_milliseconds": 175,
        "text_offset": 10,
        "word_length": 2,
        "text": "on",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9500000,
        "duration_milliseconds": 125,
        "text_offset": 13,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11000000,
        "duration_milliseconds": 87,
        "text_offset": 18,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12000000,
        "duration_milliseconds": 250,
        "text_offset": 22,
        "word_length": 4,
        "text": "next",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14625000,
        "duration_milliseconds": 437,
        "text_offset": 27,
        "word_length": 5,
        "text": "topic",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "now-we-go-on-with-the-next-topic-a458bd79.mp3",
    "final_audio": "now-we-go-on-with-the-next-topic-a458bd79.mp3"
  },
  {
    "input_text": "We need to point out how good is our approximated solution compared to the optimum. In some business cases there is a treshold given by the supervisor so you don't need to know how near the solution is to the optimum but in a theroetic case we want to know this. As we know to determine the optimum is not economically sensible so we need to find an other value to measure our solution.",
    "input_data": {
      "input_text": "We need to point out how good is our approximated solution compared to the optimum. In some business cases there is a treshold given by the supervisor so you don't need to know how near the solution is to the optimum but in a theroetic case we want to know this. As we know to determine the optimum is not economically sensible so we need to find an other value to measure our solution.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We need to point out how good is our approximated solution compared to the optimum. In some business cases there is a treshold given by the supervisor so you don't need to know how near the solution is to the optimum but in a theroetic case we want to know this. As we know to determine the optimum is not economically sensible so we need to find an other value to measure our solution.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We need to point out how good is our approximated solution compared to the optimum. In some business cases there is a treshold given by the supervisor so you don't need to know how near the solution is to the optimum but in a theroetic case we want to know this. As we know to determine the optimum is not economically sensible so we need to find an other value to measure our solution.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 162,
        "text_offset": 0,
        "word_length": 2,
        "text": "We",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2375000,
        "duration_milliseconds": 150,
        "text_offset": 3,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4125000,
        "duration_milliseconds": 87,
        "text_offset": 8,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5250000,
        "duration_milliseconds": 237,
        "text_offset": 11,
        "word_length": 5,
        "text": "point",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7875000,
        "duration_milliseconds": 162,
        "text_offset": 17,
        "word_length": 3,
        "text": "out",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9750000,
        "duration_milliseconds": 150,
        "text_offset": 21,
        "word_length": 3,
        "text": "how",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11500000,
        "duration_milliseconds": 225,
        "text_offset": 25,
        "word_length": 4,
        "text": "good",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14000000,
        "duration_milliseconds": 137,
        "text_offset": 30,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15625000,
        "duration_milliseconds": 125,
        "text_offset": 33,
        "word_length": 3,
        "text": "our",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17000000,
        "duration_milliseconds": 725,
        "text_offset": 37,
        "word_length": 12,
        "text": "approximated",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24500000,
        "duration_milliseconds": 462,
        "text_offset": 50,
        "word_length": 8,
        "text": "solution",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29375000,
        "duration_milliseconds": 400,
        "text_offset": 59,
        "word_length": 8,
        "text": "compared",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33500000,
        "duration_milliseconds": 75,
        "text_offset": 68,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34500000,
        "duration_milliseconds": 125,
        "text_offset": 71,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36000000,
        "duration_milliseconds": 487,
        "text_offset": 75,
        "word_length": 7,
        "text": "optimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41125000,
        "duration_milliseconds": 100,
        "text_offset": 82,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 49750000,
        "duration_milliseconds": 187,
        "text_offset": 84,
        "word_length": 2,
        "text": "In",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 51875000,
        "duration_milliseconds": 225,
        "text_offset": 87,
        "word_length": 4,
        "text": "some",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 54375000,
        "duration_milliseconds": 375,
        "text_offset": 92,
        "word_length": 8,
        "text": "business",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58375000,
        "duration_milliseconds": 400,
        "text_offset": 101,
        "word_length": 5,
        "text": "cases",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 62625000,
        "duration_milliseconds": 162,
        "text_offset": 107,
        "word_length": 5,
        "text": "there",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 64375000,
        "duration_milliseconds": 100,
        "text_offset": 113,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 65625000,
        "duration_milliseconds": 62,
        "text_offset": 116,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 66500000,
        "duration_milliseconds": 475,
        "text_offset": 118,
        "word_length": 8,
        "text": "treshold",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 71500000,
        "duration_milliseconds": 287,
        "text_offset": 127,
        "word_length": 5,
        "text": "given",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 74625000,
        "duration_milliseconds": 112,
        "text_offset": 133,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 75875000,
        "duration_milliseconds": 100,
        "text_offset": 136,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 77125000,
        "duration_milliseconds": 700,
        "text_offset": 140,
        "word_length": 10,
        "text": "supervisor",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 84375000,
        "duration_milliseconds": 100,
        "text_offset": 151,
        "word_length": 2,
        "text": "so",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 85500000,
        "duration_milliseconds": 100,
        "text_offset": 154,
        "word_length": 3,
        "text": "you",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 86750000,
        "duration_milliseconds": 200,
        "text_offset": 158,
        "word_length": 5,
        "text": "don't",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 88875000,
        "duration_milliseconds": 137,
        "text_offset": 164,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 90375000,
        "duration_milliseconds": 75,
        "text_offset": 169,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 91250000,
        "duration_milliseconds": 150,
        "text_offset": 172,
        "word_length": 4,
        "text": "know",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 92875000,
        "duration_milliseconds": 150,
        "text_offset": 177,
        "word_length": 3,
        "text": "how",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 94625000,
        "duration_milliseconds": 212,
        "text_offset": 181,
        "word_length": 4,
        "text": "near",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 97000000,
        "duration_milliseconds": 100,
        "text_offset": 186,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 98125000,
        "duration_milliseconds": 437,
        "text_offset": 190,
        "word_length": 8,
        "text": "solution",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 102625000,
        "duration_milliseconds": 125,
        "text_offset": 199,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 104125000,
        "duration_milliseconds": 87,
        "text_offset": 202,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 105250000,
        "duration_milliseconds": 112,
        "text_offset": 205,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 106625000,
        "duration_milliseconds": 462,
        "text_offset": 209,
        "word_length": 7,
        "text": "optimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 111500000,
        "duration_milliseconds": 150,
        "text_offset": 217,
        "word_length": 3,
        "text": "but",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 113125000,
        "duration_milliseconds": 100,
        "text_offset": 221,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 114375000,
        "duration_milliseconds": 50,
        "text_offset": 224,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 115125000,
        "duration_milliseconds": 525,
        "text_offset": 226,
        "word_length": 9,
        "text": "theroetic",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 120625000,
        "duration_milliseconds": 287,
        "text_offset": 236,
        "word_length": 4,
        "text": "case",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 123625000,
        "duration_milliseconds": 100,
        "text_offset": 241,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 124750000,
        "duration_milliseconds": 200,
        "text_offset": 244,
        "word_length": 4,
        "text": "want",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 126875000,
        "duration_milliseconds": 62,
        "text_offset": 249,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 127625000,
        "duration_milliseconds": 162,
        "text_offset": 252,
        "word_length": 4,
        "text": "know",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 129375000,
        "duration_milliseconds": 337,
        "text_offset": 257,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 133000000,
        "duration_milliseconds": 100,
        "text_offset": 261,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 141625000,
        "duration_milliseconds": 200,
        "text_offset": 263,
        "word_length": 2,
        "text": "As",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 143875000,
        "duration_milliseconds": 112,
        "text_offset": 266,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 145250000,
        "duration_milliseconds": 150,
        "text_offset": 269,
        "word_length": 4,
        "text": "know",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 146875000,
        "duration_milliseconds": 100,
        "text_offset": 274,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 148000000,
        "duration_milliseconds": 462,
        "text_offset": 277,
        "word_length": 9,
        "text": "determine",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 152875000,
        "duration_milliseconds": 112,
        "text_offset": 287,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 154250000,
        "duration_milliseconds": 462,
        "text_offset": 291,
        "word_length": 7,
        "text": "optimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 159000000,
        "duration_milliseconds": 125,
        "text_offset": 299,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 160500000,
        "duration_milliseconds": 225,
        "text_offset": 302,
        "word_length": 3,
        "text": "not",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 162875000,
        "duration_milliseconds": 700,
        "text_offset": 306,
        "word_length": 12,
        "text": "economically",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 170125000,
        "duration_milliseconds": 550,
        "text_offset": 319,
        "word_length": 8,
        "text": "sensible",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 175875000,
        "duration_milliseconds": 112,
        "text_offset": 328,
        "word_length": 2,
        "text": "so",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 177250000,
        "duration_milliseconds": 100,
        "text_offset": 331,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 178500000,
        "duration_milliseconds": 150,
        "text_offset": 334,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 180125000,
        "duration_milliseconds": 75,
        "text_offset": 339,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 181000000,
        "duration_milliseconds": 262,
        "text_offset": 342,
        "word_length": 4,
        "text": "find",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 183750000,
        "duration_milliseconds": 100,
        "text_offset": 347,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 185000000,
        "duration_milliseconds": 237,
        "text_offset": 350,
        "word_length": 5,
        "text": "other",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 187625000,
        "duration_milliseconds": 362,
        "text_offset": 356,
        "word_length": 5,
        "text": "value",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 191500000,
        "duration_milliseconds": 100,
        "text_offset": 362,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 192625000,
        "duration_milliseconds": 325,
        "text_offset": 365,
        "word_length": 7,
        "text": "measure",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 196125000,
        "duration_milliseconds": 112,
        "text_offset": 373,
        "word_length": 3,
        "text": "our",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 197500000,
        "duration_milliseconds": 550,
        "text_offset": 377,
        "word_length": 8,
        "text": "solution",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 203250000,
        "duration_milliseconds": 100,
        "text_offset": 385,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "we-need-to-point-out-how-good-is-our-approximated-87735ef9.mp3",
    "final_audio": "we-need-to-point-out-how-good-is-our-approximated-87735ef9.mp3"
  },
  {
    "input_text": "So lets imagine we have these nodes as a tsp",
    "input_data": {
      "input_text": "So lets imagine we have these nodes as a tsp",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">So lets imagine we have these nodes as a tsp</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">So lets imagine we have these nodes as a tsp</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 212,
        "text_offset": 0,
        "word_length": 2,
        "text": "So",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2875000,
        "duration_milliseconds": 200,
        "text_offset": 3,
        "word_length": 4,
        "text": "lets",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5000000,
        "duration_milliseconds": 450,
        "text_offset": 8,
        "word_length": 7,
        "text": "imagine",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9750000,
        "duration_milliseconds": 125,
        "text_offset": 16,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11250000,
        "duration_milliseconds": 225,
        "text_offset": 19,
        "word_length": 4,
        "text": "have",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13750000,
        "duration_milliseconds": 187,
        "text_offset": 24,
        "word_length": 5,
        "text": "these",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15875000,
        "duration_milliseconds": 325,
        "text_offset": 30,
        "word_length": 5,
        "text": "nodes",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19375000,
        "duration_milliseconds": 125,
        "text_offset": 36,
        "word_length": 2,
        "text": "as",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20875000,
        "duration_milliseconds": 62,
        "text_offset": 39,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21750000,
        "duration_milliseconds": 737,
        "text_offset": 41,
        "word_length": 3,
        "text": "tsp",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "so-lets-imagine-we-have-these-nodes-as-a-tsp-784bbb3c.mp3",
    "final_audio": "so-lets-imagine-we-have-these-nodes-as-a-tsp-784bbb3c.mp3"
  },
  {
    "input_text": "and this is our approximated solution.",
    "input_data": {
      "input_text": "and this is our approximated solution.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">and this is our approximated solution.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">and this is our approximated solution.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 175,
        "text_offset": 0,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2500000,
        "duration_milliseconds": 225,
        "text_offset": 4,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5000000,
        "duration_milliseconds": 162,
        "text_offset": 9,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6750000,
        "duration_milliseconds": 175,
        "text_offset": 12,
        "word_length": 3,
        "text": "our",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8625000,
        "duration_milliseconds": 787,
        "text_offset": 16,
        "word_length": 12,
        "text": "approximated",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16750000,
        "duration_milliseconds": 600,
        "text_offset": 29,
        "word_length": 8,
        "text": "solution",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22875000,
        "duration_milliseconds": 100,
        "text_offset": 37,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "and-this-is-our-approximated-solution-2dd423c1.mp3",
    "final_audio": "and-this-is-our-approximated-solution-2dd423c1.mp3"
  },
  {
    "input_text": "We take a look at all the weights and sum them up.",
    "input_data": {
      "input_text": "We take a look at all the weights and sum them up.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We take a look at all the weights and sum them up.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We take a look at all the weights and sum them up.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 175,
        "text_offset": 0,
        "word_length": 2,
        "text": "We",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2375000,
        "duration_milliseconds": 200,
        "text_offset": 3,
        "word_length": 4,
        "text": "take",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4625000,
        "duration_milliseconds": 62,
        "text_offset": 8,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5375000,
        "duration_milliseconds": 237,
        "text_offset": 10,
        "word_length": 4,
        "text": "look",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7875000,
        "duration_milliseconds": 87,
        "text_offset": 15,
        "word_length": 2,
        "text": "at",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9000000,
        "duration_milliseconds": 150,
        "text_offset": 18,
        "word_length": 3,
        "text": "all",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10750000,
        "duration_milliseconds": 100,
        "text_offset": 22,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11875000,
        "duration_milliseconds": 312,
        "text_offset": 26,
        "word_length": 7,
        "text": "weights",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15125000,
        "duration_milliseconds": 112,
        "text_offset": 34,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16500000,
        "duration_milliseconds": 200,
        "text_offset": 38,
        "word_length": 3,
        "text": "sum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 18750000,
        "duration_milliseconds": 137,
        "text_offset": 42,
        "word_length": 4,
        "text": "them",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20250000,
        "duration_milliseconds": 262,
        "text_offset": 47,
        "word_length": 2,
        "text": "up",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23125000,
        "duration_milliseconds": 100,
        "text_offset": 49,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "we-take-a-look-at-all-the-weights-and-sum-them-up-b3d8f0d5.mp3",
    "final_audio": "we-take-a-look-at-all-the-weights-and-sum-them-up-b3d8f0d5.mp3"
  },
  {
    "input_text": "This is the value for our approximated solution.",
    "input_data": {
      "input_text": "This is the value for our approximated solution.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">This is the value for our approximated solution.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">This is the value for our approximated solution.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 275,
        "text_offset": 0,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3375000,
        "duration_milliseconds": 137,
        "text_offset": 5,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5000000,
        "duration_milliseconds": 100,
        "text_offset": 8,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6250000,
        "duration_milliseconds": 400,
        "text_offset": 12,
        "word_length": 5,
        "text": "value",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10500000,
        "duration_milliseconds": 200,
        "text_offset": 18,
        "word_length": 3,
        "text": "for",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12750000,
        "duration_milliseconds": 137,
        "text_offset": 22,
        "word_length": 3,
        "text": "our",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14250000,
        "duration_milliseconds": 787,
        "text_offset": 26,
        "word_length": 12,
        "text": "approximated",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22375000,
        "duration_milliseconds": 587,
        "text_offset": 39,
        "word_length": 8,
        "text": "solution",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28375000,
        "duration_milliseconds": 100,
        "text_offset": 47,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "this-is-the-value-for-our-approximated-solution-d7980c3a.mp3",
    "final_audio": "this-is-the-value-for-our-approximated-solution-d7980c3a.mp3"
  },
  {
    "input_text": "But now we still don't now how good this is compared to the optimum.",
    "input_data": {
      "input_text": "But now we still don't now how good this is compared to the optimum.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">But now we still don't now how good this is compared to the optimum.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">But now we still don't now how good this is compared to the optimum.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 175,
        "text_offset": 0,
        "word_length": 3,
        "text": "But",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2375000,
        "duration_milliseconds": 150,
        "text_offset": 4,
        "word_length": 3,
        "text": "now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4125000,
        "duration_milliseconds": 137,
        "text_offset": 8,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5750000,
        "duration_milliseconds": 262,
        "text_offset": 11,
        "word_length": 5,
        "text": "still",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8500000,
        "duration_milliseconds": 187,
        "text_offset": 17,
        "word_length": 5,
        "text": "don't",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10500000,
        "duration_milliseconds": 162,
        "text_offset": 23,
        "word_length": 3,
        "text": "now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12250000,
        "duration_milliseconds": 187,
        "text_offset": 27,
        "word_length": 3,
        "text": "how",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14375000,
        "duration_milliseconds": 225,
        "text_offset": 31,
        "word_length": 4,
        "text": "good",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16875000,
        "duration_milliseconds": 175,
        "text_offset": 36,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 18750000,
        "duration_milliseconds": 125,
        "text_offset": 41,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20125000,
        "duration_milliseconds": 412,
        "text_offset": 44,
        "word_length": 8,
        "text": "compared",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24375000,
        "duration_milliseconds": 75,
        "text_offset": 53,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 25375000,
        "duration_milliseconds": 112,
        "text_offset": 56,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26750000,
        "duration_milliseconds": 487,
        "text_offset": 60,
        "word_length": 7,
        "text": "optimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 31750000,
        "duration_milliseconds": 100,
        "text_offset": 67,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "but-now-we-still-don-t-now-how-good-this-is-5a8fe60a.mp3",
    "final_audio": "but-now-we-still-don-t-now-how-good-this-is-5a8fe60a.mp3"
  },
  {
    "input_text": "For this we use the lower bound.",
    "input_data": {
      "input_text": "For this we use the lower bound.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">For this we use the lower bound.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">For this we use the lower bound.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 212,
        "text_offset": 0,
        "word_length": 3,
        "text": "For",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2875000,
        "duration_milliseconds": 212,
        "text_offset": 4,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5125000,
        "duration_milliseconds": 125,
        "text_offset": 9,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6625000,
        "duration_milliseconds": 262,
        "text_offset": 12,
        "word_length": 3,
        "text": "use",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9500000,
        "duration_milliseconds": 112,
        "text_offset": 16,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10875000,
        "duration_milliseconds": 312,
        "text_offset": 20,
        "word_length": 5,
        "text": "lower",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14250000,
        "duration_milliseconds": 475,
        "text_offset": 26,
        "word_length": 5,
        "text": "bound",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19250000,
        "duration_milliseconds": 100,
        "text_offset": 31,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "for-this-we-use-the-lower-bound-1c87d913.mp3",
    "final_audio": "for-this-we-use-the-lower-bound-1c87d913.mp3"
  },
  {
    "input_text": "The lower bound is the value of the sum of every weight of every edge in a minimum spanning tree.",
    "input_data": {
      "input_text": "The lower bound is the value of the sum of every weight of every edge in a minimum spanning tree.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">The lower bound is the value of the sum of every weight of every edge in a minimum spanning tree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">The lower bound is the value of the sum of every weight of every edge in a minimum spanning tree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 137,
        "text_offset": 0,
        "word_length": 3,
        "text": "The",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2125000,
        "duration_milliseconds": 300,
        "text_offset": 4,
        "word_length": 5,
        "text": "lower",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5375000,
        "duration_milliseconds": 337,
        "text_offset": 10,
        "word_length": 5,
        "text": "bound",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 112,
        "text_offset": 16,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10250000,
        "duration_milliseconds": 100,
        "text_offset": 19,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11500000,
        "duration_milliseconds": 375,
        "text_offset": 23,
        "word_length": 5,
        "text": "value",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15500000,
        "duration_milliseconds": 87,
        "text_offset": 29,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16625000,
        "duration_milliseconds": 100,
        "text_offset": 32,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17875000,
        "duration_milliseconds": 200,
        "text_offset": 36,
        "word_length": 3,
        "text": "sum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20000000,
        "duration_milliseconds": 100,
        "text_offset": 40,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21250000,
        "duration_milliseconds": 237,
        "text_offset": 43,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23875000,
        "duration_milliseconds": 212,
        "text_offset": 49,
        "word_length": 6,
        "text": "weight",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26125000,
        "duration_milliseconds": 87,
        "text_offset": 56,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27250000,
        "duration_milliseconds": 250,
        "text_offset": 59,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29875000,
        "duration_milliseconds": 225,
        "text_offset": 65,
        "word_length": 4,
        "text": "edge",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32375000,
        "duration_milliseconds": 100,
        "text_offset": 70,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33625000,
        "duration_milliseconds": 50,
        "text_offset": 73,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34375000,
        "duration_milliseconds": 375,
        "text_offset": 75,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 38375000,
        "duration_milliseconds": 375,
        "text_offset": 83,
        "word_length": 8,
        "text": "spanning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 42250000,
        "duration_milliseconds": 337,
        "text_offset": 92,
        "word_length": 4,
        "text": "tree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 45875000,
        "duration_milliseconds": 100,
        "text_offset": 96,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "the-lower-bound-is-the-value-of-the-sum-of-every-805df4f2.mp3",
    "final_audio": "the-lower-bound-is-the-value-of-the-sum-of-every-805df4f2.mp3"
  },
  {
    "input_text": "So imagine we have these nodes from before.",
    "input_data": {
      "input_text": "So imagine we have these nodes from before.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">So imagine we have these nodes from before.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">So imagine we have these nodes from before.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 250,
        "text_offset": 0,
        "word_length": 2,
        "text": "So",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3250000,
        "duration_milliseconds": 450,
        "text_offset": 3,
        "word_length": 7,
        "text": "imagine",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8000000,
        "duration_milliseconds": 125,
        "text_offset": 11,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9500000,
        "duration_milliseconds": 212,
        "text_offset": 14,
        "word_length": 4,
        "text": "have",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11875000,
        "duration_milliseconds": 187,
        "text_offset": 19,
        "word_length": 5,
        "text": "these",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14000000,
        "duration_milliseconds": 287,
        "text_offset": 25,
        "word_length": 5,
        "text": "nodes",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17125000,
        "duration_milliseconds": 175,
        "text_offset": 31,
        "word_length": 4,
        "text": "from",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19000000,
        "duration_milliseconds": 562,
        "text_offset": 36,
        "word_length": 6,
        "text": "before",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24875000,
        "duration_milliseconds": 100,
        "text_offset": 42,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "so-imagine-we-have-these-nodes-from-before-a406d02c.mp3",
    "final_audio": "so-imagine-we-have-these-nodes-from-before-a406d02c.mp3"
  },
  {
    "input_text": "We add the edges and their weights to the nodes so we get our minimal spanning tree.",
    "input_data": {
      "input_text": "We add the edges and their weights to the nodes so we get our minimal spanning tree.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We add the edges and their weights to the nodes so we get our minimal spanning tree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We add the edges and their weights to the nodes so we get our minimal spanning tree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 200,
        "text_offset": 0,
        "word_length": 2,
        "text": "We",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2750000,
        "duration_milliseconds": 175,
        "text_offset": 3,
        "word_length": 3,
        "text": "add",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4750000,
        "duration_milliseconds": 100,
        "text_offset": 7,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6000000,
        "duration_milliseconds": 387,
        "text_offset": 11,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10125000,
        "duration_milliseconds": 87,
        "text_offset": 17,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11250000,
        "duration_milliseconds": 150,
        "text_offset": 21,
        "word_length": 5,
        "text": "their",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13000000,
        "duration_milliseconds": 237,
        "text_offset": 27,
        "word_length": 7,
        "text": "weights",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15500000,
        "duration_milliseconds": 87,
        "text_offset": 35,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16625000,
        "duration_milliseconds": 100,
        "text_offset": 38,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17750000,
        "duration_milliseconds": 325,
        "text_offset": 42,
        "word_length": 5,
        "text": "nodes",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21250000,
        "duration_milliseconds": 112,
        "text_offset": 48,
        "word_length": 2,
        "text": "so",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22625000,
        "duration_milliseconds": 125,
        "text_offset": 51,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24000000,
        "duration_milliseconds": 187,
        "text_offset": 54,
        "word_length": 3,
        "text": "get",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26125000,
        "duration_milliseconds": 112,
        "text_offset": 58,
        "word_length": 3,
        "text": "our",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27375000,
        "duration_milliseconds": 362,
        "text_offset": 62,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 31250000,
        "duration_milliseconds": 400,
        "text_offset": 70,
        "word_length": 8,
        "text": "spanning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35500000,
        "duration_milliseconds": 337,
        "text_offset": 79,
        "word_length": 4,
        "text": "tree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39125000,
        "duration_milliseconds": 100,
        "text_offset": 83,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "we-add-the-edges-and-their-weights-to-the-nodes-so-87ad4e09.mp3",
    "final_audio": "we-add-the-edges-and-their-weights-to-the-nodes-so-87ad4e09.mp3"
  },
  {
    "input_text": "We take again a look at all the weights and sum them up.",
    "input_data": {
      "input_text": "We take again a look at all the weights and sum them up.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We take again a look at all the weights and sum them up.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We take again a look at all the weights and sum them up.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 175,
        "text_offset": 0,
        "word_length": 2,
        "text": "We",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2500000,
        "duration_milliseconds": 200,
        "text_offset": 3,
        "word_length": 4,
        "text": "take",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4625000,
        "duration_milliseconds": 275,
        "text_offset": 8,
        "word_length": 5,
        "text": "again",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7625000,
        "duration_milliseconds": 62,
        "text_offset": 14,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8500000,
        "duration_milliseconds": 212,
        "text_offset": 16,
        "word_length": 4,
        "text": "look",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10875000,
        "duration_milliseconds": 87,
        "text_offset": 21,
        "word_length": 2,
        "text": "at",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12000000,
        "duration_milliseconds": 137,
        "text_offset": 24,
        "word_length": 3,
        "text": "all",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13625000,
        "duration_milliseconds": 100,
        "text_offset": 28,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14750000,
        "duration_milliseconds": 312,
        "text_offset": 32,
        "word_length": 7,
        "text": "weights",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 18000000,
        "duration_milliseconds": 112,
        "text_offset": 40,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19375000,
        "duration_milliseconds": 200,
        "text_offset": 44,
        "word_length": 3,
        "text": "sum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21625000,
        "duration_milliseconds": 137,
        "text_offset": 48,
        "word_length": 4,
        "text": "them",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23125000,
        "duration_milliseconds": 262,
        "text_offset": 53,
        "word_length": 2,
        "text": "up",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26000000,
        "duration_milliseconds": 100,
        "text_offset": 55,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "we-take-again-a-look-at-all-the-weights-and-sum-872dc865.mp3",
    "final_audio": "we-take-again-a-look-at-all-the-weights-and-sum-872dc865.mp3"
  },
  {
    "input_text": "This is the value of our lower bound.",
    "input_data": {
      "input_text": "This is the value of our lower bound.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">This is the value of our lower bound.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">This is the value of our lower bound.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 275,
        "text_offset": 0,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3375000,
        "duration_milliseconds": 125,
        "text_offset": 5,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4875000,
        "duration_milliseconds": 100,
        "text_offset": 8,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6000000,
        "duration_milliseconds": 425,
        "text_offset": 12,
        "word_length": 5,
        "text": "value",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10500000,
        "duration_milliseconds": 112,
        "text_offset": 18,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11875000,
        "duration_milliseconds": 150,
        "text_offset": 21,
        "word_length": 3,
        "text": "our",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13625000,
        "duration_milliseconds": 325,
        "text_offset": 25,
        "word_length": 5,
        "text": "lower",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17125000,
        "duration_milliseconds": 462,
        "text_offset": 31,
        "word_length": 5,
        "text": "bound",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22000000,
        "duration_milliseconds": 100,
        "text_offset": 36,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "this-is-the-value-of-our-lower-bound-333b1923.mp3",
    "final_audio": "this-is-the-value-of-our-lower-bound-333b1923.mp3"
  },
  {
    "input_text": "Now we have a value which we can compare to our approximated solution and we know how good it is!",
    "input_data": {
      "input_text": "Now we have a value which we can compare to our approximated solution and we know how good it is!",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we have a value which we can compare to our approximated solution and we know how good it is!</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we have a value which we can compare to our approximated solution and we know how good it is!</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 237,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3000000,
        "duration_milliseconds": 112,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4375000,
        "duration_milliseconds": 150,
        "text_offset": 7,
        "word_length": 4,
        "text": "have",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6000000,
        "duration_milliseconds": 62,
        "text_offset": 12,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6875000,
        "duration_milliseconds": 387,
        "text_offset": 14,
        "word_length": 5,
        "text": "value",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11000000,
        "duration_milliseconds": 175,
        "text_offset": 20,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12875000,
        "duration_milliseconds": 125,
        "text_offset": 26,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14375000,
        "duration_milliseconds": 150,
        "text_offset": 29,
        "word_length": 3,
        "text": "can",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16125000,
        "duration_milliseconds": 375,
        "text_offset": 33,
        "word_length": 7,
        "text": "compare",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20125000,
        "duration_milliseconds": 125,
        "text_offset": 41,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21625000,
        "duration_milliseconds": 137,
        "text_offset": 44,
        "word_length": 3,
        "text": "our",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23125000,
        "duration_milliseconds": 700,
        "text_offset": 48,
        "word_length": 12,
        "text": "approximated",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30375000,
        "duration_milliseconds": 450,
        "text_offset": 61,
        "word_length": 8,
        "text": "solution",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35125000,
        "duration_milliseconds": 100,
        "text_offset": 70,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36375000,
        "duration_milliseconds": 112,
        "text_offset": 74,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37750000,
        "duration_milliseconds": 162,
        "text_offset": 77,
        "word_length": 4,
        "text": "know",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39500000,
        "duration_milliseconds": 162,
        "text_offset": 82,
        "word_length": 3,
        "text": "how",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41375000,
        "duration_milliseconds": 162,
        "text_offset": 86,
        "word_length": 4,
        "text": "good",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 43250000,
        "duration_milliseconds": 87,
        "text_offset": 91,
        "word_length": 2,
        "text": "it",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44375000,
        "duration_milliseconds": 325,
        "text_offset": 94,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 47875000,
        "duration_milliseconds": 100,
        "text_offset": 96,
        "word_length": 1,
        "text": "!",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "now-we-have-a-value-which-we-can-compare-to-our-f3fc8475.mp3",
    "final_audio": "now-we-have-a-value-which-we-can-compare-to-our-f3fc8475.mp3"
  },
  {
    "input_text": "In the following we will explain the christofides algorithm.",
    "input_data": {
      "input_text": "In the following we will explain the christofides algorithm.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">In the following we will explain the christofides algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">In the following we will explain the christofides algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 175,
        "text_offset": 0,
        "word_length": 2,
        "text": "In",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2375000,
        "duration_milliseconds": 100,
        "text_offset": 3,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3625000,
        "duration_milliseconds": 450,
        "text_offset": 7,
        "word_length": 9,
        "text": "following",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8375000,
        "duration_milliseconds": 125,
        "text_offset": 17,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9875000,
        "duration_milliseconds": 137,
        "text_offset": 20,
        "word_length": 4,
        "text": "will",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11500000,
        "duration_milliseconds": 412,
        "text_offset": 25,
        "word_length": 7,
        "text": "explain",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15875000,
        "duration_milliseconds": 112,
        "text_offset": 33,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17250000,
        "duration_milliseconds": 875,
        "text_offset": 37,
        "word_length": 12,
        "text": "christofides",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26250000,
        "duration_milliseconds": 650,
        "text_offset": 50,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32875000,
        "duration_milliseconds": 100,
        "text_offset": 59,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "in-the-following-we-will-explain-the-christofides-94a11300.mp3",
    "final_audio": "in-the-following-we-will-explain-the-christofides-94a11300.mp3"
  },
  {
    "input_text": "This is an approximated algorithm to solve the TSP with a O(n^3) complexity. This algorithm guarantees a solution that is at most fifthy percent longer than the optimal round trip.",
    "input_data": {
      "input_text": "This is an approximated algorithm to solve the TSP with a O(n^3) complexity. This algorithm guarantees a solution that is at most fifthy percent longer than the optimal round trip.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">This is an approximated algorithm to solve the TSP with a O(n^3) complexity. This algorithm guarantees a solution that is at most fifthy percent longer than the optimal round trip.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">This is an approximated algorithm to solve the TSP with a O(n^3) complexity. This algorithm guarantees a solution that is at most fifthy percent longer than the optimal round trip.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 225,
        "text_offset": 0,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3000000,
        "duration_milliseconds": 100,
        "text_offset": 5,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4250000,
        "duration_milliseconds": 87,
        "text_offset": 8,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5375000,
        "duration_milliseconds": 762,
        "text_offset": 11,
        "word_length": 12,
        "text": "approximated",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13250000,
        "duration_milliseconds": 550,
        "text_offset": 24,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19000000,
        "duration_milliseconds": 100,
        "text_offset": 34,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20125000,
        "duration_milliseconds": 312,
        "text_offset": 37,
        "word_length": 5,
        "text": "solve",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23500000,
        "duration_milliseconds": 100,
        "text_offset": 43,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24625000,
        "duration_milliseconds": 562,
        "text_offset": 47,
        "word_length": 3,
        "text": "TSP",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30375000,
        "duration_milliseconds": 150,
        "text_offset": 51,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32125000,
        "duration_milliseconds": 100,
        "text_offset": 56,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33375000,
        "duration_milliseconds": 237,
        "text_offset": 58,
        "word_length": 1,
        "text": "O",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36625000,
        "duration_milliseconds": 100,
        "text_offset": 59,
        "word_length": 1,
        "text": "(",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 37625000,
        "duration_milliseconds": 587,
        "text_offset": 60,
        "word_length": 3,
        "text": "n^3",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44375000,
        "duration_milliseconds": 25,
        "text_offset": 63,
        "word_length": 1,
        "text": ")",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 44750000,
        "duration_milliseconds": 800,
        "text_offset": 65,
        "word_length": 10,
        "text": "complexity",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 53000000,
        "duration_milliseconds": 100,
        "text_offset": 75,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 61625000,
        "duration_milliseconds": 225,
        "text_offset": 77,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 64125000,
        "duration_milliseconds": 562,
        "text_offset": 82,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 70000000,
        "duration_milliseconds": 525,
        "text_offset": 92,
        "word_length": 10,
        "text": "guarantees",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 75500000,
        "duration_milliseconds": 62,
        "text_offset": 103,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76375000,
        "duration_milliseconds": 475,
        "text_offset": 105,
        "word_length": 8,
        "text": "solution",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 81375000,
        "duration_milliseconds": 125,
        "text_offset": 114,
        "word_length": 4,
        "text": "that",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 82750000,
        "duration_milliseconds": 112,
        "text_offset": 119,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 84125000,
        "duration_milliseconds": 100,
        "text_offset": 122,
        "word_length": 2,
        "text": "at",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 85375000,
        "duration_milliseconds": 275,
        "text_offset": 125,
        "word_length": 4,
        "text": "most",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 88375000,
        "duration_milliseconds": 300,
        "text_offset": 130,
        "word_length": 6,
        "text": "fifthy",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 91625000,
        "duration_milliseconds": 425,
        "text_offset": 137,
        "word_length": 7,
        "text": "percent",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 96000000,
        "duration_milliseconds": 337,
        "text_offset": 145,
        "word_length": 6,
        "text": "longer",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 99500000,
        "duration_milliseconds": 125,
        "text_offset": 152,
        "word_length": 4,
        "text": "than",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 101000000,
        "duration_milliseconds": 112,
        "text_offset": 157,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 102375000,
        "duration_milliseconds": 437,
        "text_offset": 161,
        "word_length": 7,
        "text": "optimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 106875000,
        "duration_milliseconds": 225,
        "text_offset": 169,
        "word_length": 5,
        "text": "round",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 109250000,
        "duration_milliseconds": 312,
        "text_offset": 175,
        "word_length": 4,
        "text": "trip",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 112500000,
        "duration_milliseconds": 100,
        "text_offset": 179,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "this-is-an-approximated-algorithm-to-solve-the-tsp-429c5ccc.mp3",
    "final_audio": "this-is-an-approximated-algorithm-to-solve-the-tsp-429c5ccc.mp3"
  },
  {
    "input_text": "First we will create a minimal spanning tree with every node by using the algrithm of Prim.",
    "input_data": {
      "input_text": "First we will create a minimal spanning tree with every node by using the algrithm of Prim.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">First we will create a minimal spanning tree with every node by using the algrithm of Prim.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">First we will create a minimal spanning tree with every node by using the algrithm of Prim.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 375,
        "text_offset": 0,
        "word_length": 5,
        "text": "First",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4500000,
        "duration_milliseconds": 112,
        "text_offset": 6,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5750000,
        "duration_milliseconds": 137,
        "text_offset": 9,
        "word_length": 4,
        "text": "will",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7375000,
        "duration_milliseconds": 312,
        "text_offset": 14,
        "word_length": 6,
        "text": "create",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10750000,
        "duration_milliseconds": 50,
        "text_offset": 21,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11375000,
        "duration_milliseconds": 375,
        "text_offset": 23,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15375000,
        "duration_milliseconds": 387,
        "text_offset": 31,
        "word_length": 8,
        "text": "spanning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19375000,
        "duration_milliseconds": 212,
        "text_offset": 40,
        "word_length": 4,
        "text": "tree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21625000,
        "duration_milliseconds": 187,
        "text_offset": 45,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23750000,
        "duration_milliseconds": 225,
        "text_offset": 50,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26250000,
        "duration_milliseconds": 275,
        "text_offset": 56,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29250000,
        "duration_milliseconds": 112,
        "text_offset": 61,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30625000,
        "duration_milliseconds": 362,
        "text_offset": 64,
        "word_length": 5,
        "text": "using",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34500000,
        "duration_milliseconds": 112,
        "text_offset": 70,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35875000,
        "duration_milliseconds": 475,
        "text_offset": 74,
        "word_length": 8,
        "text": "algrithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40875000,
        "duration_milliseconds": 112,
        "text_offset": 83,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 42250000,
        "duration_milliseconds": 375,
        "text_offset": 86,
        "word_length": 4,
        "text": "Prim",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 46250000,
        "duration_milliseconds": 100,
        "text_offset": 90,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "first-we-will-create-a-minimal-spanning-tree-with-a9ca7eef.mp3",
    "final_audio": "first-we-will-create-a-minimal-spanning-tree-with-a9ca7eef.mp3"
  },
  {
    "input_text": "Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom",
    "input_data": {
      "input_text": "Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 200,
        "text_offset": 0,
        "word_length": 4,
        "text": "Then",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2750000,
        "duration_milliseconds": 112,
        "text_offset": 5,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4125000,
        "duration_milliseconds": 250,
        "text_offset": 8,
        "word_length": 6,
        "text": "search",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6875000,
        "duration_milliseconds": 175,
        "text_offset": 15,
        "word_length": 3,
        "text": "for",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 212,
        "text_offset": 19,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11250000,
        "duration_milliseconds": 212,
        "text_offset": 25,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13500000,
        "duration_milliseconds": 62,
        "text_offset": 30,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14375000,
        "duration_milliseconds": 100,
        "text_offset": 33,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15625000,
        "duration_milliseconds": 312,
        "text_offset": 37,
        "word_length": 5,
        "text": "graph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19000000,
        "duration_milliseconds": 137,
        "text_offset": 43,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20625000,
        "duration_milliseconds": 87,
        "text_offset": 48,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21750000,
        "duration_milliseconds": 162,
        "text_offset": 51,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23500000,
        "duration_milliseconds": 362,
        "text_offset": 55,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28125000,
        "duration_milliseconds": 225,
        "text_offset": 61,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 30625000,
        "duration_milliseconds": 287,
        "text_offset": 63,
        "word_length": 7,
        "text": "meaning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33750000,
        "duration_milliseconds": 87,
        "text_offset": 71,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34750000,
        "duration_milliseconds": 200,
        "text_offset": 74,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37000000,
        "duration_milliseconds": 312,
        "text_offset": 78,
        "word_length": 6,
        "text": "number",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40250000,
        "duration_milliseconds": 75,
        "text_offset": 85,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41250000,
        "duration_milliseconds": 300,
        "text_offset": 88,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44500000,
        "duration_milliseconds": 125,
        "text_offset": 94,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 46000000,
        "duration_milliseconds": 362,
        "text_offset": 97,
        "word_length": 5,
        "text": "using",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 49875000,
        "duration_milliseconds": 112,
        "text_offset": 103,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 51250000,
        "duration_milliseconds": 587,
        "text_offset": 107,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 57375000,
        "duration_milliseconds": 112,
        "text_offset": 117,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58625000,
        "duration_milliseconds": 475,
        "text_offset": 120,
        "word_length": 7,
        "text": "Blossom",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "then-we-search-for-every-node-in-the-graph-with-an-cd2fe15a.mp3",
    "final_audio": "then-we-search-for-every-node-in-the-graph-with-an-cd2fe15a.mp3"
  },
  {
    "input_text": "After finding all the nodes with an odd degree we need to find a minimum perfect matching in the subgraph consisting only of the odd degree vertices. A perfect matching means every vertex is paired, and minimal means the sum of the lengths of the edges in the pairing is minimized.",
    "input_data": {
      "input_text": "After finding all the nodes with an odd degree we need to find a minimum perfect matching in the subgraph consisting only of the odd degree vertices. A perfect matching means every vertex is paired, and minimal means the sum of the lengths of the edges in the pairing is minimized.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">After finding all the nodes with an odd degree we need to find a minimum perfect matching in the subgraph consisting only of the odd degree vertices. A perfect matching means every vertex is paired, and minimal means the sum of the lengths of the edges in the pairing is minimized.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">After finding all the nodes with an odd degree we need to find a minimum perfect matching in the subgraph consisting only of the odd degree vertices. A perfect matching means every vertex is paired, and minimal means the sum of the lengths of the edges in the pairing is minimized.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 312,
        "text_offset": 0,
        "word_length": 5,
        "text": "After",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3875000,
        "duration_milliseconds": 350,
        "text_offset": 6,
        "word_length": 7,
        "text": "finding",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7625000,
        "duration_milliseconds": 112,
        "text_offset": 14,
        "word_length": 3,
        "text": "all",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 100,
        "text_offset": 18,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10125000,
        "duration_milliseconds": 275,
        "text_offset": 22,
        "word_length": 5,
        "text": "nodes",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13000000,
        "duration_milliseconds": 112,
        "text_offset": 28,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14375000,
        "duration_milliseconds": 100,
        "text_offset": 33,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15625000,
        "duration_milliseconds": 162,
        "text_offset": 36,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17500000,
        "duration_milliseconds": 312,
        "text_offset": 40,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20750000,
        "duration_milliseconds": 125,
        "text_offset": 47,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22250000,
        "duration_milliseconds": 150,
        "text_offset": 50,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23875000,
        "duration_milliseconds": 75,
        "text_offset": 55,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24875000,
        "duration_milliseconds": 237,
        "text_offset": 58,
        "word_length": 4,
        "text": "find",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27500000,
        "duration_milliseconds": 50,
        "text_offset": 63,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28125000,
        "duration_milliseconds": 412,
        "text_offset": 65,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32500000,
        "duration_milliseconds": 425,
        "text_offset": 73,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37000000,
        "duration_milliseconds": 375,
        "text_offset": 81,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40875000,
        "duration_milliseconds": 62,
        "text_offset": 90,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41625000,
        "duration_milliseconds": 100,
        "text_offset": 93,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 42875000,
        "duration_milliseconds": 525,
        "text_offset": 97,
        "word_length": 8,
        "text": "subgraph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 48375000,
        "duration_milliseconds": 550,
        "text_offset": 106,
        "word_length": 10,
        "text": "consisting",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 54125000,
        "duration_milliseconds": 237,
        "text_offset": 117,
        "word_length": 4,
        "text": "only",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 56750000,
        "duration_milliseconds": 62,
        "text_offset": 122,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 57625000,
        "duration_milliseconds": 100,
        "text_offset": 125,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58875000,
        "duration_milliseconds": 175,
        "text_offset": 129,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60750000,
        "duration_milliseconds": 275,
        "text_offset": 133,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 63750000,
        "duration_milliseconds": 637,
        "text_offset": 140,
        "word_length": 8,
        "text": "vertices",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 70375000,
        "duration_milliseconds": 100,
        "text_offset": 148,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 79000000,
        "duration_milliseconds": 137,
        "text_offset": 150,
        "word_length": 1,
        "text": "A",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 80500000,
        "duration_milliseconds": 412,
        "text_offset": 152,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 84875000,
        "duration_milliseconds": 375,
        "text_offset": 160,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 88875000,
        "duration_milliseconds": 300,
        "text_offset": 169,
        "word_length": 5,
        "text": "means",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 92000000,
        "duration_milliseconds": 212,
        "text_offset": 175,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 94250000,
        "duration_milliseconds": 437,
        "text_offset": 181,
        "word_length": 6,
        "text": "vertex",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 98750000,
        "duration_milliseconds": 112,
        "text_offset": 188,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 100125000,
        "duration_milliseconds": 350,
        "text_offset": 191,
        "word_length": 6,
        "text": "paired",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 104625000,
        "duration_milliseconds": 175,
        "text_offset": 197,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 106375000,
        "duration_milliseconds": 137,
        "text_offset": 199,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 108000000,
        "duration_milliseconds": 350,
        "text_offset": 203,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 111750000,
        "duration_milliseconds": 250,
        "text_offset": 211,
        "word_length": 5,
        "text": "means",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 114500000,
        "duration_milliseconds": 112,
        "text_offset": 217,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 115875000,
        "duration_milliseconds": 212,
        "text_offset": 221,
        "word_length": 3,
        "text": "sum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 118125000,
        "duration_milliseconds": 75,
        "text_offset": 225,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 119125000,
        "duration_milliseconds": 100,
        "text_offset": 228,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 120375000,
        "duration_milliseconds": 312,
        "text_offset": 232,
        "word_length": 7,
        "text": "lengths",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 123750000,
        "duration_milliseconds": 87,
        "text_offset": 240,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 124875000,
        "duration_milliseconds": 87,
        "text_offset": 243,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 126000000,
        "duration_milliseconds": 337,
        "text_offset": 247,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 129625000,
        "duration_milliseconds": 62,
        "text_offset": 253,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 130375000,
        "duration_milliseconds": 100,
        "text_offset": 256,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 131625000,
        "duration_milliseconds": 362,
        "text_offset": 260,
        "word_length": 7,
        "text": "pairing",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 135375000,
        "duration_milliseconds": 125,
        "text_offset": 268,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 136750000,
        "duration_milliseconds": 662,
        "text_offset": 271,
        "word_length": 9,
        "text": "minimized",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 143625000,
        "duration_milliseconds": 100,
        "text_offset": 280,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "after-finding-all-the-nodes-with-an-odd-degree-we-0f720219.mp3",
    "final_audio": "after-finding-all-the-nodes-with-an-odd-degree-we-0f720219.mp3"
  },
  {
    "input_text": "Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.",
    "input_data": {
      "input_text": "Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 200,
        "text_offset": 0,
        "word_length": 4,
        "text": "Then",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2750000,
        "duration_milliseconds": 100,
        "text_offset": 5,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4000000,
        "duration_milliseconds": 150,
        "text_offset": 8,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5625000,
        "duration_milliseconds": 100,
        "text_offset": 13,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6875000,
        "duration_milliseconds": 400,
        "text_offset": 16,
        "word_length": 7,
        "text": "combine",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11125000,
        "duration_milliseconds": 87,
        "text_offset": 24,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12250000,
        "duration_milliseconds": 362,
        "text_offset": 28,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16125000,
        "duration_milliseconds": 387,
        "text_offset": 36,
        "word_length": 8,
        "text": "spanning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20250000,
        "duration_milliseconds": 212,
        "text_offset": 45,
        "word_length": 4,
        "text": "tree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22625000,
        "duration_milliseconds": 137,
        "text_offset": 50,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24250000,
        "duration_milliseconds": 112,
        "text_offset": 55,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 25625000,
        "duration_milliseconds": 425,
        "text_offset": 59,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30000000,
        "duration_milliseconds": 362,
        "text_offset": 67,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33875000,
        "duration_milliseconds": 125,
        "text_offset": 76,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35375000,
        "duration_milliseconds": 300,
        "text_offset": 79,
        "word_length": 6,
        "text": "obtain",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 38625000,
        "duration_milliseconds": 62,
        "text_offset": 86,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39500000,
        "duration_milliseconds": 612,
        "text_offset": 88,
        "word_length": 10,
        "text": "multigraph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 45875000,
        "duration_milliseconds": 100,
        "text_offset": 99,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 47125000,
        "duration_milliseconds": 187,
        "text_offset": 102,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 49250000,
        "duration_milliseconds": 212,
        "text_offset": 108,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 51625000,
        "duration_milliseconds": 487,
        "text_offset": 114,
        "word_length": 6,
        "text": "vertex",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 56750000,
        "duration_milliseconds": 175,
        "text_offset": 121,
        "word_length": 3,
        "text": "has",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58750000,
        "duration_milliseconds": 100,
        "text_offset": 125,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60000000,
        "duration_milliseconds": 175,
        "text_offset": 128,
        "word_length": 4,
        "text": "even",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 61875000,
        "duration_milliseconds": 475,
        "text_offset": 133,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 66875000,
        "duration_milliseconds": 100,
        "text_offset": 139,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "then-we-need-to-combine-the-minimum-spanning-tree-ad2051d8.mp3",
    "final_audio": "then-we-need-to-combine-the-minimum-spanning-tree-ad2051d8.mp3"
  },
  {
    "input_text": "Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.",
    "input_data": {
      "input_text": "Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 325,
        "text_offset": 0,
        "word_length": 5,
        "text": "Since",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4000000,
        "duration_milliseconds": 237,
        "text_offset": 6,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6625000,
        "duration_milliseconds": 475,
        "text_offset": 12,
        "word_length": 6,
        "text": "vertex",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11625000,
        "duration_milliseconds": 175,
        "text_offset": 19,
        "word_length": 3,
        "text": "has",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13625000,
        "duration_milliseconds": 100,
        "text_offset": 23,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14875000,
        "duration_milliseconds": 187,
        "text_offset": 26,
        "word_length": 4,
        "text": "even",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17000000,
        "duration_milliseconds": 400,
        "text_offset": 31,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21875000,
        "duration_milliseconds": 112,
        "text_offset": 37,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 23000000,
        "duration_milliseconds": 162,
        "text_offset": 39,
        "word_length": 5,
        "text": "there",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24750000,
        "duration_milliseconds": 425,
        "text_offset": 45,
        "word_length": 6,
        "text": "exists",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29250000,
        "duration_milliseconds": 112,
        "text_offset": 52,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30625000,
        "duration_milliseconds": 550,
        "text_offset": 55,
        "word_length": 8,
        "text": "Eulerian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36375000,
        "duration_milliseconds": 375,
        "text_offset": 64,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40375000,
        "duration_milliseconds": 87,
        "text_offset": 72,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41500000,
        "duration_milliseconds": 175,
        "text_offset": 75,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 43375000,
        "duration_milliseconds": 575,
        "text_offset": 80,
        "word_length": 5,
        "text": "graph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 49375000,
        "duration_milliseconds": 100,
        "text_offset": 85,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 58000000,
        "duration_milliseconds": 175,
        "text_offset": 87,
        "word_length": 2,
        "text": "An",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60000000,
        "duration_milliseconds": 512,
        "text_offset": 90,
        "word_length": 8,
        "text": "Eulerian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 65375000,
        "duration_milliseconds": 375,
        "text_offset": 99,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 69250000,
        "duration_milliseconds": 125,
        "text_offset": 107,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 70750000,
        "duration_milliseconds": 62,
        "text_offset": 110,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 71625000,
        "duration_milliseconds": 312,
        "text_offset": 112,
        "word_length": 4,
        "text": "path",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 75000000,
        "duration_milliseconds": 150,
        "text_offset": 117,
        "word_length": 4,
        "text": "that",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76750000,
        "duration_milliseconds": 350,
        "text_offset": 122,
        "word_length": 6,
        "text": "visits",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 80500000,
        "duration_milliseconds": 212,
        "text_offset": 129,
        "word_length": 4,
        "text": "each",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 82875000,
        "duration_milliseconds": 150,
        "text_offset": 134,
        "word_length": 4,
        "text": "edge",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 84625000,
        "duration_milliseconds": 487,
        "text_offset": 139,
        "word_length": 7,
        "text": "exactly",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 89750000,
        "duration_milliseconds": 475,
        "text_offset": 147,
        "word_length": 4,
        "text": "once",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 94750000,
        "duration_milliseconds": 100,
        "text_offset": 151,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 103375000,
        "duration_milliseconds": 212,
        "text_offset": 153,
        "word_length": 2,
        "text": "We",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 105750000,
        "duration_milliseconds": 212,
        "text_offset": 156,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 108000000,
        "duration_milliseconds": 100,
        "text_offset": 161,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 109250000,
        "duration_milliseconds": 337,
        "text_offset": 164,
        "word_length": 4,
        "text": "find",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 112750000,
        "duration_milliseconds": 187,
        "text_offset": 169,
        "word_length": 2,
        "text": "it",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 114750000,
        "duration_milliseconds": 100,
        "text_offset": 171,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "since-every-vertex-has-an-even-degree-there-exists-20bb5a60.mp3",
    "final_audio": "since-every-vertex-has-an-even-degree-there-exists-20bb5a60.mp3"
  },
  {
    "input_text": "Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.",
    "input_data": {
      "input_text": "Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 237,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3125000,
        "duration_milliseconds": 125,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4625000,
        "duration_milliseconds": 375,
        "text_offset": 7,
        "word_length": 7,
        "text": "convert",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8625000,
        "duration_milliseconds": 75,
        "text_offset": 15,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9625000,
        "duration_milliseconds": 512,
        "text_offset": 19,
        "word_length": 8,
        "text": "Eulerian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15000000,
        "duration_milliseconds": 375,
        "text_offset": 28,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19000000,
        "duration_milliseconds": 125,
        "text_offset": 36,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20500000,
        "duration_milliseconds": 50,
        "text_offset": 39,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21250000,
        "duration_milliseconds": 712,
        "text_offset": 41,
        "word_length": 11,
        "text": "Hamiltonian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28625000,
        "duration_milliseconds": 387,
        "text_offset": 53,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32750000,
        "duration_milliseconds": 150,
        "text_offset": 61,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34500000,
        "duration_milliseconds": 462,
        "text_offset": 64,
        "word_length": 8,
        "text": "skipping",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39250000,
        "duration_milliseconds": 437,
        "text_offset": 73,
        "word_length": 8,
        "text": "repeated",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 43750000,
        "duration_milliseconds": 650,
        "text_offset": 82,
        "word_length": 8,
        "text": "vertices",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 50500000,
        "duration_milliseconds": 100,
        "text_offset": 90,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "now-we-convert-the-eulerian-circuit-to-a-5c9d1a2f.mp3",
    "final_audio": "now-we-convert-the-eulerian-circuit-to-a-5c9d1a2f.mp3"
  },
  {
    "input_text": "Let's take a look at the graph to visualize this algorithm.",
    "input_data": {
      "input_text": "Let's take a look at the graph to visualize this algorithm.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Let's take a look at the graph to visualize this algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Let's take a look at the graph to visualize this algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 300,
        "text_offset": 0,
        "word_length": 5,
        "text": "Let's",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3625000,
        "duration_milliseconds": 187,
        "text_offset": 6,
        "word_length": 4,
        "text": "take",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5750000,
        "duration_milliseconds": 62,
        "text_offset": 11,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6625000,
        "duration_milliseconds": 225,
        "text_offset": 13,
        "word_length": 4,
        "text": "look",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9125000,
        "duration_milliseconds": 75,
        "text_offset": 18,
        "word_length": 2,
        "text": "at",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10125000,
        "duration_milliseconds": 112,
        "text_offset": 21,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11500000,
        "duration_milliseconds": 325,
        "text_offset": 25,
        "word_length": 5,
        "text": "graph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15000000,
        "duration_milliseconds": 100,
        "text_offset": 31,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16250000,
        "duration_milliseconds": 600,
        "text_offset": 34,
        "word_length": 9,
        "text": "visualize",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22500000,
        "duration_milliseconds": 187,
        "text_offset": 44,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24625000,
        "duration_milliseconds": 625,
        "text_offset": 49,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 31125000,
        "duration_milliseconds": 100,
        "text_offset": 58,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "let-s-take-a-look-at-the-graph-to-visualize-this-c57f7870.mp3",
    "final_audio": "let-s-take-a-look-at-the-graph-to-visualize-this-c57f7870.mp3"
  },
  {
    "input_text": "Like explained before we create a minimal spanning tree.",
    "input_data": {
      "input_text": "Like explained before we create a minimal spanning tree.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Like explained before we create a minimal spanning tree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Like explained before we create a minimal spanning tree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 225,
        "text_offset": 0,
        "word_length": 4,
        "text": "Like",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3000000,
        "duration_milliseconds": 500,
        "text_offset": 5,
        "word_length": 9,
        "text": "explained",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8250000,
        "duration_milliseconds": 337,
        "text_offset": 15,
        "word_length": 6,
        "text": "before",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11750000,
        "duration_milliseconds": 125,
        "text_offset": 22,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13250000,
        "duration_milliseconds": 337,
        "text_offset": 25,
        "word_length": 6,
        "text": "create",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16875000,
        "duration_milliseconds": 50,
        "text_offset": 32,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17500000,
        "duration_milliseconds": 375,
        "text_offset": 34,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21500000,
        "duration_milliseconds": 400,
        "text_offset": 42,
        "word_length": 8,
        "text": "spanning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 25750000,
        "duration_milliseconds": 350,
        "text_offset": 51,
        "word_length": 4,
        "text": "tree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29500000,
        "duration_milliseconds": 100,
        "text_offset": 55,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "like-explained-before-we-create-a-minimal-spanning-44a9aef2.mp3",
    "final_audio": "like-explained-before-we-create-a-minimal-spanning-44a9aef2.mp3"
  },
  {
    "input_text": "Now we point out every node with an odd degree",
    "input_data": {
      "input_text": "Now we point out every node with an odd degree",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we point out every node with an odd degree</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we point out every node with an odd degree</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 250,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3250000,
        "duration_milliseconds": 125,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4625000,
        "duration_milliseconds": 262,
        "text_offset": 7,
        "word_length": 5,
        "text": "point",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7500000,
        "duration_milliseconds": 200,
        "text_offset": 13,
        "word_length": 3,
        "text": "out",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9625000,
        "duration_milliseconds": 225,
        "text_offset": 17,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12125000,
        "duration_milliseconds": 262,
        "text_offset": 23,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15000000,
        "duration_milliseconds": 137,
        "text_offset": 28,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16625000,
        "duration_milliseconds": 112,
        "text_offset": 33,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17875000,
        "duration_milliseconds": 162,
        "text_offset": 36,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19625000,
        "duration_milliseconds": 450,
        "text_offset": 40,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "now-we-point-out-every-node-with-an-odd-degree-02c8675e.mp3",
    "final_audio": "now-we-point-out-every-node-with-an-odd-degree-02c8675e.mp3"
  },
  {
    "input_text": "We can now point out the minimal perfect matching, so we add edges with the minimum weight until every node has an odd degree.",
    "input_data": {
      "input_text": "We can now point out the minimal perfect matching, so we add edges with the minimum weight until every node has an odd degree.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We can now point out the minimal perfect matching, so we add edges with the minimum weight until every node has an odd degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We can now point out the minimal perfect matching, so we add edges with the minimum weight until every node has an odd degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 162,
        "text_offset": 0,
        "word_length": 2,
        "text": "We",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2375000,
        "duration_milliseconds": 137,
        "text_offset": 3,
        "word_length": 3,
        "text": "can",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4000000,
        "duration_milliseconds": 175,
        "text_offset": 7,
        "word_length": 3,
        "text": "now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5875000,
        "duration_milliseconds": 250,
        "text_offset": 11,
        "word_length": 5,
        "text": "point",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8625000,
        "duration_milliseconds": 125,
        "text_offset": 17,
        "word_length": 3,
        "text": "out",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10125000,
        "duration_milliseconds": 87,
        "text_offset": 21,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11250000,
        "duration_milliseconds": 375,
        "text_offset": 25,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15250000,
        "duration_milliseconds": 400,
        "text_offset": 33,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19375000,
        "duration_milliseconds": 400,
        "text_offset": 41,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24250000,
        "duration_milliseconds": 162,
        "text_offset": 49,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 25875000,
        "duration_milliseconds": 100,
        "text_offset": 51,
        "word_length": 2,
        "text": "so",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27125000,
        "duration_milliseconds": 125,
        "text_offset": 54,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28625000,
        "duration_milliseconds": 162,
        "text_offset": 57,
        "word_length": 3,
        "text": "add",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30500000,
        "duration_milliseconds": 275,
        "text_offset": 61,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33500000,
        "duration_milliseconds": 137,
        "text_offset": 67,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35125000,
        "duration_milliseconds": 75,
        "text_offset": 72,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36000000,
        "duration_milliseconds": 387,
        "text_offset": 76,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40125000,
        "duration_milliseconds": 225,
        "text_offset": 84,
        "word_length": 6,
        "text": "weight",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 42500000,
        "duration_milliseconds": 337,
        "text_offset": 91,
        "word_length": 5,
        "text": "until",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 46000000,
        "duration_milliseconds": 212,
        "text_offset": 97,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 48375000,
        "duration_milliseconds": 212,
        "text_offset": 103,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 50750000,
        "duration_milliseconds": 187,
        "text_offset": 108,
        "word_length": 3,
        "text": "has",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 52875000,
        "duration_milliseconds": 100,
        "text_offset": 112,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 54000000,
        "duration_milliseconds": 162,
        "text_offset": 115,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 55750000,
        "duration_milliseconds": 425,
        "text_offset": 119,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60250000,
        "duration_milliseconds": 100,
        "text_offset": 125,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "we-can-now-point-out-the-minimal-perfect-matching-95146c38.mp3",
    "final_audio": "we-can-now-point-out-the-minimal-perfect-matching-95146c38.mp3"
  },
  {
    "input_text": "Now we are going to find an eulerian tour which hits every edge exact once.",
    "input_data": {
      "input_text": "Now we are going to find an eulerian tour which hits every edge exact once.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we are going to find an eulerian tour which hits every edge exact once.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we are going to find an eulerian tour which hits every edge exact once.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 250,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3250000,
        "duration_milliseconds": 112,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4625000,
        "duration_milliseconds": 100,
        "text_offset": 7,
        "word_length": 3,
        "text": "are",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5875000,
        "duration_milliseconds": 200,
        "text_offset": 11,
        "word_length": 5,
        "text": "going",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8000000,
        "duration_milliseconds": 75,
        "text_offset": 17,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 275,
        "text_offset": 20,
        "word_length": 4,
        "text": "find",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11875000,
        "duration_milliseconds": 75,
        "text_offset": 25,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12875000,
        "duration_milliseconds": 525,
        "text_offset": 28,
        "word_length": 8,
        "text": "eulerian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 18375000,
        "duration_milliseconds": 312,
        "text_offset": 37,
        "word_length": 4,
        "text": "tour",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21750000,
        "duration_milliseconds": 175,
        "text_offset": 42,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23750000,
        "duration_milliseconds": 237,
        "text_offset": 48,
        "word_length": 4,
        "text": "hits",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26250000,
        "duration_milliseconds": 275,
        "text_offset": 53,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29125000,
        "duration_milliseconds": 175,
        "text_offset": 59,
        "word_length": 4,
        "text": "edge",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 31000000,
        "duration_milliseconds": 412,
        "text_offset": 64,
        "word_length": 5,
        "text": "exact",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35375000,
        "duration_milliseconds": 387,
        "text_offset": 70,
        "word_length": 4,
        "text": "once",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39375000,
        "duration_milliseconds": 100,
        "text_offset": 74,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "now-we-are-going-to-find-an-eulerian-tour-which-332be64c.mp3",
    "final_audio": "now-we-are-going-to-find-an-eulerian-tour-which-332be64c.mp3"
  },
  {
    "input_text": "The last step will be to convert the euleric circle into a hamilton circle, so we have to delete all edges which make the circle visit a node which we have seen before. In our case these are the edges between 9 and 4.",
    "input_data": {
      "input_text": "The last step will be to convert the euleric circle into a hamilton circle, so we have to delete all edges which make the circle visit a node which we have seen before. In our case these are the edges between 9 and 4.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">The last step will be to convert the euleric circle into a hamilton circle, so we have to delete all edges which make the circle visit a node which we have seen before. In our case these are the edges between 9 and 4.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">The last step will be to convert the euleric circle into a hamilton circle, so we have to delete all edges which make the circle visit a node which we have seen before. In our case these are the edges between 9 and 4.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 137,
        "text_offset": 0,
        "word_length": 3,
        "text": "The",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2125000,
        "duration_milliseconds": 250,
        "text_offset": 4,
        "word_length": 4,
        "text": "last",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4875000,
        "duration_milliseconds": 250,
        "text_offset": 9,
        "word_length": 4,
        "text": "step",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7625000,
        "duration_milliseconds": 87,
        "text_offset": 14,
        "word_length": 4,
        "text": "will",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8750000,
        "duration_milliseconds": 112,
        "text_offset": 19,
        "word_length": 2,
        "text": "be",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10000000,
        "duration_milliseconds": 100,
        "text_offset": 22,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11250000,
        "duration_milliseconds": 400,
        "text_offset": 25,
        "word_length": 7,
        "text": "convert",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15500000,
        "duration_milliseconds": 75,
        "text_offset": 33,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16500000,
        "duration_milliseconds": 412,
        "text_offset": 37,
        "word_length": 7,
        "text": "euleric",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20875000,
        "duration_milliseconds": 387,
        "text_offset": 45,
        "word_length": 6,
        "text": "circle",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24875000,
        "duration_milliseconds": 200,
        "text_offset": 52,
        "word_length": 4,
        "text": "into",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27125000,
        "duration_milliseconds": 37,
        "text_offset": 57,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27625000,
        "duration_milliseconds": 462,
        "text_offset": 59,
        "word_length": 8,
        "text": "hamilton",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32500000,
        "duration_milliseconds": 400,
        "text_offset": 68,
        "word_length": 6,
        "text": "circle",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37500000,
        "duration_milliseconds": 187,
        "text_offset": 74,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 39375000,
        "duration_milliseconds": 100,
        "text_offset": 76,
        "word_length": 2,
        "text": "so",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40500000,
        "duration_milliseconds": 100,
        "text_offset": 79,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41750000,
        "duration_milliseconds": 150,
        "text_offset": 82,
        "word_length": 4,
        "text": "have",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 43375000,
        "duration_milliseconds": 87,
        "text_offset": 87,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44375000,
        "duration_milliseconds": 312,
        "text_offset": 90,
        "word_length": 6,
        "text": "delete",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 47750000,
        "duration_milliseconds": 225,
        "text_offset": 97,
        "word_length": 3,
        "text": "all",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 50250000,
        "duration_milliseconds": 300,
        "text_offset": 101,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 53500000,
        "duration_milliseconds": 187,
        "text_offset": 107,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 55500000,
        "duration_milliseconds": 175,
        "text_offset": 113,
        "word_length": 4,
        "text": "make",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 57500000,
        "duration_milliseconds": 100,
        "text_offset": 118,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58750000,
        "duration_milliseconds": 375,
        "text_offset": 122,
        "word_length": 6,
        "text": "circle",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 62625000,
        "duration_milliseconds": 287,
        "text_offset": 129,
        "word_length": 5,
        "text": "visit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 65750000,
        "duration_milliseconds": 37,
        "text_offset": 135,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 66250000,
        "duration_milliseconds": 275,
        "text_offset": 137,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 69250000,
        "duration_milliseconds": 187,
        "text_offset": 142,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 71250000,
        "duration_milliseconds": 125,
        "text_offset": 148,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 72750000,
        "duration_milliseconds": 112,
        "text_offset": 151,
        "word_length": 4,
        "text": "have",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 74000000,
        "duration_milliseconds": 225,
        "text_offset": 156,
        "word_length": 4,
        "text": "seen",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76500000,
        "duration_milliseconds": 525,
        "text_offset": 161,
        "word_length": 6,
        "text": "before",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 82000000,
        "duration_milliseconds": 100,
        "text_offset": 167,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 90625000,
        "duration_milliseconds": 162,
        "text_offset": 169,
        "word_length": 2,
        "text": "In",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 92500000,
        "duration_milliseconds": 125,
        "text_offset": 172,
        "word_length": 3,
        "text": "our",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 93875000,
        "duration_milliseconds": 262,
        "text_offset": 176,
        "word_length": 4,
        "text": "case",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 96750000,
        "duration_milliseconds": 212,
        "text_offset": 181,
        "word_length": 5,
        "text": "these",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 99125000,
        "duration_milliseconds": 100,
        "text_offset": 187,
        "word_length": 3,
        "text": "are",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 100250000,
        "duration_milliseconds": 87,
        "text_offset": 191,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 101375000,
        "duration_milliseconds": 387,
        "text_offset": 195,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 105500000,
        "duration_milliseconds": 362,
        "text_offset": 201,
        "word_length": 7,
        "text": "between",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 109375000,
        "duration_milliseconds": 250,
        "text_offset": 209,
        "word_length": 1,
        "text": "9",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 112000000,
        "duration_milliseconds": 87,
        "text_offset": 211,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 113125000,
        "duration_milliseconds": 487,
        "text_offset": 215,
        "word_length": 1,
        "text": "4",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 118250000,
        "duration_milliseconds": 100,
        "text_offset": 216,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "the-last-step-will-be-to-convert-the-euleric-3ff5adf2.mp3",
    "final_audio": "the-last-step-will-be-to-convert-the-euleric-3ff5adf2.mp3"
  },
  {
    "input_text": "If we take a look at the time complexity of the Christofides algorithm it is mainly determined by the step of finding a minimum perfect matching, which is O(n^3). Therefore, the overall complexity of the Christofides algorithm is O(n^3).",
    "input_data": {
      "input_text": "If we take a look at the time complexity of the Christofides algorithm it is mainly determined by the step of finding a minimum perfect matching, which is O(n^3). Therefore, the overall complexity of the Christofides algorithm is O(n^3).",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">If we take a look at the time complexity of the Christofides algorithm it is mainly determined by the step of finding a minimum perfect matching, which is O(n^3). Therefore, the overall complexity of the Christofides algorithm is O(n^3).</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">If we take a look at the time complexity of the Christofides algorithm it is mainly determined by the step of finding a minimum perfect matching, which is O(n^3). Therefore, the overall complexity of the Christofides algorithm is O(n^3).</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 175,
        "text_offset": 0,
        "word_length": 2,
        "text": "If",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2500000,
        "duration_milliseconds": 100,
        "text_offset": 3,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3625000,
        "duration_milliseconds": 175,
        "text_offset": 6,
        "word_length": 4,
        "text": "take",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5500000,
        "duration_milliseconds": 50,
        "text_offset": 11,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6250000,
        "duration_milliseconds": 187,
        "text_offset": 13,
        "word_length": 4,
        "text": "look",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8375000,
        "duration_milliseconds": 62,
        "text_offset": 18,
        "word_length": 2,
        "text": "at",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9125000,
        "duration_milliseconds": 100,
        "text_offset": 21,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10375000,
        "duration_milliseconds": 250,
        "text_offset": 25,
        "word_length": 4,
        "text": "time",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13000000,
        "duration_milliseconds": 637,
        "text_offset": 30,
        "word_length": 10,
        "text": "complexity",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19625000,
        "duration_milliseconds": 75,
        "text_offset": 41,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20625000,
        "duration_milliseconds": 87,
        "text_offset": 44,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21750000,
        "duration_milliseconds": 737,
        "text_offset": 48,
        "word_length": 12,
        "text": "Christofides",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29375000,
        "duration_milliseconds": 525,
        "text_offset": 61,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34875000,
        "duration_milliseconds": 87,
        "text_offset": 71,
        "word_length": 2,
        "text": "it",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35875000,
        "duration_milliseconds": 125,
        "text_offset": 74,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37250000,
        "duration_milliseconds": 312,
        "text_offset": 77,
        "word_length": 6,
        "text": "mainly",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40500000,
        "duration_milliseconds": 500,
        "text_offset": 84,
        "word_length": 10,
        "text": "determined",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 45750000,
        "duration_milliseconds": 112,
        "text_offset": 95,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 47000000,
        "duration_milliseconds": 112,
        "text_offset": 98,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 48375000,
        "duration_milliseconds": 250,
        "text_offset": 102,
        "word_length": 4,
        "text": "step",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 51000000,
        "duration_milliseconds": 112,
        "text_offset": 107,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 52375000,
        "duration_milliseconds": 362,
        "text_offset": 110,
        "word_length": 7,
        "text": "finding",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 56250000,
        "duration_milliseconds": 50,
        "text_offset": 118,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 56875000,
        "duration_milliseconds": 387,
        "text_offset": 120,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60875000,
        "duration_milliseconds": 400,
        "text_offset": 128,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 65000000,
        "duration_milliseconds": 387,
        "text_offset": 136,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 69750000,
        "duration_milliseconds": 100,
        "text_offset": 144,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 70875000,
        "duration_milliseconds": 175,
        "text_offset": 146,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 72750000,
        "duration_milliseconds": 137,
        "text_offset": 152,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 74375000,
        "duration_milliseconds": 162,
        "text_offset": 155,
        "word_length": 1,
        "text": "O",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76875000,
        "duration_milliseconds": 100,
        "text_offset": 156,
        "word_length": 1,
        "text": "(",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 77875000,
        "duration_milliseconds": 600,
        "text_offset": 157,
        "word_length": 3,
        "text": "n^3",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 84125000,
        "duration_milliseconds": 100,
        "text_offset": 161,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 92750000,
        "duration_milliseconds": 500,
        "text_offset": 163,
        "word_length": 9,
        "text": "Therefore",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 98750000,
        "duration_milliseconds": 75,
        "text_offset": 172,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 99500000,
        "duration_milliseconds": 112,
        "text_offset": 174,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 100875000,
        "duration_milliseconds": 425,
        "text_offset": 178,
        "word_length": 7,
        "text": "overall",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 105375000,
        "duration_milliseconds": 662,
        "text_offset": 186,
        "word_length": 10,
        "text": "complexity",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 112250000,
        "duration_milliseconds": 75,
        "text_offset": 197,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 113250000,
        "duration_milliseconds": 112,
        "text_offset": 200,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 114625000,
        "duration_milliseconds": 725,
        "text_offset": 204,
        "word_length": 12,
        "text": "Christofides",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 122125000,
        "duration_milliseconds": 550,
        "text_offset": 217,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 127750000,
        "duration_milliseconds": 150,
        "text_offset": 227,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 129375000,
        "duration_milliseconds": 212,
        "text_offset": 230,
        "word_length": 1,
        "text": "O",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 132375000,
        "duration_milliseconds": 87,
        "text_offset": 231,
        "word_length": 1,
        "text": "(",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 133250000,
        "duration_milliseconds": 600,
        "text_offset": 232,
        "word_length": 3,
        "text": "n^3",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 139375000,
        "duration_milliseconds": 100,
        "text_offset": 236,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "if-we-take-a-look-at-the-time-complexity-of-the-dabb1f2e.mp3",
    "final_audio": "if-we-take-a-look-at-the-time-complexity-of-the-dabb1f2e.mp3"
  },
  {
    "input_text": "Now we go on with the next topic",
    "input_data": {
      "input_text": "Now we go on with the next topic",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we go on with the next topic</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we go on with the next topic</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 275,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3375000,
        "duration_milliseconds": 137,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5000000,
        "duration_milliseconds": 250,
        "text_offset": 7,
        "word_length": 2,
        "text": "go",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7625000,
        "duration_milliseconds": 175,
        "text_offset": 10,
        "word_length": 2,
        "text": "on",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9500000,
        "duration_milliseconds": 125,
        "text_offset": 13,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11000000,
        "duration_milliseconds": 87,
        "text_offset": 18,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12000000,
        "duration_milliseconds": 250,
        "text_offset": 22,
        "word_length": 4,
        "text": "next",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14625000,
        "duration_milliseconds": 437,
        "text_offset": 27,
        "word_length": 5,
        "text": "topic",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "now-we-go-on-with-the-next-topic-b4db96e8.mp3",
    "final_audio": "now-we-go-on-with-the-next-topic-b4db96e8.mp3"
  },
  {
    "input_text": "There are symmetrical and asymmetrical TSPs.",
    "input_data": {
      "input_text": "There are symmetrical and asymmetrical TSPs.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">There are symmetrical and asymmetrical TSPs.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">There are symmetrical and asymmetrical TSPs.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 212,
        "text_offset": 0,
        "word_length": 5,
        "text": "There",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2750000,
        "duration_milliseconds": 112,
        "text_offset": 6,
        "word_length": 3,
        "text": "are",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4125000,
        "duration_milliseconds": 675,
        "text_offset": 10,
        "word_length": 11,
        "text": "symmetrical",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11125000,
        "duration_milliseconds": 162,
        "text_offset": 22,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12875000,
        "duration_milliseconds": 775,
        "text_offset": 26,
        "word_length": 12,
        "text": "asymmetrical",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20875000,
        "duration_milliseconds": 900,
        "text_offset": 39,
        "word_length": 4,
        "text": "TSPs",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30125000,
        "duration_milliseconds": 100,
        "text_offset": 43,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "there-are-symmetrical-and-asymmetrical-tsps-c4eb97f5.mp3",
    "final_audio": "there-are-symmetrical-and-asymmetrical-tsps-c4eb97f5.mp3"
  },
  {
    "input_text": "First we will explain the symmetrical TSP",
    "input_data": {
      "input_text": "First we will explain the symmetrical TSP",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">First we will explain the symmetrical TSP</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">First we will explain the symmetrical TSP</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 400,
        "text_offset": 0,
        "word_length": 5,
        "text": "First",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4750000,
        "duration_milliseconds": 125,
        "text_offset": 6,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6250000,
        "duration_milliseconds": 137,
        "text_offset": 9,
        "word_length": 4,
        "text": "will",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7875000,
        "duration_milliseconds": 425,
        "text_offset": 14,
        "word_length": 7,
        "text": "explain",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12375000,
        "duration_milliseconds": 100,
        "text_offset": 22,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13500000,
        "duration_milliseconds": 650,
        "text_offset": 26,
        "word_length": 11,
        "text": "symmetrical",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20250000,
        "duration_milliseconds": 800,
        "text_offset": 38,
        "word_length": 3,
        "text": "TSP",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "first-we-will-explain-the-symmetrical-tsp-de54a032.mp3",
    "final_audio": "first-we-will-explain-the-symmetrical-tsp-de54a032.mp3"
  },
  {
    "input_text": "A TSP is called symmetrical, if the edges between two nodes have the same value in both directions. This means the way form one town to another would be exact the same in both directions. This isn't really accurate because of conditions of the landscape or construction sites.",
    "input_data": {
      "input_text": "A TSP is called symmetrical, if the edges between two nodes have the same value in both directions. This means the way form one town to another would be exact the same in both directions. This isn't really accurate because of conditions of the landscape or construction sites.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">A TSP is called symmetrical, if the edges between two nodes have the same value in both directions. This means the way form one town to another would be exact the same in both directions. This isn't really accurate because of conditions of the landscape or construction sites.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">A TSP is called symmetrical, if the edges between two nodes have the same value in both directions. This means the way form one town to another would be exact the same in both directions. This isn't really accurate because of conditions of the landscape or construction sites.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 137,
        "text_offset": 0,
        "word_length": 1,
        "text": "A",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2125000,
        "duration_milliseconds": 512,
        "text_offset": 2,
        "word_length": 3,
        "text": "TSP",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7500000,
        "duration_milliseconds": 125,
        "text_offset": 6,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 225,
        "text_offset": 9,
        "word_length": 6,
        "text": "called",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11375000,
        "duration_milliseconds": 625,
        "text_offset": 16,
        "word_length": 11,
        "text": "symmetrical",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 18500000,
        "duration_milliseconds": 100,
        "text_offset": 27,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 19500000,
        "duration_milliseconds": 100,
        "text_offset": 29,
        "word_length": 2,
        "text": "if",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20750000,
        "duration_milliseconds": 87,
        "text_offset": 32,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21875000,
        "duration_milliseconds": 312,
        "text_offset": 36,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 25250000,
        "duration_milliseconds": 350,
        "text_offset": 42,
        "word_length": 7,
        "text": "between",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29000000,
        "duration_milliseconds": 187,
        "text_offset": 50,
        "word_length": 3,
        "text": "two",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 31125000,
        "duration_milliseconds": 312,
        "text_offset": 54,
        "word_length": 5,
        "text": "nodes",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34500000,
        "duration_milliseconds": 125,
        "text_offset": 60,
        "word_length": 4,
        "text": "have",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36000000,
        "duration_milliseconds": 87,
        "text_offset": 65,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37000000,
        "duration_milliseconds": 275,
        "text_offset": 69,
        "word_length": 4,
        "text": "same",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40000000,
        "duration_milliseconds": 387,
        "text_offset": 74,
        "word_length": 5,
        "text": "value",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44125000,
        "duration_milliseconds": 100,
        "text_offset": 80,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 45375000,
        "duration_milliseconds": 212,
        "text_offset": 83,
        "word_length": 4,
        "text": "both",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 47625000,
        "duration_milliseconds": 650,
        "text_offset": 88,
        "word_length": 10,
        "text": "directions",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 54375000,
        "duration_milliseconds": 100,
        "text_offset": 98,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 63000000,
        "duration_milliseconds": 237,
        "text_offset": 100,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 65500000,
        "duration_milliseconds": 237,
        "text_offset": 105,
        "word_length": 5,
        "text": "means",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 68125000,
        "duration_milliseconds": 112,
        "text_offset": 111,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 69375000,
        "duration_milliseconds": 150,
        "text_offset": 115,
        "word_length": 3,
        "text": "way",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 71000000,
        "duration_milliseconds": 287,
        "text_offset": 119,
        "word_length": 4,
        "text": "form",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 74125000,
        "duration_milliseconds": 187,
        "text_offset": 124,
        "word_length": 3,
        "text": "one",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76250000,
        "duration_milliseconds": 275,
        "text_offset": 128,
        "word_length": 4,
        "text": "town",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 79250000,
        "duration_milliseconds": 125,
        "text_offset": 133,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 80750000,
        "duration_milliseconds": 362,
        "text_offset": 136,
        "word_length": 7,
        "text": "another",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 84625000,
        "duration_milliseconds": 112,
        "text_offset": 144,
        "word_length": 5,
        "text": "would",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 86000000,
        "duration_milliseconds": 125,
        "text_offset": 150,
        "word_length": 2,
        "text": "be",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 87500000,
        "duration_milliseconds": 412,
        "text_offset": 153,
        "word_length": 5,
        "text": "exact",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 91750000,
        "duration_milliseconds": 87,
        "text_offset": 159,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 92875000,
        "duration_milliseconds": 325,
        "text_offset": 163,
        "word_length": 4,
        "text": "same",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 96250000,
        "duration_milliseconds": 100,
        "text_offset": 168,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 97500000,
        "duration_milliseconds": 212,
        "text_offset": 171,
        "word_length": 4,
        "text": "both",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 99750000,
        "duration_milliseconds": 650,
        "text_offset": 176,
        "word_length": 10,
        "text": "directions",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 106500000,
        "duration_milliseconds": 100,
        "text_offset": 186,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 115000000,
        "duration_milliseconds": 212,
        "text_offset": 188,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 117375000,
        "duration_milliseconds": 250,
        "text_offset": 193,
        "word_length": 5,
        "text": "isn't",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 120000000,
        "duration_milliseconds": 287,
        "text_offset": 199,
        "word_length": 6,
        "text": "really",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 123000000,
        "duration_milliseconds": 437,
        "text_offset": 206,
        "word_length": 8,
        "text": "accurate",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 127500000,
        "duration_milliseconds": 312,
        "text_offset": 215,
        "word_length": 7,
        "text": "because",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 130875000,
        "duration_milliseconds": 75,
        "text_offset": 223,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 131875000,
        "duration_milliseconds": 550,
        "text_offset": 226,
        "word_length": 10,
        "text": "conditions",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 137625000,
        "duration_milliseconds": 75,
        "text_offset": 237,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 138625000,
        "duration_milliseconds": 100,
        "text_offset": 240,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 139875000,
        "duration_milliseconds": 500,
        "text_offset": 244,
        "word_length": 9,
        "text": "landscape",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 145000000,
        "duration_milliseconds": 125,
        "text_offset": 254,
        "word_length": 2,
        "text": "or",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 146375000,
        "duration_milliseconds": 637,
        "text_offset": 257,
        "word_length": 12,
        "text": "construction",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 153000000,
        "duration_milliseconds": 462,
        "text_offset": 270,
        "word_length": 5,
        "text": "sites",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 157750000,
        "duration_milliseconds": 100,
        "text_offset": 275,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "a-tsp-is-called-symmetrical-if-the-edges-between-97121736.mp3",
    "final_audio": "a-tsp-is-called-symmetrical-if-the-edges-between-97121736.mp3"
  },
  {
    "input_text": "Thats why there is also a asymmetrical TSP.",
    "input_data": {
      "input_text": "Thats why there is also a asymmetrical TSP.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Thats why there is also a asymmetrical TSP.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Thats why there is also a asymmetrical TSP.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 275,
        "text_offset": 0,
        "word_length": 5,
        "text": "Thats",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3375000,
        "duration_milliseconds": 137,
        "text_offset": 6,
        "word_length": 3,
        "text": "why",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4875000,
        "duration_milliseconds": 187,
        "text_offset": 10,
        "word_length": 5,
        "text": "there",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7000000,
        "duration_milliseconds": 125,
        "text_offset": 16,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8500000,
        "duration_milliseconds": 275,
        "text_offset": 19,
        "word_length": 4,
        "text": "also",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11500000,
        "duration_milliseconds": 87,
        "text_offset": 24,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12500000,
        "duration_milliseconds": 775,
        "text_offset": 26,
        "word_length": 12,
        "text": "asymmetrical",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20500000,
        "duration_milliseconds": 762,
        "text_offset": 39,
        "word_length": 3,
        "text": "TSP",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28375000,
        "duration_milliseconds": 100,
        "text_offset": 42,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "thats-why-there-is-also-a-asymmetrical-tsp-62980a24.mp3",
    "final_audio": "thats-why-there-is-also-a-asymmetrical-tsp-62980a24.mp3"
  },
  {
    "input_text": "The TSP is called asymmetrical if there are two edges between every node and they don't have the same weight. As you can see the graph is then directed. This is way more accurate to the real world, but this is also twice as complex to solve then the symmetrical. This is why we only observe symmetrical TSPs in the following.",
    "input_data": {
      "input_text": "The TSP is called asymmetrical if there are two edges between every node and they don't have the same weight. As you can see the graph is then directed. This is way more accurate to the real world, but this is also twice as complex to solve then the symmetrical. This is why we only observe symmetrical TSPs in the following.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">The TSP is called asymmetrical if there are two edges between every node and they don't have the same weight. As you can see the graph is then directed. This is way more accurate to the real world, but this is also twice as complex to solve then the symmetrical. This is why we only observe symmetrical TSPs in the following.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">The TSP is called asymmetrical if there are two edges between every node and they don't have the same weight. As you can see the graph is then directed. This is way more accurate to the real world, but this is also twice as complex to solve then the symmetrical. This is why we only observe symmetrical TSPs in the following.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 137,
        "text_offset": 0,
        "word_length": 3,
        "text": "The",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2125000,
        "duration_milliseconds": 500,
        "text_offset": 4,
        "word_length": 3,
        "text": "TSP",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7375000,
        "duration_milliseconds": 125,
        "text_offset": 8,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8750000,
        "duration_milliseconds": 262,
        "text_offset": 11,
        "word_length": 6,
        "text": "called",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11625000,
        "duration_milliseconds": 737,
        "text_offset": 18,
        "word_length": 12,
        "text": "asymmetrical",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19250000,
        "duration_milliseconds": 100,
        "text_offset": 31,
        "word_length": 2,
        "text": "if",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20375000,
        "duration_milliseconds": 150,
        "text_offset": 34,
        "word_length": 5,
        "text": "there",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22000000,
        "duration_milliseconds": 100,
        "text_offset": 40,
        "word_length": 3,
        "text": "are",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23125000,
        "duration_milliseconds": 225,
        "text_offset": 44,
        "word_length": 3,
        "text": "two",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 25625000,
        "duration_milliseconds": 300,
        "text_offset": 48,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28875000,
        "duration_milliseconds": 350,
        "text_offset": 54,
        "word_length": 7,
        "text": "between",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32625000,
        "duration_milliseconds": 225,
        "text_offset": 62,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35125000,
        "duration_milliseconds": 312,
        "text_offset": 68,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 38375000,
        "duration_milliseconds": 100,
        "text_offset": 73,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39625000,
        "duration_milliseconds": 100,
        "text_offset": 77,
        "word_length": 4,
        "text": "they",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40750000,
        "duration_milliseconds": 187,
        "text_offset": 82,
        "word_length": 5,
        "text": "don't",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 42875000,
        "duration_milliseconds": 162,
        "text_offset": 88,
        "word_length": 4,
        "text": "have",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44750000,
        "duration_milliseconds": 100,
        "text_offset": 93,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 45875000,
        "duration_milliseconds": 262,
        "text_offset": 97,
        "word_length": 4,
        "text": "same",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 48625000,
        "duration_milliseconds": 350,
        "text_offset": 102,
        "word_length": 6,
        "text": "weight",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 52250000,
        "duration_milliseconds": 100,
        "text_offset": 108,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 60875000,
        "duration_milliseconds": 212,
        "text_offset": 110,
        "word_length": 2,
        "text": "As",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 63250000,
        "duration_milliseconds": 112,
        "text_offset": 113,
        "word_length": 3,
        "text": "you",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 64625000,
        "duration_milliseconds": 162,
        "text_offset": 117,
        "word_length": 3,
        "text": "can",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 66500000,
        "duration_milliseconds": 200,
        "text_offset": 121,
        "word_length": 3,
        "text": "see",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 68750000,
        "duration_milliseconds": 125,
        "text_offset": 125,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 70250000,
        "duration_milliseconds": 362,
        "text_offset": 129,
        "word_length": 5,
        "text": "graph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 74000000,
        "duration_milliseconds": 125,
        "text_offset": 135,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 75500000,
        "duration_milliseconds": 175,
        "text_offset": 138,
        "word_length": 4,
        "text": "then",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 77375000,
        "duration_milliseconds": 575,
        "text_offset": 143,
        "word_length": 8,
        "text": "directed",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 83375000,
        "duration_milliseconds": 100,
        "text_offset": 151,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 91875000,
        "duration_milliseconds": 212,
        "text_offset": 153,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 94250000,
        "duration_milliseconds": 112,
        "text_offset": 158,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 95625000,
        "duration_milliseconds": 175,
        "text_offset": 161,
        "word_length": 3,
        "text": "way",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 97500000,
        "duration_milliseconds": 262,
        "text_offset": 165,
        "word_length": 4,
        "text": "more",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 100250000,
        "duration_milliseconds": 375,
        "text_offset": 170,
        "word_length": 8,
        "text": "accurate",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 104250000,
        "duration_milliseconds": 87,
        "text_offset": 179,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 105375000,
        "duration_milliseconds": 100,
        "text_offset": 182,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 106500000,
        "duration_milliseconds": 250,
        "text_offset": 186,
        "word_length": 4,
        "text": "real",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 109250000,
        "duration_milliseconds": 275,
        "text_offset": 191,
        "word_length": 5,
        "text": "world",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 112875000,
        "duration_milliseconds": 100,
        "text_offset": 196,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 113875000,
        "duration_milliseconds": 137,
        "text_offset": 198,
        "word_length": 3,
        "text": "but",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 115500000,
        "duration_milliseconds": 162,
        "text_offset": 202,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 117250000,
        "duration_milliseconds": 125,
        "text_offset": 207,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 118750000,
        "duration_milliseconds": 250,
        "text_offset": 210,
        "word_length": 4,
        "text": "also",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 121375000,
        "duration_milliseconds": 325,
        "text_offset": 215,
        "word_length": 5,
        "text": "twice",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 124875000,
        "duration_milliseconds": 112,
        "text_offset": 221,
        "word_length": 2,
        "text": "as",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 126250000,
        "duration_milliseconds": 475,
        "text_offset": 224,
        "word_length": 7,
        "text": "complex",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 131250000,
        "duration_milliseconds": 100,
        "text_offset": 232,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 132500000,
        "duration_milliseconds": 300,
        "text_offset": 235,
        "word_length": 5,
        "text": "solve",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 135750000,
        "duration_milliseconds": 137,
        "text_offset": 241,
        "word_length": 4,
        "text": "then",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 137375000,
        "duration_milliseconds": 87,
        "text_offset": 246,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 138375000,
        "duration_milliseconds": 662,
        "text_offset": 250,
        "word_length": 11,
        "text": "symmetrical",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 145125000,
        "duration_milliseconds": 100,
        "text_offset": 261,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 153750000,
        "duration_milliseconds": 237,
        "text_offset": 263,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 156375000,
        "duration_milliseconds": 112,
        "text_offset": 268,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 157750000,
        "duration_milliseconds": 162,
        "text_offset": 271,
        "word_length": 3,
        "text": "why",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 159625000,
        "duration_milliseconds": 162,
        "text_offset": 275,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 161500000,
        "duration_milliseconds": 275,
        "text_offset": 278,
        "word_length": 4,
        "text": "only",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 164500000,
        "duration_milliseconds": 387,
        "text_offset": 283,
        "word_length": 7,
        "text": "observe",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 168625000,
        "duration_milliseconds": 637,
        "text_offset": 291,
        "word_length": 11,
        "text": "symmetrical",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 175250000,
        "duration_milliseconds": 700,
        "text_offset": 303,
        "word_length": 4,
        "text": "TSPs",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 182500000,
        "duration_milliseconds": 75,
        "text_offset": 308,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 183500000,
        "duration_milliseconds": 87,
        "text_offset": 311,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 184625000,
        "duration_milliseconds": 512,
        "text_offset": 315,
        "word_length": 9,
        "text": "following",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 190000000,
        "duration_milliseconds": 100,
        "text_offset": 324,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "the-tsp-is-called-asymmetrical-if-there-are-two-0e27fdc3.mp3",
    "final_audio": "the-tsp-is-called-asymmetrical-if-there-are-two-0e27fdc3.mp3"
  },
  {
    "input_text": "now we go on with the next topic",
    "input_data": {
      "input_text": "now we go on with the next topic",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">now we go on with the next topic</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">now we go on with the next topic</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 275,
        "text_offset": 0,
        "word_length": 3,
        "text": "now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3375000,
        "duration_milliseconds": 137,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5000000,
        "duration_milliseconds": 250,
        "text_offset": 7,
        "word_length": 2,
        "text": "go",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7625000,
        "duration_milliseconds": 175,
        "text_offset": 10,
        "word_length": 2,
        "text": "on",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9500000,
        "duration_milliseconds": 125,
        "text_offset": 13,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11000000,
        "duration_milliseconds": 87,
        "text_offset": 18,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12000000,
        "duration_milliseconds": 250,
        "text_offset": 22,
        "word_length": 4,
        "text": "next",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14625000,
        "duration_milliseconds": 437,
        "text_offset": 27,
        "word_length": 5,
        "text": "topic",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "now-we-go-on-with-the-next-topic-a458bd79.mp3",
    "final_audio": "now-we-go-on-with-the-next-topic-a458bd79.mp3"
  },
  {
    "input_text": "We need to point out how good is our approximated solution compared to the optimum. In some business cases there is a treshold given by the supervisor so you don't need to know how near the solution is to the optimum but in a theroetic case we want to know this. As we know to determine the optimum is not economically sensible so we need to find an other value to measure our solution.",
    "input_data": {
      "input_text": "We need to point out how good is our approximated solution compared to the optimum. In some business cases there is a treshold given by the supervisor so you don't need to know how near the solution is to the optimum but in a theroetic case we want to know this. As we know to determine the optimum is not economically sensible so we need to find an other value to measure our solution.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We need to point out how good is our approximated solution compared to the optimum. In some business cases there is a treshold given by the supervisor so you don't need to know how near the solution is to the optimum but in a theroetic case we want to know this. As we know to determine the optimum is not economically sensible so we need to find an other value to measure our solution.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We need to point out how good is our approximated solution compared to the optimum. In some business cases there is a treshold given by the supervisor so you don't need to know how near the solution is to the optimum but in a theroetic case we want to know this. As we know to determine the optimum is not economically sensible so we need to find an other value to measure our solution.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 162,
        "text_offset": 0,
        "word_length": 2,
        "text": "We",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2375000,
        "duration_milliseconds": 150,
        "text_offset": 3,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4125000,
        "duration_milliseconds": 87,
        "text_offset": 8,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5250000,
        "duration_milliseconds": 237,
        "text_offset": 11,
        "word_length": 5,
        "text": "point",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7875000,
        "duration_milliseconds": 162,
        "text_offset": 17,
        "word_length": 3,
        "text": "out",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9750000,
        "duration_milliseconds": 150,
        "text_offset": 21,
        "word_length": 3,
        "text": "how",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11500000,
        "duration_milliseconds": 225,
        "text_offset": 25,
        "word_length": 4,
        "text": "good",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14000000,
        "duration_milliseconds": 137,
        "text_offset": 30,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15625000,
        "duration_milliseconds": 125,
        "text_offset": 33,
        "word_length": 3,
        "text": "our",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17000000,
        "duration_milliseconds": 725,
        "text_offset": 37,
        "word_length": 12,
        "text": "approximated",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24500000,
        "duration_milliseconds": 462,
        "text_offset": 50,
        "word_length": 8,
        "text": "solution",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29375000,
        "duration_milliseconds": 400,
        "text_offset": 59,
        "word_length": 8,
        "text": "compared",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33500000,
        "duration_milliseconds": 75,
        "text_offset": 68,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34500000,
        "duration_milliseconds": 125,
        "text_offset": 71,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36000000,
        "duration_milliseconds": 487,
        "text_offset": 75,
        "word_length": 7,
        "text": "optimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41125000,
        "duration_milliseconds": 100,
        "text_offset": 82,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 49750000,
        "duration_milliseconds": 187,
        "text_offset": 84,
        "word_length": 2,
        "text": "In",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 51875000,
        "duration_milliseconds": 225,
        "text_offset": 87,
        "word_length": 4,
        "text": "some",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 54375000,
        "duration_milliseconds": 375,
        "text_offset": 92,
        "word_length": 8,
        "text": "business",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58375000,
        "duration_milliseconds": 400,
        "text_offset": 101,
        "word_length": 5,
        "text": "cases",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 62625000,
        "duration_milliseconds": 162,
        "text_offset": 107,
        "word_length": 5,
        "text": "there",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 64375000,
        "duration_milliseconds": 100,
        "text_offset": 113,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 65625000,
        "duration_milliseconds": 62,
        "text_offset": 116,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 66500000,
        "duration_milliseconds": 475,
        "text_offset": 118,
        "word_length": 8,
        "text": "treshold",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 71500000,
        "duration_milliseconds": 287,
        "text_offset": 127,
        "word_length": 5,
        "text": "given",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 74625000,
        "duration_milliseconds": 112,
        "text_offset": 133,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 75875000,
        "duration_milliseconds": 100,
        "text_offset": 136,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 77125000,
        "duration_milliseconds": 700,
        "text_offset": 140,
        "word_length": 10,
        "text": "supervisor",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 84375000,
        "duration_milliseconds": 100,
        "text_offset": 151,
        "word_length": 2,
        "text": "so",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 85500000,
        "duration_milliseconds": 100,
        "text_offset": 154,
        "word_length": 3,
        "text": "you",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 86750000,
        "duration_milliseconds": 200,
        "text_offset": 158,
        "word_length": 5,
        "text": "don't",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 88875000,
        "duration_milliseconds": 137,
        "text_offset": 164,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 90375000,
        "duration_milliseconds": 75,
        "text_offset": 169,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 91250000,
        "duration_milliseconds": 150,
        "text_offset": 172,
        "word_length": 4,
        "text": "know",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 92875000,
        "duration_milliseconds": 150,
        "text_offset": 177,
        "word_length": 3,
        "text": "how",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 94625000,
        "duration_milliseconds": 212,
        "text_offset": 181,
        "word_length": 4,
        "text": "near",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 97000000,
        "duration_milliseconds": 100,
        "text_offset": 186,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 98125000,
        "duration_milliseconds": 437,
        "text_offset": 190,
        "word_length": 8,
        "text": "solution",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 102625000,
        "duration_milliseconds": 125,
        "text_offset": 199,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 104125000,
        "duration_milliseconds": 87,
        "text_offset": 202,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 105250000,
        "duration_milliseconds": 112,
        "text_offset": 205,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 106625000,
        "duration_milliseconds": 462,
        "text_offset": 209,
        "word_length": 7,
        "text": "optimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 111500000,
        "duration_milliseconds": 150,
        "text_offset": 217,
        "word_length": 3,
        "text": "but",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 113125000,
        "duration_milliseconds": 100,
        "text_offset": 221,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 114375000,
        "duration_milliseconds": 50,
        "text_offset": 224,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 115125000,
        "duration_milliseconds": 525,
        "text_offset": 226,
        "word_length": 9,
        "text": "theroetic",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 120625000,
        "duration_milliseconds": 287,
        "text_offset": 236,
        "word_length": 4,
        "text": "case",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 123625000,
        "duration_milliseconds": 100,
        "text_offset": 241,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 124750000,
        "duration_milliseconds": 200,
        "text_offset": 244,
        "word_length": 4,
        "text": "want",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 126875000,
        "duration_milliseconds": 62,
        "text_offset": 249,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 127625000,
        "duration_milliseconds": 162,
        "text_offset": 252,
        "word_length": 4,
        "text": "know",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 129375000,
        "duration_milliseconds": 337,
        "text_offset": 257,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 133000000,
        "duration_milliseconds": 100,
        "text_offset": 261,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 141625000,
        "duration_milliseconds": 200,
        "text_offset": 263,
        "word_length": 2,
        "text": "As",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 143875000,
        "duration_milliseconds": 112,
        "text_offset": 266,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 145250000,
        "duration_milliseconds": 150,
        "text_offset": 269,
        "word_length": 4,
        "text": "know",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 146875000,
        "duration_milliseconds": 100,
        "text_offset": 274,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 148000000,
        "duration_milliseconds": 462,
        "text_offset": 277,
        "word_length": 9,
        "text": "determine",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 152875000,
        "duration_milliseconds": 112,
        "text_offset": 287,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 154250000,
        "duration_milliseconds": 462,
        "text_offset": 291,
        "word_length": 7,
        "text": "optimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 159000000,
        "duration_milliseconds": 125,
        "text_offset": 299,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 160500000,
        "duration_milliseconds": 225,
        "text_offset": 302,
        "word_length": 3,
        "text": "not",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 162875000,
        "duration_milliseconds": 700,
        "text_offset": 306,
        "word_length": 12,
        "text": "economically",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 170125000,
        "duration_milliseconds": 550,
        "text_offset": 319,
        "word_length": 8,
        "text": "sensible",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 175875000,
        "duration_milliseconds": 112,
        "text_offset": 328,
        "word_length": 2,
        "text": "so",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 177250000,
        "duration_milliseconds": 100,
        "text_offset": 331,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 178500000,
        "duration_milliseconds": 150,
        "text_offset": 334,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 180125000,
        "duration_milliseconds": 75,
        "text_offset": 339,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 181000000,
        "duration_milliseconds": 262,
        "text_offset": 342,
        "word_length": 4,
        "text": "find",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 183750000,
        "duration_milliseconds": 100,
        "text_offset": 347,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 185000000,
        "duration_milliseconds": 237,
        "text_offset": 350,
        "word_length": 5,
        "text": "other",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 187625000,
        "duration_milliseconds": 362,
        "text_offset": 356,
        "word_length": 5,
        "text": "value",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 191500000,
        "duration_milliseconds": 100,
        "text_offset": 362,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 192625000,
        "duration_milliseconds": 325,
        "text_offset": 365,
        "word_length": 7,
        "text": "measure",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 196125000,
        "duration_milliseconds": 112,
        "text_offset": 373,
        "word_length": 3,
        "text": "our",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 197500000,
        "duration_milliseconds": 550,
        "text_offset": 377,
        "word_length": 8,
        "text": "solution",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 203250000,
        "duration_milliseconds": 100,
        "text_offset": 385,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "we-need-to-point-out-how-good-is-our-approximated-87735ef9.mp3",
    "final_audio": "we-need-to-point-out-how-good-is-our-approximated-87735ef9.mp3"
  },
  {
    "input_text": "So lets imagine we have these nodes as a tsp",
    "input_data": {
      "input_text": "So lets imagine we have these nodes as a tsp",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">So lets imagine we have these nodes as a tsp</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">So lets imagine we have these nodes as a tsp</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 212,
        "text_offset": 0,
        "word_length": 2,
        "text": "So",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2875000,
        "duration_milliseconds": 200,
        "text_offset": 3,
        "word_length": 4,
        "text": "lets",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5000000,
        "duration_milliseconds": 450,
        "text_offset": 8,
        "word_length": 7,
        "text": "imagine",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9750000,
        "duration_milliseconds": 125,
        "text_offset": 16,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11250000,
        "duration_milliseconds": 225,
        "text_offset": 19,
        "word_length": 4,
        "text": "have",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13750000,
        "duration_milliseconds": 187,
        "text_offset": 24,
        "word_length": 5,
        "text": "these",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15875000,
        "duration_milliseconds": 325,
        "text_offset": 30,
        "word_length": 5,
        "text": "nodes",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19375000,
        "duration_milliseconds": 125,
        "text_offset": 36,
        "word_length": 2,
        "text": "as",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20875000,
        "duration_milliseconds": 62,
        "text_offset": 39,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21750000,
        "duration_milliseconds": 737,
        "text_offset": 41,
        "word_length": 3,
        "text": "tsp",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "so-lets-imagine-we-have-these-nodes-as-a-tsp-784bbb3c.mp3",
    "final_audio": "so-lets-imagine-we-have-these-nodes-as-a-tsp-784bbb3c.mp3"
  },
  {
    "input_text": "and this is our approximated solution.",
    "input_data": {
      "input_text": "and this is our approximated solution.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">and this is our approximated solution.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">and this is our approximated solution.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 175,
        "text_offset": 0,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2500000,
        "duration_milliseconds": 225,
        "text_offset": 4,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5000000,
        "duration_milliseconds": 162,
        "text_offset": 9,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6750000,
        "duration_milliseconds": 175,
        "text_offset": 12,
        "word_length": 3,
        "text": "our",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8625000,
        "duration_milliseconds": 787,
        "text_offset": 16,
        "word_length": 12,
        "text": "approximated",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16750000,
        "duration_milliseconds": 600,
        "text_offset": 29,
        "word_length": 8,
        "text": "solution",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22875000,
        "duration_milliseconds": 100,
        "text_offset": 37,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "and-this-is-our-approximated-solution-2dd423c1.mp3",
    "final_audio": "and-this-is-our-approximated-solution-2dd423c1.mp3"
  },
  {
    "input_text": "We take a look at all the weights and sum them up.",
    "input_data": {
      "input_text": "We take a look at all the weights and sum them up.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We take a look at all the weights and sum them up.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We take a look at all the weights and sum them up.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 175,
        "text_offset": 0,
        "word_length": 2,
        "text": "We",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2375000,
        "duration_milliseconds": 200,
        "text_offset": 3,
        "word_length": 4,
        "text": "take",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4625000,
        "duration_milliseconds": 62,
        "text_offset": 8,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5375000,
        "duration_milliseconds": 237,
        "text_offset": 10,
        "word_length": 4,
        "text": "look",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7875000,
        "duration_milliseconds": 87,
        "text_offset": 15,
        "word_length": 2,
        "text": "at",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9000000,
        "duration_milliseconds": 150,
        "text_offset": 18,
        "word_length": 3,
        "text": "all",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10750000,
        "duration_milliseconds": 100,
        "text_offset": 22,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11875000,
        "duration_milliseconds": 312,
        "text_offset": 26,
        "word_length": 7,
        "text": "weights",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15125000,
        "duration_milliseconds": 112,
        "text_offset": 34,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16500000,
        "duration_milliseconds": 200,
        "text_offset": 38,
        "word_length": 3,
        "text": "sum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 18750000,
        "duration_milliseconds": 137,
        "text_offset": 42,
        "word_length": 4,
        "text": "them",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20250000,
        "duration_milliseconds": 262,
        "text_offset": 47,
        "word_length": 2,
        "text": "up",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23125000,
        "duration_milliseconds": 100,
        "text_offset": 49,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "we-take-a-look-at-all-the-weights-and-sum-them-up-b3d8f0d5.mp3",
    "final_audio": "we-take-a-look-at-all-the-weights-and-sum-them-up-b3d8f0d5.mp3"
  },
  {
    "input_text": "This is the value for our approximated solution.",
    "input_data": {
      "input_text": "This is the value for our approximated solution.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">This is the value for our approximated solution.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">This is the value for our approximated solution.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 275,
        "text_offset": 0,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3375000,
        "duration_milliseconds": 137,
        "text_offset": 5,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5000000,
        "duration_milliseconds": 100,
        "text_offset": 8,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6250000,
        "duration_milliseconds": 400,
        "text_offset": 12,
        "word_length": 5,
        "text": "value",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10500000,
        "duration_milliseconds": 200,
        "text_offset": 18,
        "word_length": 3,
        "text": "for",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12750000,
        "duration_milliseconds": 137,
        "text_offset": 22,
        "word_length": 3,
        "text": "our",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14250000,
        "duration_milliseconds": 787,
        "text_offset": 26,
        "word_length": 12,
        "text": "approximated",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22375000,
        "duration_milliseconds": 587,
        "text_offset": 39,
        "word_length": 8,
        "text": "solution",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28375000,
        "duration_milliseconds": 100,
        "text_offset": 47,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "this-is-the-value-for-our-approximated-solution-d7980c3a.mp3",
    "final_audio": "this-is-the-value-for-our-approximated-solution-d7980c3a.mp3"
  },
  {
    "input_text": "But now we still don't now how good this is compared to the optimum.",
    "input_data": {
      "input_text": "But now we still don't now how good this is compared to the optimum.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">But now we still don't now how good this is compared to the optimum.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">But now we still don't now how good this is compared to the optimum.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 175,
        "text_offset": 0,
        "word_length": 3,
        "text": "But",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2375000,
        "duration_milliseconds": 150,
        "text_offset": 4,
        "word_length": 3,
        "text": "now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4125000,
        "duration_milliseconds": 137,
        "text_offset": 8,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5750000,
        "duration_milliseconds": 262,
        "text_offset": 11,
        "word_length": 5,
        "text": "still",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8500000,
        "duration_milliseconds": 187,
        "text_offset": 17,
        "word_length": 5,
        "text": "don't",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10500000,
        "duration_milliseconds": 162,
        "text_offset": 23,
        "word_length": 3,
        "text": "now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12250000,
        "duration_milliseconds": 187,
        "text_offset": 27,
        "word_length": 3,
        "text": "how",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14375000,
        "duration_milliseconds": 225,
        "text_offset": 31,
        "word_length": 4,
        "text": "good",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16875000,
        "duration_milliseconds": 175,
        "text_offset": 36,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 18750000,
        "duration_milliseconds": 125,
        "text_offset": 41,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20125000,
        "duration_milliseconds": 412,
        "text_offset": 44,
        "word_length": 8,
        "text": "compared",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24375000,
        "duration_milliseconds": 75,
        "text_offset": 53,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 25375000,
        "duration_milliseconds": 112,
        "text_offset": 56,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26750000,
        "duration_milliseconds": 487,
        "text_offset": 60,
        "word_length": 7,
        "text": "optimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 31750000,
        "duration_milliseconds": 100,
        "text_offset": 67,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "but-now-we-still-don-t-now-how-good-this-is-5a8fe60a.mp3",
    "final_audio": "but-now-we-still-don-t-now-how-good-this-is-5a8fe60a.mp3"
  },
  {
    "input_text": "For this we use the lower bound.",
    "input_data": {
      "input_text": "For this we use the lower bound.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">For this we use the lower bound.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">For this we use the lower bound.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 212,
        "text_offset": 0,
        "word_length": 3,
        "text": "For",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2875000,
        "duration_milliseconds": 212,
        "text_offset": 4,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5125000,
        "duration_milliseconds": 125,
        "text_offset": 9,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6625000,
        "duration_milliseconds": 262,
        "text_offset": 12,
        "word_length": 3,
        "text": "use",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9500000,
        "duration_milliseconds": 112,
        "text_offset": 16,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10875000,
        "duration_milliseconds": 312,
        "text_offset": 20,
        "word_length": 5,
        "text": "lower",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14250000,
        "duration_milliseconds": 475,
        "text_offset": 26,
        "word_length": 5,
        "text": "bound",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19250000,
        "duration_milliseconds": 100,
        "text_offset": 31,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "for-this-we-use-the-lower-bound-1c87d913.mp3",
    "final_audio": "for-this-we-use-the-lower-bound-1c87d913.mp3"
  },
  {
    "input_text": "The lower bound is the value of the sum of every weight of every edge in a minimum spanning tree.",
    "input_data": {
      "input_text": "The lower bound is the value of the sum of every weight of every edge in a minimum spanning tree.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">The lower bound is the value of the sum of every weight of every edge in a minimum spanning tree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">The lower bound is the value of the sum of every weight of every edge in a minimum spanning tree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 137,
        "text_offset": 0,
        "word_length": 3,
        "text": "The",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2125000,
        "duration_milliseconds": 300,
        "text_offset": 4,
        "word_length": 5,
        "text": "lower",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5375000,
        "duration_milliseconds": 337,
        "text_offset": 10,
        "word_length": 5,
        "text": "bound",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 112,
        "text_offset": 16,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10250000,
        "duration_milliseconds": 100,
        "text_offset": 19,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11500000,
        "duration_milliseconds": 375,
        "text_offset": 23,
        "word_length": 5,
        "text": "value",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15500000,
        "duration_milliseconds": 87,
        "text_offset": 29,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16625000,
        "duration_milliseconds": 100,
        "text_offset": 32,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17875000,
        "duration_milliseconds": 200,
        "text_offset": 36,
        "word_length": 3,
        "text": "sum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20000000,
        "duration_milliseconds": 100,
        "text_offset": 40,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21250000,
        "duration_milliseconds": 237,
        "text_offset": 43,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23875000,
        "duration_milliseconds": 212,
        "text_offset": 49,
        "word_length": 6,
        "text": "weight",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26125000,
        "duration_milliseconds": 87,
        "text_offset": 56,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27250000,
        "duration_milliseconds": 250,
        "text_offset": 59,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29875000,
        "duration_milliseconds": 225,
        "text_offset": 65,
        "word_length": 4,
        "text": "edge",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32375000,
        "duration_milliseconds": 100,
        "text_offset": 70,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33625000,
        "duration_milliseconds": 50,
        "text_offset": 73,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34375000,
        "duration_milliseconds": 375,
        "text_offset": 75,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 38375000,
        "duration_milliseconds": 375,
        "text_offset": 83,
        "word_length": 8,
        "text": "spanning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 42250000,
        "duration_milliseconds": 337,
        "text_offset": 92,
        "word_length": 4,
        "text": "tree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 45875000,
        "duration_milliseconds": 100,
        "text_offset": 96,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "the-lower-bound-is-the-value-of-the-sum-of-every-805df4f2.mp3",
    "final_audio": "the-lower-bound-is-the-value-of-the-sum-of-every-805df4f2.mp3"
  },
  {
    "input_text": "So imagine we have these nodes from before.",
    "input_data": {
      "input_text": "So imagine we have these nodes from before.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">So imagine we have these nodes from before.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">So imagine we have these nodes from before.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 250,
        "text_offset": 0,
        "word_length": 2,
        "text": "So",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3250000,
        "duration_milliseconds": 450,
        "text_offset": 3,
        "word_length": 7,
        "text": "imagine",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8000000,
        "duration_milliseconds": 125,
        "text_offset": 11,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9500000,
        "duration_milliseconds": 212,
        "text_offset": 14,
        "word_length": 4,
        "text": "have",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11875000,
        "duration_milliseconds": 187,
        "text_offset": 19,
        "word_length": 5,
        "text": "these",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14000000,
        "duration_milliseconds": 287,
        "text_offset": 25,
        "word_length": 5,
        "text": "nodes",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17125000,
        "duration_milliseconds": 175,
        "text_offset": 31,
        "word_length": 4,
        "text": "from",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19000000,
        "duration_milliseconds": 562,
        "text_offset": 36,
        "word_length": 6,
        "text": "before",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24875000,
        "duration_milliseconds": 100,
        "text_offset": 42,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "so-imagine-we-have-these-nodes-from-before-a406d02c.mp3",
    "final_audio": "so-imagine-we-have-these-nodes-from-before-a406d02c.mp3"
  },
  {
    "input_text": "We add the edges and their weights to the nodes so we get our minimal spanning tree.",
    "input_data": {
      "input_text": "We add the edges and their weights to the nodes so we get our minimal spanning tree.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We add the edges and their weights to the nodes so we get our minimal spanning tree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We add the edges and their weights to the nodes so we get our minimal spanning tree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 200,
        "text_offset": 0,
        "word_length": 2,
        "text": "We",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2750000,
        "duration_milliseconds": 175,
        "text_offset": 3,
        "word_length": 3,
        "text": "add",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4750000,
        "duration_milliseconds": 100,
        "text_offset": 7,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6000000,
        "duration_milliseconds": 387,
        "text_offset": 11,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10125000,
        "duration_milliseconds": 87,
        "text_offset": 17,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11250000,
        "duration_milliseconds": 150,
        "text_offset": 21,
        "word_length": 5,
        "text": "their",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13000000,
        "duration_milliseconds": 237,
        "text_offset": 27,
        "word_length": 7,
        "text": "weights",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15500000,
        "duration_milliseconds": 87,
        "text_offset": 35,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16625000,
        "duration_milliseconds": 100,
        "text_offset": 38,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17750000,
        "duration_milliseconds": 325,
        "text_offset": 42,
        "word_length": 5,
        "text": "nodes",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21250000,
        "duration_milliseconds": 112,
        "text_offset": 48,
        "word_length": 2,
        "text": "so",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22625000,
        "duration_milliseconds": 125,
        "text_offset": 51,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24000000,
        "duration_milliseconds": 187,
        "text_offset": 54,
        "word_length": 3,
        "text": "get",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26125000,
        "duration_milliseconds": 112,
        "text_offset": 58,
        "word_length": 3,
        "text": "our",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27375000,
        "duration_milliseconds": 362,
        "text_offset": 62,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 31250000,
        "duration_milliseconds": 400,
        "text_offset": 70,
        "word_length": 8,
        "text": "spanning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35500000,
        "duration_milliseconds": 337,
        "text_offset": 79,
        "word_length": 4,
        "text": "tree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39125000,
        "duration_milliseconds": 100,
        "text_offset": 83,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "we-add-the-edges-and-their-weights-to-the-nodes-so-87ad4e09.mp3",
    "final_audio": "we-add-the-edges-and-their-weights-to-the-nodes-so-87ad4e09.mp3"
  },
  {
    "input_text": "We take again a look at all the weights and sum them up.",
    "input_data": {
      "input_text": "We take again a look at all the weights and sum them up.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We take again a look at all the weights and sum them up.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We take again a look at all the weights and sum them up.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 175,
        "text_offset": 0,
        "word_length": 2,
        "text": "We",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2500000,
        "duration_milliseconds": 200,
        "text_offset": 3,
        "word_length": 4,
        "text": "take",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4625000,
        "duration_milliseconds": 275,
        "text_offset": 8,
        "word_length": 5,
        "text": "again",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7625000,
        "duration_milliseconds": 62,
        "text_offset": 14,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8500000,
        "duration_milliseconds": 212,
        "text_offset": 16,
        "word_length": 4,
        "text": "look",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10875000,
        "duration_milliseconds": 87,
        "text_offset": 21,
        "word_length": 2,
        "text": "at",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12000000,
        "duration_milliseconds": 137,
        "text_offset": 24,
        "word_length": 3,
        "text": "all",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13625000,
        "duration_milliseconds": 100,
        "text_offset": 28,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14750000,
        "duration_milliseconds": 312,
        "text_offset": 32,
        "word_length": 7,
        "text": "weights",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 18000000,
        "duration_milliseconds": 112,
        "text_offset": 40,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19375000,
        "duration_milliseconds": 200,
        "text_offset": 44,
        "word_length": 3,
        "text": "sum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21625000,
        "duration_milliseconds": 137,
        "text_offset": 48,
        "word_length": 4,
        "text": "them",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23125000,
        "duration_milliseconds": 262,
        "text_offset": 53,
        "word_length": 2,
        "text": "up",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26000000,
        "duration_milliseconds": 100,
        "text_offset": 55,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "we-take-again-a-look-at-all-the-weights-and-sum-872dc865.mp3",
    "final_audio": "we-take-again-a-look-at-all-the-weights-and-sum-872dc865.mp3"
  },
  {
    "input_text": "This is the value of our lower bound.",
    "input_data": {
      "input_text": "This is the value of our lower bound.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">This is the value of our lower bound.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">This is the value of our lower bound.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 275,
        "text_offset": 0,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3375000,
        "duration_milliseconds": 125,
        "text_offset": 5,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4875000,
        "duration_milliseconds": 100,
        "text_offset": 8,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6000000,
        "duration_milliseconds": 425,
        "text_offset": 12,
        "word_length": 5,
        "text": "value",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10500000,
        "duration_milliseconds": 112,
        "text_offset": 18,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11875000,
        "duration_milliseconds": 150,
        "text_offset": 21,
        "word_length": 3,
        "text": "our",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13625000,
        "duration_milliseconds": 325,
        "text_offset": 25,
        "word_length": 5,
        "text": "lower",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17125000,
        "duration_milliseconds": 462,
        "text_offset": 31,
        "word_length": 5,
        "text": "bound",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22000000,
        "duration_milliseconds": 100,
        "text_offset": 36,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "this-is-the-value-of-our-lower-bound-333b1923.mp3",
    "final_audio": "this-is-the-value-of-our-lower-bound-333b1923.mp3"
  },
  {
    "input_text": "Now we have a value which we can compare to our approximated solution and we know how good it is!",
    "input_data": {
      "input_text": "Now we have a value which we can compare to our approximated solution and we know how good it is!",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we have a value which we can compare to our approximated solution and we know how good it is!</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we have a value which we can compare to our approximated solution and we know how good it is!</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 237,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3000000,
        "duration_milliseconds": 112,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4375000,
        "duration_milliseconds": 150,
        "text_offset": 7,
        "word_length": 4,
        "text": "have",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6000000,
        "duration_milliseconds": 62,
        "text_offset": 12,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6875000,
        "duration_milliseconds": 387,
        "text_offset": 14,
        "word_length": 5,
        "text": "value",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11000000,
        "duration_milliseconds": 175,
        "text_offset": 20,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12875000,
        "duration_milliseconds": 125,
        "text_offset": 26,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14375000,
        "duration_milliseconds": 150,
        "text_offset": 29,
        "word_length": 3,
        "text": "can",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16125000,
        "duration_milliseconds": 375,
        "text_offset": 33,
        "word_length": 7,
        "text": "compare",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20125000,
        "duration_milliseconds": 125,
        "text_offset": 41,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21625000,
        "duration_milliseconds": 137,
        "text_offset": 44,
        "word_length": 3,
        "text": "our",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23125000,
        "duration_milliseconds": 700,
        "text_offset": 48,
        "word_length": 12,
        "text": "approximated",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30375000,
        "duration_milliseconds": 450,
        "text_offset": 61,
        "word_length": 8,
        "text": "solution",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35125000,
        "duration_milliseconds": 100,
        "text_offset": 70,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36375000,
        "duration_milliseconds": 112,
        "text_offset": 74,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37750000,
        "duration_milliseconds": 162,
        "text_offset": 77,
        "word_length": 4,
        "text": "know",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39500000,
        "duration_milliseconds": 162,
        "text_offset": 82,
        "word_length": 3,
        "text": "how",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41375000,
        "duration_milliseconds": 162,
        "text_offset": 86,
        "word_length": 4,
        "text": "good",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 43250000,
        "duration_milliseconds": 87,
        "text_offset": 91,
        "word_length": 2,
        "text": "it",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44375000,
        "duration_milliseconds": 325,
        "text_offset": 94,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 47875000,
        "duration_milliseconds": 100,
        "text_offset": 96,
        "word_length": 1,
        "text": "!",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "now-we-have-a-value-which-we-can-compare-to-our-f3fc8475.mp3",
    "final_audio": "now-we-have-a-value-which-we-can-compare-to-our-f3fc8475.mp3"
  },
  {
    "input_text": "Now we go on with the next topic",
    "input_data": {
      "input_text": "Now we go on with the next topic",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we go on with the next topic</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we go on with the next topic</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 275,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3375000,
        "duration_milliseconds": 137,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5000000,
        "duration_milliseconds": 250,
        "text_offset": 7,
        "word_length": 2,
        "text": "go",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7625000,
        "duration_milliseconds": 175,
        "text_offset": 10,
        "word_length": 2,
        "text": "on",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9500000,
        "duration_milliseconds": 125,
        "text_offset": 13,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11000000,
        "duration_milliseconds": 87,
        "text_offset": 18,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12000000,
        "duration_milliseconds": 250,
        "text_offset": 22,
        "word_length": 4,
        "text": "next",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14625000,
        "duration_milliseconds": 437,
        "text_offset": 27,
        "word_length": 5,
        "text": "topic",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "now-we-go-on-with-the-next-topic-b4db96e8.mp3",
    "final_audio": "now-we-go-on-with-the-next-topic-b4db96e8.mp3"
  },
  {
    "input_text": "In the following we will explain the christofides algorithm.",
    "input_data": {
      "input_text": "In the following we will explain the christofides algorithm.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">In the following we will explain the christofides algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">In the following we will explain the christofides algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 175,
        "text_offset": 0,
        "word_length": 2,
        "text": "In",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2375000,
        "duration_milliseconds": 100,
        "text_offset": 3,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3625000,
        "duration_milliseconds": 450,
        "text_offset": 7,
        "word_length": 9,
        "text": "following",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8375000,
        "duration_milliseconds": 125,
        "text_offset": 17,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9875000,
        "duration_milliseconds": 137,
        "text_offset": 20,
        "word_length": 4,
        "text": "will",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11500000,
        "duration_milliseconds": 412,
        "text_offset": 25,
        "word_length": 7,
        "text": "explain",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15875000,
        "duration_milliseconds": 112,
        "text_offset": 33,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17250000,
        "duration_milliseconds": 875,
        "text_offset": 37,
        "word_length": 12,
        "text": "christofides",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26250000,
        "duration_milliseconds": 650,
        "text_offset": 50,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32875000,
        "duration_milliseconds": 100,
        "text_offset": 59,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "in-the-following-we-will-explain-the-christofides-94a11300.mp3",
    "final_audio": "in-the-following-we-will-explain-the-christofides-94a11300.mp3"
  },
  {
    "input_text": "This is an approximated algorithm to solve the TSP with a n to the third power complexity. This algorithm guarantees a solution that is at most fifthy percent longer than the optimal round trip.",
    "input_data": {
      "input_text": "This is an approximated algorithm to solve the TSP with a n to the third power complexity. This algorithm guarantees a solution that is at most fifthy percent longer than the optimal round trip.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">This is an approximated algorithm to solve the TSP with a n to the third power complexity. This algorithm guarantees a solution that is at most fifthy percent longer than the optimal round trip.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">This is an approximated algorithm to solve the TSP with a n to the third power complexity. This algorithm guarantees a solution that is at most fifthy percent longer than the optimal round trip.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 225,
        "text_offset": 0,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3000000,
        "duration_milliseconds": 112,
        "text_offset": 5,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4375000,
        "duration_milliseconds": 87,
        "text_offset": 8,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5500000,
        "duration_milliseconds": 762,
        "text_offset": 11,
        "word_length": 12,
        "text": "approximated",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13375000,
        "duration_milliseconds": 562,
        "text_offset": 24,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19250000,
        "duration_milliseconds": 100,
        "text_offset": 34,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20375000,
        "duration_milliseconds": 300,
        "text_offset": 37,
        "word_length": 5,
        "text": "solve",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23625000,
        "duration_milliseconds": 100,
        "text_offset": 43,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24750000,
        "duration_milliseconds": 562,
        "text_offset": 47,
        "word_length": 3,
        "text": "TSP",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30500000,
        "duration_milliseconds": 162,
        "text_offset": 51,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32375000,
        "duration_milliseconds": 112,
        "text_offset": 56,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33750000,
        "duration_milliseconds": 200,
        "text_offset": 58,
        "word_length": 1,
        "text": "n",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36000000,
        "duration_milliseconds": 100,
        "text_offset": 60,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37125000,
        "duration_milliseconds": 112,
        "text_offset": 63,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 38500000,
        "duration_milliseconds": 262,
        "text_offset": 67,
        "word_length": 5,
        "text": "third",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41250000,
        "duration_milliseconds": 287,
        "text_offset": 73,
        "word_length": 5,
        "text": "power",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44375000,
        "duration_milliseconds": 812,
        "text_offset": 79,
        "word_length": 10,
        "text": "complexity",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 52750000,
        "duration_milliseconds": 100,
        "text_offset": 89,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 61375000,
        "duration_milliseconds": 225,
        "text_offset": 91,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 63875000,
        "duration_milliseconds": 562,
        "text_offset": 96,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 69750000,
        "duration_milliseconds": 525,
        "text_offset": 106,
        "word_length": 10,
        "text": "guarantees",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 75250000,
        "duration_milliseconds": 62,
        "text_offset": 117,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76125000,
        "duration_milliseconds": 475,
        "text_offset": 119,
        "word_length": 8,
        "text": "solution",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 81125000,
        "duration_milliseconds": 125,
        "text_offset": 128,
        "word_length": 4,
        "text": "that",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 82500000,
        "duration_milliseconds": 112,
        "text_offset": 133,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 83875000,
        "duration_milliseconds": 100,
        "text_offset": 136,
        "word_length": 2,
        "text": "at",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 85125000,
        "duration_milliseconds": 275,
        "text_offset": 139,
        "word_length": 4,
        "text": "most",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 88125000,
        "duration_milliseconds": 300,
        "text_offset": 144,
        "word_length": 6,
        "text": "fifthy",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 91375000,
        "duration_milliseconds": 425,
        "text_offset": 151,
        "word_length": 7,
        "text": "percent",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 95750000,
        "duration_milliseconds": 337,
        "text_offset": 159,
        "word_length": 6,
        "text": "longer",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 99250000,
        "duration_milliseconds": 125,
        "text_offset": 166,
        "word_length": 4,
        "text": "than",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 100750000,
        "duration_milliseconds": 112,
        "text_offset": 171,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 102125000,
        "duration_milliseconds": 437,
        "text_offset": 175,
        "word_length": 7,
        "text": "optimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 106625000,
        "duration_milliseconds": 225,
        "text_offset": 183,
        "word_length": 5,
        "text": "round",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 109000000,
        "duration_milliseconds": 312,
        "text_offset": 189,
        "word_length": 4,
        "text": "trip",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 112250000,
        "duration_milliseconds": 100,
        "text_offset": 193,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "this-is-an-approximated-algorithm-to-solve-the-tsp-e9300d25.mp3",
    "final_audio": "this-is-an-approximated-algorithm-to-solve-the-tsp-e9300d25.mp3"
  },
  {
    "input_text": "First we will create a minimal spanning tree with every node by using the algrithm of Prim.",
    "input_data": {
      "input_text": "First we will create a minimal spanning tree with every node by using the algrithm of Prim.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">First we will create a minimal spanning tree with every node by using the algrithm of Prim.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">First we will create a minimal spanning tree with every node by using the algrithm of Prim.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 375,
        "text_offset": 0,
        "word_length": 5,
        "text": "First",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4500000,
        "duration_milliseconds": 112,
        "text_offset": 6,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5750000,
        "duration_milliseconds": 137,
        "text_offset": 9,
        "word_length": 4,
        "text": "will",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7375000,
        "duration_milliseconds": 312,
        "text_offset": 14,
        "word_length": 6,
        "text": "create",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10750000,
        "duration_milliseconds": 50,
        "text_offset": 21,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11375000,
        "duration_milliseconds": 375,
        "text_offset": 23,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15375000,
        "duration_milliseconds": 387,
        "text_offset": 31,
        "word_length": 8,
        "text": "spanning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19375000,
        "duration_milliseconds": 212,
        "text_offset": 40,
        "word_length": 4,
        "text": "tree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21625000,
        "duration_milliseconds": 187,
        "text_offset": 45,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23750000,
        "duration_milliseconds": 225,
        "text_offset": 50,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26250000,
        "duration_milliseconds": 275,
        "text_offset": 56,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29250000,
        "duration_milliseconds": 112,
        "text_offset": 61,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30625000,
        "duration_milliseconds": 362,
        "text_offset": 64,
        "word_length": 5,
        "text": "using",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34500000,
        "duration_milliseconds": 112,
        "text_offset": 70,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35875000,
        "duration_milliseconds": 475,
        "text_offset": 74,
        "word_length": 8,
        "text": "algrithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40875000,
        "duration_milliseconds": 112,
        "text_offset": 83,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 42250000,
        "duration_milliseconds": 375,
        "text_offset": 86,
        "word_length": 4,
        "text": "Prim",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 46250000,
        "duration_milliseconds": 100,
        "text_offset": 90,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "first-we-will-create-a-minimal-spanning-tree-with-a9ca7eef.mp3",
    "final_audio": "first-we-will-create-a-minimal-spanning-tree-with-a9ca7eef.mp3"
  },
  {
    "input_text": "Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom",
    "input_data": {
      "input_text": "Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 200,
        "text_offset": 0,
        "word_length": 4,
        "text": "Then",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2750000,
        "duration_milliseconds": 112,
        "text_offset": 5,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4125000,
        "duration_milliseconds": 250,
        "text_offset": 8,
        "word_length": 6,
        "text": "search",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6875000,
        "duration_milliseconds": 175,
        "text_offset": 15,
        "word_length": 3,
        "text": "for",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 212,
        "text_offset": 19,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11250000,
        "duration_milliseconds": 212,
        "text_offset": 25,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13500000,
        "duration_milliseconds": 62,
        "text_offset": 30,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14375000,
        "duration_milliseconds": 100,
        "text_offset": 33,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15625000,
        "duration_milliseconds": 312,
        "text_offset": 37,
        "word_length": 5,
        "text": "graph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19000000,
        "duration_milliseconds": 137,
        "text_offset": 43,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20625000,
        "duration_milliseconds": 87,
        "text_offset": 48,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21750000,
        "duration_milliseconds": 162,
        "text_offset": 51,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23500000,
        "duration_milliseconds": 362,
        "text_offset": 55,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28125000,
        "duration_milliseconds": 225,
        "text_offset": 61,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 30625000,
        "duration_milliseconds": 287,
        "text_offset": 63,
        "word_length": 7,
        "text": "meaning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33750000,
        "duration_milliseconds": 87,
        "text_offset": 71,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34750000,
        "duration_milliseconds": 200,
        "text_offset": 74,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37000000,
        "duration_milliseconds": 312,
        "text_offset": 78,
        "word_length": 6,
        "text": "number",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40250000,
        "duration_milliseconds": 75,
        "text_offset": 85,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41250000,
        "duration_milliseconds": 300,
        "text_offset": 88,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44500000,
        "duration_milliseconds": 125,
        "text_offset": 94,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 46000000,
        "duration_milliseconds": 362,
        "text_offset": 97,
        "word_length": 5,
        "text": "using",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 49875000,
        "duration_milliseconds": 112,
        "text_offset": 103,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 51250000,
        "duration_milliseconds": 587,
        "text_offset": 107,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 57375000,
        "duration_milliseconds": 112,
        "text_offset": 117,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58625000,
        "duration_milliseconds": 475,
        "text_offset": 120,
        "word_length": 7,
        "text": "Blossom",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "then-we-search-for-every-node-in-the-graph-with-an-cd2fe15a.mp3",
    "final_audio": "then-we-search-for-every-node-in-the-graph-with-an-cd2fe15a.mp3"
  },
  {
    "input_text": "After finding all the nodes with an odd degree we need to find a minimum perfect matching in the subgraph consisting only of the odd degree vertices. A perfect matching means every vertex is paired, and minimal means the sum of the lengths of the edges in the pairing is minimized.",
    "input_data": {
      "input_text": "After finding all the nodes with an odd degree we need to find a minimum perfect matching in the subgraph consisting only of the odd degree vertices. A perfect matching means every vertex is paired, and minimal means the sum of the lengths of the edges in the pairing is minimized.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">After finding all the nodes with an odd degree we need to find a minimum perfect matching in the subgraph consisting only of the odd degree vertices. A perfect matching means every vertex is paired, and minimal means the sum of the lengths of the edges in the pairing is minimized.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">After finding all the nodes with an odd degree we need to find a minimum perfect matching in the subgraph consisting only of the odd degree vertices. A perfect matching means every vertex is paired, and minimal means the sum of the lengths of the edges in the pairing is minimized.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 312,
        "text_offset": 0,
        "word_length": 5,
        "text": "After",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3875000,
        "duration_milliseconds": 350,
        "text_offset": 6,
        "word_length": 7,
        "text": "finding",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7625000,
        "duration_milliseconds": 112,
        "text_offset": 14,
        "word_length": 3,
        "text": "all",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 100,
        "text_offset": 18,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10125000,
        "duration_milliseconds": 275,
        "text_offset": 22,
        "word_length": 5,
        "text": "nodes",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13000000,
        "duration_milliseconds": 112,
        "text_offset": 28,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14375000,
        "duration_milliseconds": 100,
        "text_offset": 33,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15625000,
        "duration_milliseconds": 162,
        "text_offset": 36,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17500000,
        "duration_milliseconds": 312,
        "text_offset": 40,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20750000,
        "duration_milliseconds": 125,
        "text_offset": 47,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22250000,
        "duration_milliseconds": 150,
        "text_offset": 50,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23875000,
        "duration_milliseconds": 75,
        "text_offset": 55,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24875000,
        "duration_milliseconds": 237,
        "text_offset": 58,
        "word_length": 4,
        "text": "find",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27500000,
        "duration_milliseconds": 50,
        "text_offset": 63,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28125000,
        "duration_milliseconds": 412,
        "text_offset": 65,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32500000,
        "duration_milliseconds": 425,
        "text_offset": 73,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37000000,
        "duration_milliseconds": 375,
        "text_offset": 81,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40875000,
        "duration_milliseconds": 62,
        "text_offset": 90,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41625000,
        "duration_milliseconds": 100,
        "text_offset": 93,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 42875000,
        "duration_milliseconds": 525,
        "text_offset": 97,
        "word_length": 8,
        "text": "subgraph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 48375000,
        "duration_milliseconds": 550,
        "text_offset": 106,
        "word_length": 10,
        "text": "consisting",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 54125000,
        "duration_milliseconds": 237,
        "text_offset": 117,
        "word_length": 4,
        "text": "only",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 56750000,
        "duration_milliseconds": 62,
        "text_offset": 122,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 57625000,
        "duration_milliseconds": 100,
        "text_offset": 125,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58875000,
        "duration_milliseconds": 175,
        "text_offset": 129,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60750000,
        "duration_milliseconds": 275,
        "text_offset": 133,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 63750000,
        "duration_milliseconds": 637,
        "text_offset": 140,
        "word_length": 8,
        "text": "vertices",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 70375000,
        "duration_milliseconds": 100,
        "text_offset": 148,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 79000000,
        "duration_milliseconds": 137,
        "text_offset": 150,
        "word_length": 1,
        "text": "A",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 80500000,
        "duration_milliseconds": 412,
        "text_offset": 152,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 84875000,
        "duration_milliseconds": 375,
        "text_offset": 160,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 88875000,
        "duration_milliseconds": 300,
        "text_offset": 169,
        "word_length": 5,
        "text": "means",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 92000000,
        "duration_milliseconds": 212,
        "text_offset": 175,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 94250000,
        "duration_milliseconds": 437,
        "text_offset": 181,
        "word_length": 6,
        "text": "vertex",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 98750000,
        "duration_milliseconds": 112,
        "text_offset": 188,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 100125000,
        "duration_milliseconds": 350,
        "text_offset": 191,
        "word_length": 6,
        "text": "paired",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 104625000,
        "duration_milliseconds": 175,
        "text_offset": 197,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 106375000,
        "duration_milliseconds": 137,
        "text_offset": 199,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 108000000,
        "duration_milliseconds": 350,
        "text_offset": 203,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 111750000,
        "duration_milliseconds": 250,
        "text_offset": 211,
        "word_length": 5,
        "text": "means",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 114500000,
        "duration_milliseconds": 112,
        "text_offset": 217,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 115875000,
        "duration_milliseconds": 212,
        "text_offset": 221,
        "word_length": 3,
        "text": "sum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 118125000,
        "duration_milliseconds": 75,
        "text_offset": 225,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 119125000,
        "duration_milliseconds": 100,
        "text_offset": 228,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 120375000,
        "duration_milliseconds": 312,
        "text_offset": 232,
        "word_length": 7,
        "text": "lengths",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 123750000,
        "duration_milliseconds": 87,
        "text_offset": 240,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 124875000,
        "duration_milliseconds": 87,
        "text_offset": 243,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 126000000,
        "duration_milliseconds": 337,
        "text_offset": 247,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 129625000,
        "duration_milliseconds": 62,
        "text_offset": 253,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 130375000,
        "duration_milliseconds": 100,
        "text_offset": 256,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 131625000,
        "duration_milliseconds": 362,
        "text_offset": 260,
        "word_length": 7,
        "text": "pairing",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 135375000,
        "duration_milliseconds": 125,
        "text_offset": 268,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 136750000,
        "duration_milliseconds": 662,
        "text_offset": 271,
        "word_length": 9,
        "text": "minimized",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 143625000,
        "duration_milliseconds": 100,
        "text_offset": 280,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "after-finding-all-the-nodes-with-an-odd-degree-we-0f720219.mp3",
    "final_audio": "after-finding-all-the-nodes-with-an-odd-degree-we-0f720219.mp3"
  },
  {
    "input_text": "Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.",
    "input_data": {
      "input_text": "Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 200,
        "text_offset": 0,
        "word_length": 4,
        "text": "Then",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2750000,
        "duration_milliseconds": 100,
        "text_offset": 5,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4000000,
        "duration_milliseconds": 150,
        "text_offset": 8,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5625000,
        "duration_milliseconds": 100,
        "text_offset": 13,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6875000,
        "duration_milliseconds": 400,
        "text_offset": 16,
        "word_length": 7,
        "text": "combine",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11125000,
        "duration_milliseconds": 87,
        "text_offset": 24,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12250000,
        "duration_milliseconds": 362,
        "text_offset": 28,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16125000,
        "duration_milliseconds": 387,
        "text_offset": 36,
        "word_length": 8,
        "text": "spanning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20250000,
        "duration_milliseconds": 212,
        "text_offset": 45,
        "word_length": 4,
        "text": "tree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22625000,
        "duration_milliseconds": 137,
        "text_offset": 50,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24250000,
        "duration_milliseconds": 112,
        "text_offset": 55,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 25625000,
        "duration_milliseconds": 425,
        "text_offset": 59,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30000000,
        "duration_milliseconds": 362,
        "text_offset": 67,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33875000,
        "duration_milliseconds": 125,
        "text_offset": 76,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35375000,
        "duration_milliseconds": 300,
        "text_offset": 79,
        "word_length": 6,
        "text": "obtain",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 38625000,
        "duration_milliseconds": 62,
        "text_offset": 86,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39500000,
        "duration_milliseconds": 612,
        "text_offset": 88,
        "word_length": 10,
        "text": "multigraph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 45875000,
        "duration_milliseconds": 100,
        "text_offset": 99,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 47125000,
        "duration_milliseconds": 187,
        "text_offset": 102,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 49250000,
        "duration_milliseconds": 212,
        "text_offset": 108,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 51625000,
        "duration_milliseconds": 487,
        "text_offset": 114,
        "word_length": 6,
        "text": "vertex",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 56750000,
        "duration_milliseconds": 175,
        "text_offset": 121,
        "word_length": 3,
        "text": "has",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58750000,
        "duration_milliseconds": 100,
        "text_offset": 125,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60000000,
        "duration_milliseconds": 175,
        "text_offset": 128,
        "word_length": 4,
        "text": "even",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 61875000,
        "duration_milliseconds": 475,
        "text_offset": 133,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 66875000,
        "duration_milliseconds": 100,
        "text_offset": 139,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "then-we-need-to-combine-the-minimum-spanning-tree-ad2051d8.mp3",
    "final_audio": "then-we-need-to-combine-the-minimum-spanning-tree-ad2051d8.mp3"
  },
  {
    "input_text": "Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.",
    "input_data": {
      "input_text": "Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 325,
        "text_offset": 0,
        "word_length": 5,
        "text": "Since",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4000000,
        "duration_milliseconds": 237,
        "text_offset": 6,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6625000,
        "duration_milliseconds": 475,
        "text_offset": 12,
        "word_length": 6,
        "text": "vertex",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11625000,
        "duration_milliseconds": 175,
        "text_offset": 19,
        "word_length": 3,
        "text": "has",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13625000,
        "duration_milliseconds": 100,
        "text_offset": 23,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14875000,
        "duration_milliseconds": 187,
        "text_offset": 26,
        "word_length": 4,
        "text": "even",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17000000,
        "duration_milliseconds": 400,
        "text_offset": 31,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21875000,
        "duration_milliseconds": 112,
        "text_offset": 37,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 23000000,
        "duration_milliseconds": 162,
        "text_offset": 39,
        "word_length": 5,
        "text": "there",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24750000,
        "duration_milliseconds": 425,
        "text_offset": 45,
        "word_length": 6,
        "text": "exists",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29250000,
        "duration_milliseconds": 112,
        "text_offset": 52,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30625000,
        "duration_milliseconds": 550,
        "text_offset": 55,
        "word_length": 8,
        "text": "Eulerian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36375000,
        "duration_milliseconds": 375,
        "text_offset": 64,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40375000,
        "duration_milliseconds": 87,
        "text_offset": 72,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41500000,
        "duration_milliseconds": 175,
        "text_offset": 75,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 43375000,
        "duration_milliseconds": 575,
        "text_offset": 80,
        "word_length": 5,
        "text": "graph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 49375000,
        "duration_milliseconds": 100,
        "text_offset": 85,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 58000000,
        "duration_milliseconds": 175,
        "text_offset": 87,
        "word_length": 2,
        "text": "An",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60000000,
        "duration_milliseconds": 512,
        "text_offset": 90,
        "word_length": 8,
        "text": "Eulerian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 65375000,
        "duration_milliseconds": 375,
        "text_offset": 99,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 69250000,
        "duration_milliseconds": 125,
        "text_offset": 107,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 70750000,
        "duration_milliseconds": 62,
        "text_offset": 110,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 71625000,
        "duration_milliseconds": 312,
        "text_offset": 112,
        "word_length": 4,
        "text": "path",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 75000000,
        "duration_milliseconds": 150,
        "text_offset": 117,
        "word_length": 4,
        "text": "that",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76750000,
        "duration_milliseconds": 350,
        "text_offset": 122,
        "word_length": 6,
        "text": "visits",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 80500000,
        "duration_milliseconds": 212,
        "text_offset": 129,
        "word_length": 4,
        "text": "each",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 82875000,
        "duration_milliseconds": 150,
        "text_offset": 134,
        "word_length": 4,
        "text": "edge",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 84625000,
        "duration_milliseconds": 487,
        "text_offset": 139,
        "word_length": 7,
        "text": "exactly",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 89750000,
        "duration_milliseconds": 475,
        "text_offset": 147,
        "word_length": 4,
        "text": "once",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 94750000,
        "duration_milliseconds": 100,
        "text_offset": 151,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 103375000,
        "duration_milliseconds": 212,
        "text_offset": 153,
        "word_length": 2,
        "text": "We",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 105750000,
        "duration_milliseconds": 212,
        "text_offset": 156,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 108000000,
        "duration_milliseconds": 100,
        "text_offset": 161,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 109250000,
        "duration_milliseconds": 337,
        "text_offset": 164,
        "word_length": 4,
        "text": "find",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 112750000,
        "duration_milliseconds": 187,
        "text_offset": 169,
        "word_length": 2,
        "text": "it",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 114750000,
        "duration_milliseconds": 100,
        "text_offset": 171,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "since-every-vertex-has-an-even-degree-there-exists-20bb5a60.mp3",
    "final_audio": "since-every-vertex-has-an-even-degree-there-exists-20bb5a60.mp3"
  },
  {
    "input_text": "Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.",
    "input_data": {
      "input_text": "Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 237,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3125000,
        "duration_milliseconds": 125,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4625000,
        "duration_milliseconds": 375,
        "text_offset": 7,
        "word_length": 7,
        "text": "convert",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8625000,
        "duration_milliseconds": 75,
        "text_offset": 15,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9625000,
        "duration_milliseconds": 512,
        "text_offset": 19,
        "word_length": 8,
        "text": "Eulerian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15000000,
        "duration_milliseconds": 375,
        "text_offset": 28,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19000000,
        "duration_milliseconds": 125,
        "text_offset": 36,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20500000,
        "duration_milliseconds": 50,
        "text_offset": 39,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21250000,
        "duration_milliseconds": 712,
        "text_offset": 41,
        "word_length": 11,
        "text": "Hamiltonian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28625000,
        "duration_milliseconds": 387,
        "text_offset": 53,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32750000,
        "duration_milliseconds": 150,
        "text_offset": 61,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34500000,
        "duration_milliseconds": 462,
        "text_offset": 64,
        "word_length": 8,
        "text": "skipping",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39250000,
        "duration_milliseconds": 437,
        "text_offset": 73,
        "word_length": 8,
        "text": "repeated",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 43750000,
        "duration_milliseconds": 650,
        "text_offset": 82,
        "word_length": 8,
        "text": "vertices",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 50500000,
        "duration_milliseconds": 100,
        "text_offset": 90,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "now-we-convert-the-eulerian-circuit-to-a-5c9d1a2f.mp3",
    "final_audio": "now-we-convert-the-eulerian-circuit-to-a-5c9d1a2f.mp3"
  },
  {
    "input_text": "Let's take a look at the graph to visualize this algorithm.",
    "input_data": {
      "input_text": "Let's take a look at the graph to visualize this algorithm.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Let's take a look at the graph to visualize this algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Let's take a look at the graph to visualize this algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 300,
        "text_offset": 0,
        "word_length": 5,
        "text": "Let's",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3625000,
        "duration_milliseconds": 187,
        "text_offset": 6,
        "word_length": 4,
        "text": "take",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5750000,
        "duration_milliseconds": 62,
        "text_offset": 11,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6625000,
        "duration_milliseconds": 225,
        "text_offset": 13,
        "word_length": 4,
        "text": "look",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9125000,
        "duration_milliseconds": 75,
        "text_offset": 18,
        "word_length": 2,
        "text": "at",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10125000,
        "duration_milliseconds": 112,
        "text_offset": 21,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11500000,
        "duration_milliseconds": 325,
        "text_offset": 25,
        "word_length": 5,
        "text": "graph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15000000,
        "duration_milliseconds": 100,
        "text_offset": 31,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16250000,
        "duration_milliseconds": 600,
        "text_offset": 34,
        "word_length": 9,
        "text": "visualize",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22500000,
        "duration_milliseconds": 187,
        "text_offset": 44,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24625000,
        "duration_milliseconds": 625,
        "text_offset": 49,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 31125000,
        "duration_milliseconds": 100,
        "text_offset": 58,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "let-s-take-a-look-at-the-graph-to-visualize-this-c57f7870.mp3",
    "final_audio": "let-s-take-a-look-at-the-graph-to-visualize-this-c57f7870.mp3"
  },
  {
    "input_text": "Like explained before we create a minimal spanning tree.",
    "input_data": {
      "input_text": "Like explained before we create a minimal spanning tree.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Like explained before we create a minimal spanning tree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Like explained before we create a minimal spanning tree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 225,
        "text_offset": 0,
        "word_length": 4,
        "text": "Like",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3000000,
        "duration_milliseconds": 500,
        "text_offset": 5,
        "word_length": 9,
        "text": "explained",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8250000,
        "duration_milliseconds": 337,
        "text_offset": 15,
        "word_length": 6,
        "text": "before",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11750000,
        "duration_milliseconds": 125,
        "text_offset": 22,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13250000,
        "duration_milliseconds": 337,
        "text_offset": 25,
        "word_length": 6,
        "text": "create",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16875000,
        "duration_milliseconds": 50,
        "text_offset": 32,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17500000,
        "duration_milliseconds": 375,
        "text_offset": 34,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21500000,
        "duration_milliseconds": 400,
        "text_offset": 42,
        "word_length": 8,
        "text": "spanning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 25750000,
        "duration_milliseconds": 350,
        "text_offset": 51,
        "word_length": 4,
        "text": "tree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29500000,
        "duration_milliseconds": 100,
        "text_offset": 55,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "like-explained-before-we-create-a-minimal-spanning-44a9aef2.mp3",
    "final_audio": "like-explained-before-we-create-a-minimal-spanning-44a9aef2.mp3"
  },
  {
    "input_text": "Now we point out every node with an odd degree",
    "input_data": {
      "input_text": "Now we point out every node with an odd degree",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we point out every node with an odd degree</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we point out every node with an odd degree</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 250,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3250000,
        "duration_milliseconds": 125,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4625000,
        "duration_milliseconds": 262,
        "text_offset": 7,
        "word_length": 5,
        "text": "point",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7500000,
        "duration_milliseconds": 200,
        "text_offset": 13,
        "word_length": 3,
        "text": "out",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9625000,
        "duration_milliseconds": 225,
        "text_offset": 17,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12125000,
        "duration_milliseconds": 262,
        "text_offset": 23,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15000000,
        "duration_milliseconds": 137,
        "text_offset": 28,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16625000,
        "duration_milliseconds": 112,
        "text_offset": 33,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17875000,
        "duration_milliseconds": 162,
        "text_offset": 36,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19625000,
        "duration_milliseconds": 450,
        "text_offset": 40,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "now-we-point-out-every-node-with-an-odd-degree-02c8675e.mp3",
    "final_audio": "now-we-point-out-every-node-with-an-odd-degree-02c8675e.mp3"
  },
  {
    "input_text": "We can now point out the minimal perfect matching, so we add edges with the minimum weight until every node has an odd degree.",
    "input_data": {
      "input_text": "We can now point out the minimal perfect matching, so we add edges with the minimum weight until every node has an odd degree.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We can now point out the minimal perfect matching, so we add edges with the minimum weight until every node has an odd degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We can now point out the minimal perfect matching, so we add edges with the minimum weight until every node has an odd degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 162,
        "text_offset": 0,
        "word_length": 2,
        "text": "We",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2375000,
        "duration_milliseconds": 137,
        "text_offset": 3,
        "word_length": 3,
        "text": "can",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4000000,
        "duration_milliseconds": 175,
        "text_offset": 7,
        "word_length": 3,
        "text": "now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5875000,
        "duration_milliseconds": 250,
        "text_offset": 11,
        "word_length": 5,
        "text": "point",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8625000,
        "duration_milliseconds": 125,
        "text_offset": 17,
        "word_length": 3,
        "text": "out",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10125000,
        "duration_milliseconds": 87,
        "text_offset": 21,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11250000,
        "duration_milliseconds": 375,
        "text_offset": 25,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15250000,
        "duration_milliseconds": 400,
        "text_offset": 33,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19375000,
        "duration_milliseconds": 400,
        "text_offset": 41,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24250000,
        "duration_milliseconds": 162,
        "text_offset": 49,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 25875000,
        "duration_milliseconds": 100,
        "text_offset": 51,
        "word_length": 2,
        "text": "so",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27125000,
        "duration_milliseconds": 125,
        "text_offset": 54,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28625000,
        "duration_milliseconds": 162,
        "text_offset": 57,
        "word_length": 3,
        "text": "add",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30500000,
        "duration_milliseconds": 275,
        "text_offset": 61,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33500000,
        "duration_milliseconds": 137,
        "text_offset": 67,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35125000,
        "duration_milliseconds": 75,
        "text_offset": 72,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36000000,
        "duration_milliseconds": 387,
        "text_offset": 76,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40125000,
        "duration_milliseconds": 225,
        "text_offset": 84,
        "word_length": 6,
        "text": "weight",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 42500000,
        "duration_milliseconds": 337,
        "text_offset": 91,
        "word_length": 5,
        "text": "until",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 46000000,
        "duration_milliseconds": 212,
        "text_offset": 97,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 48375000,
        "duration_milliseconds": 212,
        "text_offset": 103,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 50750000,
        "duration_milliseconds": 187,
        "text_offset": 108,
        "word_length": 3,
        "text": "has",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 52875000,
        "duration_milliseconds": 100,
        "text_offset": 112,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 54000000,
        "duration_milliseconds": 162,
        "text_offset": 115,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 55750000,
        "duration_milliseconds": 425,
        "text_offset": 119,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60250000,
        "duration_milliseconds": 100,
        "text_offset": 125,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "we-can-now-point-out-the-minimal-perfect-matching-95146c38.mp3",
    "final_audio": "we-can-now-point-out-the-minimal-perfect-matching-95146c38.mp3"
  },
  {
    "input_text": "Now we are going to find an eulerian tour which hits every edge exact once.",
    "input_data": {
      "input_text": "Now we are going to find an eulerian tour which hits every edge exact once.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we are going to find an eulerian tour which hits every edge exact once.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we are going to find an eulerian tour which hits every edge exact once.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 250,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3250000,
        "duration_milliseconds": 112,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4625000,
        "duration_milliseconds": 100,
        "text_offset": 7,
        "word_length": 3,
        "text": "are",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5875000,
        "duration_milliseconds": 200,
        "text_offset": 11,
        "word_length": 5,
        "text": "going",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8000000,
        "duration_milliseconds": 75,
        "text_offset": 17,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 275,
        "text_offset": 20,
        "word_length": 4,
        "text": "find",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11875000,
        "duration_milliseconds": 75,
        "text_offset": 25,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12875000,
        "duration_milliseconds": 525,
        "text_offset": 28,
        "word_length": 8,
        "text": "eulerian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 18375000,
        "duration_milliseconds": 312,
        "text_offset": 37,
        "word_length": 4,
        "text": "tour",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21750000,
        "duration_milliseconds": 175,
        "text_offset": 42,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23750000,
        "duration_milliseconds": 237,
        "text_offset": 48,
        "word_length": 4,
        "text": "hits",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26250000,
        "duration_milliseconds": 275,
        "text_offset": 53,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29125000,
        "duration_milliseconds": 175,
        "text_offset": 59,
        "word_length": 4,
        "text": "edge",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 31000000,
        "duration_milliseconds": 412,
        "text_offset": 64,
        "word_length": 5,
        "text": "exact",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35375000,
        "duration_milliseconds": 387,
        "text_offset": 70,
        "word_length": 4,
        "text": "once",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39375000,
        "duration_milliseconds": 100,
        "text_offset": 74,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "now-we-are-going-to-find-an-eulerian-tour-which-332be64c.mp3",
    "final_audio": "now-we-are-going-to-find-an-eulerian-tour-which-332be64c.mp3"
  },
  {
    "input_text": "The last step will be to convert the euleric circle into a hamilton circle, so we have to delete all edges which make the circle visit a node which we have seen before. In our case these are the edges between 9 and 4.",
    "input_data": {
      "input_text": "The last step will be to convert the euleric circle into a hamilton circle, so we have to delete all edges which make the circle visit a node which we have seen before. In our case these are the edges between 9 and 4.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">The last step will be to convert the euleric circle into a hamilton circle, so we have to delete all edges which make the circle visit a node which we have seen before. In our case these are the edges between 9 and 4.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">The last step will be to convert the euleric circle into a hamilton circle, so we have to delete all edges which make the circle visit a node which we have seen before. In our case these are the edges between 9 and 4.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 137,
        "text_offset": 0,
        "word_length": 3,
        "text": "The",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2125000,
        "duration_milliseconds": 250,
        "text_offset": 4,
        "word_length": 4,
        "text": "last",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4875000,
        "duration_milliseconds": 250,
        "text_offset": 9,
        "word_length": 4,
        "text": "step",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7625000,
        "duration_milliseconds": 87,
        "text_offset": 14,
        "word_length": 4,
        "text": "will",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8750000,
        "duration_milliseconds": 112,
        "text_offset": 19,
        "word_length": 2,
        "text": "be",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10000000,
        "duration_milliseconds": 100,
        "text_offset": 22,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11250000,
        "duration_milliseconds": 400,
        "text_offset": 25,
        "word_length": 7,
        "text": "convert",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15500000,
        "duration_milliseconds": 75,
        "text_offset": 33,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16500000,
        "duration_milliseconds": 412,
        "text_offset": 37,
        "word_length": 7,
        "text": "euleric",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20875000,
        "duration_milliseconds": 387,
        "text_offset": 45,
        "word_length": 6,
        "text": "circle",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24875000,
        "duration_milliseconds": 200,
        "text_offset": 52,
        "word_length": 4,
        "text": "into",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27125000,
        "duration_milliseconds": 37,
        "text_offset": 57,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27625000,
        "duration_milliseconds": 462,
        "text_offset": 59,
        "word_length": 8,
        "text": "hamilton",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32500000,
        "duration_milliseconds": 400,
        "text_offset": 68,
        "word_length": 6,
        "text": "circle",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37500000,
        "duration_milliseconds": 187,
        "text_offset": 74,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 39375000,
        "duration_milliseconds": 100,
        "text_offset": 76,
        "word_length": 2,
        "text": "so",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40500000,
        "duration_milliseconds": 100,
        "text_offset": 79,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41750000,
        "duration_milliseconds": 150,
        "text_offset": 82,
        "word_length": 4,
        "text": "have",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 43375000,
        "duration_milliseconds": 87,
        "text_offset": 87,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44375000,
        "duration_milliseconds": 312,
        "text_offset": 90,
        "word_length": 6,
        "text": "delete",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 47750000,
        "duration_milliseconds": 225,
        "text_offset": 97,
        "word_length": 3,
        "text": "all",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 50250000,
        "duration_milliseconds": 300,
        "text_offset": 101,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 53500000,
        "duration_milliseconds": 187,
        "text_offset": 107,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 55500000,
        "duration_milliseconds": 175,
        "text_offset": 113,
        "word_length": 4,
        "text": "make",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 57500000,
        "duration_milliseconds": 100,
        "text_offset": 118,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58750000,
        "duration_milliseconds": 375,
        "text_offset": 122,
        "word_length": 6,
        "text": "circle",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 62625000,
        "duration_milliseconds": 287,
        "text_offset": 129,
        "word_length": 5,
        "text": "visit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 65750000,
        "duration_milliseconds": 37,
        "text_offset": 135,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 66250000,
        "duration_milliseconds": 275,
        "text_offset": 137,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 69250000,
        "duration_milliseconds": 187,
        "text_offset": 142,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 71250000,
        "duration_milliseconds": 125,
        "text_offset": 148,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 72750000,
        "duration_milliseconds": 112,
        "text_offset": 151,
        "word_length": 4,
        "text": "have",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 74000000,
        "duration_milliseconds": 225,
        "text_offset": 156,
        "word_length": 4,
        "text": "seen",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76500000,
        "duration_milliseconds": 525,
        "text_offset": 161,
        "word_length": 6,
        "text": "before",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 82000000,
        "duration_milliseconds": 100,
        "text_offset": 167,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 90625000,
        "duration_milliseconds": 162,
        "text_offset": 169,
        "word_length": 2,
        "text": "In",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 92500000,
        "duration_milliseconds": 125,
        "text_offset": 172,
        "word_length": 3,
        "text": "our",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 93875000,
        "duration_milliseconds": 262,
        "text_offset": 176,
        "word_length": 4,
        "text": "case",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 96750000,
        "duration_milliseconds": 212,
        "text_offset": 181,
        "word_length": 5,
        "text": "these",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 99125000,
        "duration_milliseconds": 100,
        "text_offset": 187,
        "word_length": 3,
        "text": "are",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 100250000,
        "duration_milliseconds": 87,
        "text_offset": 191,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 101375000,
        "duration_milliseconds": 387,
        "text_offset": 195,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 105500000,
        "duration_milliseconds": 362,
        "text_offset": 201,
        "word_length": 7,
        "text": "between",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 109375000,
        "duration_milliseconds": 250,
        "text_offset": 209,
        "word_length": 1,
        "text": "9",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 112000000,
        "duration_milliseconds": 87,
        "text_offset": 211,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 113125000,
        "duration_milliseconds": 487,
        "text_offset": 215,
        "word_length": 1,
        "text": "4",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 118250000,
        "duration_milliseconds": 100,
        "text_offset": 216,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "the-last-step-will-be-to-convert-the-euleric-3ff5adf2.mp3",
    "final_audio": "the-last-step-will-be-to-convert-the-euleric-3ff5adf2.mp3"
  },
  {
    "input_text": "If we take a look at the time complexity of the Christofides algorithm it is mainly determined by the step of finding a minimum perfect matching, which is n to the third power.",
    "input_data": {
      "input_text": "If we take a look at the time complexity of the Christofides algorithm it is mainly determined by the step of finding a minimum perfect matching, which is n to the third power.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">If we take a look at the time complexity of the Christofides algorithm it is mainly determined by the step of finding a minimum perfect matching, which is n to the third power.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">If we take a look at the time complexity of the Christofides algorithm it is mainly determined by the step of finding a minimum perfect matching, which is n to the third power.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 187,
        "text_offset": 0,
        "word_length": 2,
        "text": "If",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2625000,
        "duration_milliseconds": 112,
        "text_offset": 3,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3875000,
        "duration_milliseconds": 175,
        "text_offset": 6,
        "word_length": 4,
        "text": "take",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5750000,
        "duration_milliseconds": 62,
        "text_offset": 11,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6625000,
        "duration_milliseconds": 200,
        "text_offset": 13,
        "word_length": 4,
        "text": "look",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 62,
        "text_offset": 18,
        "word_length": 2,
        "text": "at",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9750000,
        "duration_milliseconds": 100,
        "text_offset": 21,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11000000,
        "duration_milliseconds": 275,
        "text_offset": 25,
        "word_length": 4,
        "text": "time",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13875000,
        "duration_milliseconds": 650,
        "text_offset": 30,
        "word_length": 10,
        "text": "complexity",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20625000,
        "duration_milliseconds": 62,
        "text_offset": 41,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21500000,
        "duration_milliseconds": 87,
        "text_offset": 44,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22625000,
        "duration_milliseconds": 750,
        "text_offset": 48,
        "word_length": 12,
        "text": "Christofides",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30375000,
        "duration_milliseconds": 525,
        "text_offset": 61,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35875000,
        "duration_milliseconds": 87,
        "text_offset": 71,
        "word_length": 2,
        "text": "it",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36875000,
        "duration_milliseconds": 125,
        "text_offset": 74,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 38250000,
        "duration_milliseconds": 325,
        "text_offset": 77,
        "word_length": 6,
        "text": "mainly",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41750000,
        "duration_milliseconds": 512,
        "text_offset": 84,
        "word_length": 10,
        "text": "determined",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 47125000,
        "duration_milliseconds": 125,
        "text_offset": 95,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 48500000,
        "duration_milliseconds": 112,
        "text_offset": 98,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 49875000,
        "duration_milliseconds": 250,
        "text_offset": 102,
        "word_length": 4,
        "text": "step",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 52500000,
        "duration_milliseconds": 112,
        "text_offset": 107,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 53875000,
        "duration_milliseconds": 375,
        "text_offset": 110,
        "word_length": 7,
        "text": "finding",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 57875000,
        "duration_milliseconds": 50,
        "text_offset": 118,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58500000,
        "duration_milliseconds": 400,
        "text_offset": 120,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 62750000,
        "duration_milliseconds": 400,
        "text_offset": 128,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 66875000,
        "duration_milliseconds": 387,
        "text_offset": 136,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 71625000,
        "duration_milliseconds": 162,
        "text_offset": 144,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 73250000,
        "duration_milliseconds": 175,
        "text_offset": 146,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 75125000,
        "duration_milliseconds": 125,
        "text_offset": 152,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76625000,
        "duration_milliseconds": 112,
        "text_offset": 155,
        "word_length": 1,
        "text": "n",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 78000000,
        "duration_milliseconds": 87,
        "text_offset": 157,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 79125000,
        "duration_milliseconds": 112,
        "text_offset": 160,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 80500000,
        "duration_milliseconds": 250,
        "text_offset": 164,
        "word_length": 5,
        "text": "third",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 83125000,
        "duration_milliseconds": 425,
        "text_offset": 170,
        "word_length": 5,
        "text": "power",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 87625000,
        "duration_milliseconds": 100,
        "text_offset": 175,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "if-we-take-a-look-at-the-time-complexity-of-the-310e118c.mp3",
    "final_audio": "if-we-take-a-look-at-the-time-complexity-of-the-310e118c.mp3"
  },
  {
    "input_text": "Now we go on with the next topic",
    "input_data": {
      "input_text": "Now we go on with the next topic",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we go on with the next topic</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we go on with the next topic</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 275,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3375000,
        "duration_milliseconds": 137,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5000000,
        "duration_milliseconds": 250,
        "text_offset": 7,
        "word_length": 2,
        "text": "go",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7625000,
        "duration_milliseconds": 175,
        "text_offset": 10,
        "word_length": 2,
        "text": "on",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9500000,
        "duration_milliseconds": 125,
        "text_offset": 13,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11000000,
        "duration_milliseconds": 87,
        "text_offset": 18,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12000000,
        "duration_milliseconds": 250,
        "text_offset": 22,
        "word_length": 4,
        "text": "next",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14625000,
        "duration_milliseconds": 437,
        "text_offset": 27,
        "word_length": 5,
        "text": "topic",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "now-we-go-on-with-the-next-topic-b4db96e8.mp3",
    "final_audio": "now-we-go-on-with-the-next-topic-b4db96e8.mp3"
  },
  {
    "input_text": "There are symmetrical and asymmetrical TSPs.",
    "input_data": {
      "input_text": "There are symmetrical and asymmetrical TSPs.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">There are symmetrical and asymmetrical TSPs.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">There are symmetrical and asymmetrical TSPs.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 212,
        "text_offset": 0,
        "word_length": 5,
        "text": "There",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2750000,
        "duration_milliseconds": 112,
        "text_offset": 6,
        "word_length": 3,
        "text": "are",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4125000,
        "duration_milliseconds": 675,
        "text_offset": 10,
        "word_length": 11,
        "text": "symmetrical",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11125000,
        "duration_milliseconds": 162,
        "text_offset": 22,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12875000,
        "duration_milliseconds": 775,
        "text_offset": 26,
        "word_length": 12,
        "text": "asymmetrical",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20875000,
        "duration_milliseconds": 900,
        "text_offset": 39,
        "word_length": 4,
        "text": "TSPs",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30125000,
        "duration_milliseconds": 100,
        "text_offset": 43,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "there-are-symmetrical-and-asymmetrical-tsps-c4eb97f5.mp3",
    "final_audio": "there-are-symmetrical-and-asymmetrical-tsps-c4eb97f5.mp3"
  },
  {
    "input_text": "First we will explain the symmetrical TSP",
    "input_data": {
      "input_text": "First we will explain the symmetrical TSP",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">First we will explain the symmetrical TSP</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">First we will explain the symmetrical TSP</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 400,
        "text_offset": 0,
        "word_length": 5,
        "text": "First",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4750000,
        "duration_milliseconds": 125,
        "text_offset": 6,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6250000,
        "duration_milliseconds": 137,
        "text_offset": 9,
        "word_length": 4,
        "text": "will",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7875000,
        "duration_milliseconds": 425,
        "text_offset": 14,
        "word_length": 7,
        "text": "explain",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12375000,
        "duration_milliseconds": 100,
        "text_offset": 22,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13500000,
        "duration_milliseconds": 650,
        "text_offset": 26,
        "word_length": 11,
        "text": "symmetrical",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20250000,
        "duration_milliseconds": 800,
        "text_offset": 38,
        "word_length": 3,
        "text": "TSP",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "first-we-will-explain-the-symmetrical-tsp-de54a032.mp3",
    "final_audio": "first-we-will-explain-the-symmetrical-tsp-de54a032.mp3"
  },
  {
    "input_text": "A TSP is called symmetrical, if the edges between two nodes have the same value in both directions. This means the way form one town to another would be exact the same in both directions. This isn't really accurate because of conditions of the landscape or construction sites.",
    "input_data": {
      "input_text": "A TSP is called symmetrical, if the edges between two nodes have the same value in both directions. This means the way form one town to another would be exact the same in both directions. This isn't really accurate because of conditions of the landscape or construction sites.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">A TSP is called symmetrical, if the edges between two nodes have the same value in both directions. This means the way form one town to another would be exact the same in both directions. This isn't really accurate because of conditions of the landscape or construction sites.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">A TSP is called symmetrical, if the edges between two nodes have the same value in both directions. This means the way form one town to another would be exact the same in both directions. This isn't really accurate because of conditions of the landscape or construction sites.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 137,
        "text_offset": 0,
        "word_length": 1,
        "text": "A",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2125000,
        "duration_milliseconds": 512,
        "text_offset": 2,
        "word_length": 3,
        "text": "TSP",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7500000,
        "duration_milliseconds": 125,
        "text_offset": 6,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 225,
        "text_offset": 9,
        "word_length": 6,
        "text": "called",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11375000,
        "duration_milliseconds": 625,
        "text_offset": 16,
        "word_length": 11,
        "text": "symmetrical",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 18500000,
        "duration_milliseconds": 100,
        "text_offset": 27,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 19500000,
        "duration_milliseconds": 100,
        "text_offset": 29,
        "word_length": 2,
        "text": "if",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20750000,
        "duration_milliseconds": 87,
        "text_offset": 32,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21875000,
        "duration_milliseconds": 312,
        "text_offset": 36,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 25250000,
        "duration_milliseconds": 350,
        "text_offset": 42,
        "word_length": 7,
        "text": "between",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29000000,
        "duration_milliseconds": 187,
        "text_offset": 50,
        "word_length": 3,
        "text": "two",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 31125000,
        "duration_milliseconds": 312,
        "text_offset": 54,
        "word_length": 5,
        "text": "nodes",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34500000,
        "duration_milliseconds": 125,
        "text_offset": 60,
        "word_length": 4,
        "text": "have",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36000000,
        "duration_milliseconds": 87,
        "text_offset": 65,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37000000,
        "duration_milliseconds": 275,
        "text_offset": 69,
        "word_length": 4,
        "text": "same",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40000000,
        "duration_milliseconds": 387,
        "text_offset": 74,
        "word_length": 5,
        "text": "value",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44125000,
        "duration_milliseconds": 100,
        "text_offset": 80,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 45375000,
        "duration_milliseconds": 212,
        "text_offset": 83,
        "word_length": 4,
        "text": "both",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 47625000,
        "duration_milliseconds": 650,
        "text_offset": 88,
        "word_length": 10,
        "text": "directions",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 54375000,
        "duration_milliseconds": 100,
        "text_offset": 98,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 63000000,
        "duration_milliseconds": 237,
        "text_offset": 100,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 65500000,
        "duration_milliseconds": 237,
        "text_offset": 105,
        "word_length": 5,
        "text": "means",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 68125000,
        "duration_milliseconds": 112,
        "text_offset": 111,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 69375000,
        "duration_milliseconds": 150,
        "text_offset": 115,
        "word_length": 3,
        "text": "way",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 71000000,
        "duration_milliseconds": 287,
        "text_offset": 119,
        "word_length": 4,
        "text": "form",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 74125000,
        "duration_milliseconds": 187,
        "text_offset": 124,
        "word_length": 3,
        "text": "one",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76250000,
        "duration_milliseconds": 275,
        "text_offset": 128,
        "word_length": 4,
        "text": "town",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 79250000,
        "duration_milliseconds": 125,
        "text_offset": 133,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 80750000,
        "duration_milliseconds": 362,
        "text_offset": 136,
        "word_length": 7,
        "text": "another",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 84625000,
        "duration_milliseconds": 112,
        "text_offset": 144,
        "word_length": 5,
        "text": "would",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 86000000,
        "duration_milliseconds": 125,
        "text_offset": 150,
        "word_length": 2,
        "text": "be",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 87500000,
        "duration_milliseconds": 412,
        "text_offset": 153,
        "word_length": 5,
        "text": "exact",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 91750000,
        "duration_milliseconds": 87,
        "text_offset": 159,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 92875000,
        "duration_milliseconds": 325,
        "text_offset": 163,
        "word_length": 4,
        "text": "same",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 96250000,
        "duration_milliseconds": 100,
        "text_offset": 168,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 97500000,
        "duration_milliseconds": 212,
        "text_offset": 171,
        "word_length": 4,
        "text": "both",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 99750000,
        "duration_milliseconds": 650,
        "text_offset": 176,
        "word_length": 10,
        "text": "directions",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 106500000,
        "duration_milliseconds": 100,
        "text_offset": 186,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 115000000,
        "duration_milliseconds": 212,
        "text_offset": 188,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 117375000,
        "duration_milliseconds": 250,
        "text_offset": 193,
        "word_length": 5,
        "text": "isn't",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 120000000,
        "duration_milliseconds": 287,
        "text_offset": 199,
        "word_length": 6,
        "text": "really",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 123000000,
        "duration_milliseconds": 437,
        "text_offset": 206,
        "word_length": 8,
        "text": "accurate",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 127500000,
        "duration_milliseconds": 312,
        "text_offset": 215,
        "word_length": 7,
        "text": "because",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 130875000,
        "duration_milliseconds": 75,
        "text_offset": 223,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 131875000,
        "duration_milliseconds": 550,
        "text_offset": 226,
        "word_length": 10,
        "text": "conditions",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 137625000,
        "duration_milliseconds": 75,
        "text_offset": 237,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 138625000,
        "duration_milliseconds": 100,
        "text_offset": 240,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 139875000,
        "duration_milliseconds": 500,
        "text_offset": 244,
        "word_length": 9,
        "text": "landscape",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 145000000,
        "duration_milliseconds": 125,
        "text_offset": 254,
        "word_length": 2,
        "text": "or",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 146375000,
        "duration_milliseconds": 637,
        "text_offset": 257,
        "word_length": 12,
        "text": "construction",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 153000000,
        "duration_milliseconds": 462,
        "text_offset": 270,
        "word_length": 5,
        "text": "sites",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 157750000,
        "duration_milliseconds": 100,
        "text_offset": 275,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "a-tsp-is-called-symmetrical-if-the-edges-between-97121736.mp3",
    "final_audio": "a-tsp-is-called-symmetrical-if-the-edges-between-97121736.mp3"
  },
  {
    "input_text": "Thats why there is also a asymmetrical TSP.",
    "input_data": {
      "input_text": "Thats why there is also a asymmetrical TSP.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Thats why there is also a asymmetrical TSP.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Thats why there is also a asymmetrical TSP.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 275,
        "text_offset": 0,
        "word_length": 5,
        "text": "Thats",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3375000,
        "duration_milliseconds": 137,
        "text_offset": 6,
        "word_length": 3,
        "text": "why",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4875000,
        "duration_milliseconds": 187,
        "text_offset": 10,
        "word_length": 5,
        "text": "there",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7000000,
        "duration_milliseconds": 125,
        "text_offset": 16,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8500000,
        "duration_milliseconds": 275,
        "text_offset": 19,
        "word_length": 4,
        "text": "also",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11500000,
        "duration_milliseconds": 87,
        "text_offset": 24,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12500000,
        "duration_milliseconds": 775,
        "text_offset": 26,
        "word_length": 12,
        "text": "asymmetrical",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20500000,
        "duration_milliseconds": 762,
        "text_offset": 39,
        "word_length": 3,
        "text": "TSP",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28375000,
        "duration_milliseconds": 100,
        "text_offset": 42,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "thats-why-there-is-also-a-asymmetrical-tsp-62980a24.mp3",
    "final_audio": "thats-why-there-is-also-a-asymmetrical-tsp-62980a24.mp3"
  },
  {
    "input_text": "The TSP is called asymmetrical if there are two edges between every node and they don't have the same weight. As you can see the graph is then directed. This is way more accurate to the real world, but this is also twice as complex to solve then the symmetrical. This is why we only observe symmetrical TSPs in the following.",
    "input_data": {
      "input_text": "The TSP is called asymmetrical if there are two edges between every node and they don't have the same weight. As you can see the graph is then directed. This is way more accurate to the real world, but this is also twice as complex to solve then the symmetrical. This is why we only observe symmetrical TSPs in the following.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">The TSP is called asymmetrical if there are two edges between every node and they don't have the same weight. As you can see the graph is then directed. This is way more accurate to the real world, but this is also twice as complex to solve then the symmetrical. This is why we only observe symmetrical TSPs in the following.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">The TSP is called asymmetrical if there are two edges between every node and they don't have the same weight. As you can see the graph is then directed. This is way more accurate to the real world, but this is also twice as complex to solve then the symmetrical. This is why we only observe symmetrical TSPs in the following.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 137,
        "text_offset": 0,
        "word_length": 3,
        "text": "The",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2125000,
        "duration_milliseconds": 500,
        "text_offset": 4,
        "word_length": 3,
        "text": "TSP",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7375000,
        "duration_milliseconds": 125,
        "text_offset": 8,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8750000,
        "duration_milliseconds": 262,
        "text_offset": 11,
        "word_length": 6,
        "text": "called",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11625000,
        "duration_milliseconds": 737,
        "text_offset": 18,
        "word_length": 12,
        "text": "asymmetrical",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19250000,
        "duration_milliseconds": 100,
        "text_offset": 31,
        "word_length": 2,
        "text": "if",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20375000,
        "duration_milliseconds": 150,
        "text_offset": 34,
        "word_length": 5,
        "text": "there",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22000000,
        "duration_milliseconds": 100,
        "text_offset": 40,
        "word_length": 3,
        "text": "are",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23125000,
        "duration_milliseconds": 225,
        "text_offset": 44,
        "word_length": 3,
        "text": "two",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 25625000,
        "duration_milliseconds": 300,
        "text_offset": 48,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28875000,
        "duration_milliseconds": 350,
        "text_offset": 54,
        "word_length": 7,
        "text": "between",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32625000,
        "duration_milliseconds": 225,
        "text_offset": 62,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35125000,
        "duration_milliseconds": 312,
        "text_offset": 68,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 38375000,
        "duration_milliseconds": 100,
        "text_offset": 73,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39625000,
        "duration_milliseconds": 100,
        "text_offset": 77,
        "word_length": 4,
        "text": "they",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40750000,
        "duration_milliseconds": 187,
        "text_offset": 82,
        "word_length": 5,
        "text": "don't",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 42875000,
        "duration_milliseconds": 162,
        "text_offset": 88,
        "word_length": 4,
        "text": "have",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44750000,
        "duration_milliseconds": 100,
        "text_offset": 93,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 45875000,
        "duration_milliseconds": 262,
        "text_offset": 97,
        "word_length": 4,
        "text": "same",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 48625000,
        "duration_milliseconds": 350,
        "text_offset": 102,
        "word_length": 6,
        "text": "weight",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 52250000,
        "duration_milliseconds": 100,
        "text_offset": 108,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 60875000,
        "duration_milliseconds": 212,
        "text_offset": 110,
        "word_length": 2,
        "text": "As",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 63250000,
        "duration_milliseconds": 112,
        "text_offset": 113,
        "word_length": 3,
        "text": "you",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 64625000,
        "duration_milliseconds": 162,
        "text_offset": 117,
        "word_length": 3,
        "text": "can",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 66500000,
        "duration_milliseconds": 200,
        "text_offset": 121,
        "word_length": 3,
        "text": "see",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 68750000,
        "duration_milliseconds": 125,
        "text_offset": 125,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 70250000,
        "duration_milliseconds": 362,
        "text_offset": 129,
        "word_length": 5,
        "text": "graph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 74000000,
        "duration_milliseconds": 125,
        "text_offset": 135,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 75500000,
        "duration_milliseconds": 175,
        "text_offset": 138,
        "word_length": 4,
        "text": "then",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 77375000,
        "duration_milliseconds": 575,
        "text_offset": 143,
        "word_length": 8,
        "text": "directed",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 83375000,
        "duration_milliseconds": 100,
        "text_offset": 151,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 91875000,
        "duration_milliseconds": 212,
        "text_offset": 153,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 94250000,
        "duration_milliseconds": 112,
        "text_offset": 158,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 95625000,
        "duration_milliseconds": 175,
        "text_offset": 161,
        "word_length": 3,
        "text": "way",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 97500000,
        "duration_milliseconds": 262,
        "text_offset": 165,
        "word_length": 4,
        "text": "more",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 100250000,
        "duration_milliseconds": 375,
        "text_offset": 170,
        "word_length": 8,
        "text": "accurate",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 104250000,
        "duration_milliseconds": 87,
        "text_offset": 179,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 105375000,
        "duration_milliseconds": 100,
        "text_offset": 182,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 106500000,
        "duration_milliseconds": 250,
        "text_offset": 186,
        "word_length": 4,
        "text": "real",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 109250000,
        "duration_milliseconds": 275,
        "text_offset": 191,
        "word_length": 5,
        "text": "world",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 112875000,
        "duration_milliseconds": 100,
        "text_offset": 196,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 113875000,
        "duration_milliseconds": 137,
        "text_offset": 198,
        "word_length": 3,
        "text": "but",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 115500000,
        "duration_milliseconds": 162,
        "text_offset": 202,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 117250000,
        "duration_milliseconds": 125,
        "text_offset": 207,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 118750000,
        "duration_milliseconds": 250,
        "text_offset": 210,
        "word_length": 4,
        "text": "also",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 121375000,
        "duration_milliseconds": 325,
        "text_offset": 215,
        "word_length": 5,
        "text": "twice",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 124875000,
        "duration_milliseconds": 112,
        "text_offset": 221,
        "word_length": 2,
        "text": "as",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 126250000,
        "duration_milliseconds": 475,
        "text_offset": 224,
        "word_length": 7,
        "text": "complex",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 131250000,
        "duration_milliseconds": 100,
        "text_offset": 232,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 132500000,
        "duration_milliseconds": 300,
        "text_offset": 235,
        "word_length": 5,
        "text": "solve",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 135750000,
        "duration_milliseconds": 137,
        "text_offset": 241,
        "word_length": 4,
        "text": "then",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 137375000,
        "duration_milliseconds": 87,
        "text_offset": 246,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 138375000,
        "duration_milliseconds": 662,
        "text_offset": 250,
        "word_length": 11,
        "text": "symmetrical",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 145125000,
        "duration_milliseconds": 100,
        "text_offset": 261,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 153750000,
        "duration_milliseconds": 237,
        "text_offset": 263,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 156375000,
        "duration_milliseconds": 112,
        "text_offset": 268,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 157750000,
        "duration_milliseconds": 162,
        "text_offset": 271,
        "word_length": 3,
        "text": "why",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 159625000,
        "duration_milliseconds": 162,
        "text_offset": 275,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 161500000,
        "duration_milliseconds": 275,
        "text_offset": 278,
        "word_length": 4,
        "text": "only",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 164500000,
        "duration_milliseconds": 387,
        "text_offset": 283,
        "word_length": 7,
        "text": "observe",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 168625000,
        "duration_milliseconds": 637,
        "text_offset": 291,
        "word_length": 11,
        "text": "symmetrical",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 175250000,
        "duration_milliseconds": 700,
        "text_offset": 303,
        "word_length": 4,
        "text": "TSPs",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 182500000,
        "duration_milliseconds": 75,
        "text_offset": 308,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 183500000,
        "duration_milliseconds": 87,
        "text_offset": 311,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 184625000,
        "duration_milliseconds": 512,
        "text_offset": 315,
        "word_length": 9,
        "text": "following",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 190000000,
        "duration_milliseconds": 100,
        "text_offset": 324,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "the-tsp-is-called-asymmetrical-if-there-are-two-0e27fdc3.mp3",
    "final_audio": "the-tsp-is-called-asymmetrical-if-there-are-two-0e27fdc3.mp3"
  },
  {
    "input_text": "now we go on with the next topic",
    "input_data": {
      "input_text": "now we go on with the next topic",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">now we go on with the next topic</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">now we go on with the next topic</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 275,
        "text_offset": 0,
        "word_length": 3,
        "text": "now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3375000,
        "duration_milliseconds": 137,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5000000,
        "duration_milliseconds": 250,
        "text_offset": 7,
        "word_length": 2,
        "text": "go",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7625000,
        "duration_milliseconds": 175,
        "text_offset": 10,
        "word_length": 2,
        "text": "on",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9500000,
        "duration_milliseconds": 125,
        "text_offset": 13,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11000000,
        "duration_milliseconds": 87,
        "text_offset": 18,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12000000,
        "duration_milliseconds": 250,
        "text_offset": 22,
        "word_length": 4,
        "text": "next",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14625000,
        "duration_milliseconds": 437,
        "text_offset": 27,
        "word_length": 5,
        "text": "topic",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "now-we-go-on-with-the-next-topic-a458bd79.mp3",
    "final_audio": "now-we-go-on-with-the-next-topic-a458bd79.mp3"
  },
  {
    "input_text": "We need to point out how good is our approximated solution compared to the optimum. In some business cases there is a treshold given by the supervisor so you don't need to know how near the solution is to the optimum but in a theroetic case we want to know this. As we know to determine the optimum is not economically sensible so we need to find an other value to measure our solution.",
    "input_data": {
      "input_text": "We need to point out how good is our approximated solution compared to the optimum. In some business cases there is a treshold given by the supervisor so you don't need to know how near the solution is to the optimum but in a theroetic case we want to know this. As we know to determine the optimum is not economically sensible so we need to find an other value to measure our solution.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We need to point out how good is our approximated solution compared to the optimum. In some business cases there is a treshold given by the supervisor so you don't need to know how near the solution is to the optimum but in a theroetic case we want to know this. As we know to determine the optimum is not economically sensible so we need to find an other value to measure our solution.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We need to point out how good is our approximated solution compared to the optimum. In some business cases there is a treshold given by the supervisor so you don't need to know how near the solution is to the optimum but in a theroetic case we want to know this. As we know to determine the optimum is not economically sensible so we need to find an other value to measure our solution.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 162,
        "text_offset": 0,
        "word_length": 2,
        "text": "We",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2375000,
        "duration_milliseconds": 150,
        "text_offset": 3,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4125000,
        "duration_milliseconds": 87,
        "text_offset": 8,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5250000,
        "duration_milliseconds": 237,
        "text_offset": 11,
        "word_length": 5,
        "text": "point",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7875000,
        "duration_milliseconds": 162,
        "text_offset": 17,
        "word_length": 3,
        "text": "out",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9750000,
        "duration_milliseconds": 150,
        "text_offset": 21,
        "word_length": 3,
        "text": "how",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11500000,
        "duration_milliseconds": 225,
        "text_offset": 25,
        "word_length": 4,
        "text": "good",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14000000,
        "duration_milliseconds": 137,
        "text_offset": 30,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15625000,
        "duration_milliseconds": 125,
        "text_offset": 33,
        "word_length": 3,
        "text": "our",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17000000,
        "duration_milliseconds": 725,
        "text_offset": 37,
        "word_length": 12,
        "text": "approximated",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24500000,
        "duration_milliseconds": 462,
        "text_offset": 50,
        "word_length": 8,
        "text": "solution",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29375000,
        "duration_milliseconds": 400,
        "text_offset": 59,
        "word_length": 8,
        "text": "compared",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33500000,
        "duration_milliseconds": 75,
        "text_offset": 68,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34500000,
        "duration_milliseconds": 125,
        "text_offset": 71,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36000000,
        "duration_milliseconds": 487,
        "text_offset": 75,
        "word_length": 7,
        "text": "optimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41125000,
        "duration_milliseconds": 100,
        "text_offset": 82,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 49750000,
        "duration_milliseconds": 187,
        "text_offset": 84,
        "word_length": 2,
        "text": "In",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 51875000,
        "duration_milliseconds": 225,
        "text_offset": 87,
        "word_length": 4,
        "text": "some",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 54375000,
        "duration_milliseconds": 375,
        "text_offset": 92,
        "word_length": 8,
        "text": "business",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58375000,
        "duration_milliseconds": 400,
        "text_offset": 101,
        "word_length": 5,
        "text": "cases",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 62625000,
        "duration_milliseconds": 162,
        "text_offset": 107,
        "word_length": 5,
        "text": "there",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 64375000,
        "duration_milliseconds": 100,
        "text_offset": 113,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 65625000,
        "duration_milliseconds": 62,
        "text_offset": 116,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 66500000,
        "duration_milliseconds": 475,
        "text_offset": 118,
        "word_length": 8,
        "text": "treshold",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 71500000,
        "duration_milliseconds": 287,
        "text_offset": 127,
        "word_length": 5,
        "text": "given",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 74625000,
        "duration_milliseconds": 112,
        "text_offset": 133,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 75875000,
        "duration_milliseconds": 100,
        "text_offset": 136,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 77125000,
        "duration_milliseconds": 700,
        "text_offset": 140,
        "word_length": 10,
        "text": "supervisor",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 84375000,
        "duration_milliseconds": 100,
        "text_offset": 151,
        "word_length": 2,
        "text": "so",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 85500000,
        "duration_milliseconds": 100,
        "text_offset": 154,
        "word_length": 3,
        "text": "you",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 86750000,
        "duration_milliseconds": 200,
        "text_offset": 158,
        "word_length": 5,
        "text": "don't",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 88875000,
        "duration_milliseconds": 137,
        "text_offset": 164,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 90375000,
        "duration_milliseconds": 75,
        "text_offset": 169,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 91250000,
        "duration_milliseconds": 150,
        "text_offset": 172,
        "word_length": 4,
        "text": "know",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 92875000,
        "duration_milliseconds": 150,
        "text_offset": 177,
        "word_length": 3,
        "text": "how",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 94625000,
        "duration_milliseconds": 212,
        "text_offset": 181,
        "word_length": 4,
        "text": "near",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 97000000,
        "duration_milliseconds": 100,
        "text_offset": 186,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 98125000,
        "duration_milliseconds": 437,
        "text_offset": 190,
        "word_length": 8,
        "text": "solution",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 102625000,
        "duration_milliseconds": 125,
        "text_offset": 199,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 104125000,
        "duration_milliseconds": 87,
        "text_offset": 202,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 105250000,
        "duration_milliseconds": 112,
        "text_offset": 205,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 106625000,
        "duration_milliseconds": 462,
        "text_offset": 209,
        "word_length": 7,
        "text": "optimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 111500000,
        "duration_milliseconds": 150,
        "text_offset": 217,
        "word_length": 3,
        "text": "but",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 113125000,
        "duration_milliseconds": 100,
        "text_offset": 221,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 114375000,
        "duration_milliseconds": 50,
        "text_offset": 224,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 115125000,
        "duration_milliseconds": 525,
        "text_offset": 226,
        "word_length": 9,
        "text": "theroetic",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 120625000,
        "duration_milliseconds": 287,
        "text_offset": 236,
        "word_length": 4,
        "text": "case",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 123625000,
        "duration_milliseconds": 100,
        "text_offset": 241,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 124750000,
        "duration_milliseconds": 200,
        "text_offset": 244,
        "word_length": 4,
        "text": "want",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 126875000,
        "duration_milliseconds": 62,
        "text_offset": 249,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 127625000,
        "duration_milliseconds": 162,
        "text_offset": 252,
        "word_length": 4,
        "text": "know",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 129375000,
        "duration_milliseconds": 337,
        "text_offset": 257,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 133000000,
        "duration_milliseconds": 100,
        "text_offset": 261,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 141625000,
        "duration_milliseconds": 200,
        "text_offset": 263,
        "word_length": 2,
        "text": "As",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 143875000,
        "duration_milliseconds": 112,
        "text_offset": 266,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 145250000,
        "duration_milliseconds": 150,
        "text_offset": 269,
        "word_length": 4,
        "text": "know",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 146875000,
        "duration_milliseconds": 100,
        "text_offset": 274,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 148000000,
        "duration_milliseconds": 462,
        "text_offset": 277,
        "word_length": 9,
        "text": "determine",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 152875000,
        "duration_milliseconds": 112,
        "text_offset": 287,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 154250000,
        "duration_milliseconds": 462,
        "text_offset": 291,
        "word_length": 7,
        "text": "optimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 159000000,
        "duration_milliseconds": 125,
        "text_offset": 299,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 160500000,
        "duration_milliseconds": 225,
        "text_offset": 302,
        "word_length": 3,
        "text": "not",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 162875000,
        "duration_milliseconds": 700,
        "text_offset": 306,
        "word_length": 12,
        "text": "economically",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 170125000,
        "duration_milliseconds": 550,
        "text_offset": 319,
        "word_length": 8,
        "text": "sensible",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 175875000,
        "duration_milliseconds": 112,
        "text_offset": 328,
        "word_length": 2,
        "text": "so",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 177250000,
        "duration_milliseconds": 100,
        "text_offset": 331,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 178500000,
        "duration_milliseconds": 150,
        "text_offset": 334,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 180125000,
        "duration_milliseconds": 75,
        "text_offset": 339,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 181000000,
        "duration_milliseconds": 262,
        "text_offset": 342,
        "word_length": 4,
        "text": "find",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 183750000,
        "duration_milliseconds": 100,
        "text_offset": 347,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 185000000,
        "duration_milliseconds": 237,
        "text_offset": 350,
        "word_length": 5,
        "text": "other",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 187625000,
        "duration_milliseconds": 362,
        "text_offset": 356,
        "word_length": 5,
        "text": "value",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 191500000,
        "duration_milliseconds": 100,
        "text_offset": 362,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 192625000,
        "duration_milliseconds": 325,
        "text_offset": 365,
        "word_length": 7,
        "text": "measure",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 196125000,
        "duration_milliseconds": 112,
        "text_offset": 373,
        "word_length": 3,
        "text": "our",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 197500000,
        "duration_milliseconds": 550,
        "text_offset": 377,
        "word_length": 8,
        "text": "solution",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 203250000,
        "duration_milliseconds": 100,
        "text_offset": 385,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "we-need-to-point-out-how-good-is-our-approximated-87735ef9.mp3",
    "final_audio": "we-need-to-point-out-how-good-is-our-approximated-87735ef9.mp3"
  },
  {
    "input_text": "So lets imagine we have these nodes as a tsp",
    "input_data": {
      "input_text": "So lets imagine we have these nodes as a tsp",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">So lets imagine we have these nodes as a tsp</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">So lets imagine we have these nodes as a tsp</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 212,
        "text_offset": 0,
        "word_length": 2,
        "text": "So",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2875000,
        "duration_milliseconds": 200,
        "text_offset": 3,
        "word_length": 4,
        "text": "lets",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5000000,
        "duration_milliseconds": 450,
        "text_offset": 8,
        "word_length": 7,
        "text": "imagine",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9750000,
        "duration_milliseconds": 125,
        "text_offset": 16,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11250000,
        "duration_milliseconds": 225,
        "text_offset": 19,
        "word_length": 4,
        "text": "have",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13750000,
        "duration_milliseconds": 187,
        "text_offset": 24,
        "word_length": 5,
        "text": "these",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15875000,
        "duration_milliseconds": 325,
        "text_offset": 30,
        "word_length": 5,
        "text": "nodes",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19375000,
        "duration_milliseconds": 125,
        "text_offset": 36,
        "word_length": 2,
        "text": "as",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20875000,
        "duration_milliseconds": 62,
        "text_offset": 39,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21750000,
        "duration_milliseconds": 737,
        "text_offset": 41,
        "word_length": 3,
        "text": "tsp",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "so-lets-imagine-we-have-these-nodes-as-a-tsp-784bbb3c.mp3",
    "final_audio": "so-lets-imagine-we-have-these-nodes-as-a-tsp-784bbb3c.mp3"
  },
  {
    "input_text": "and this is our approximated solution.",
    "input_data": {
      "input_text": "and this is our approximated solution.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">and this is our approximated solution.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">and this is our approximated solution.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 175,
        "text_offset": 0,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2500000,
        "duration_milliseconds": 225,
        "text_offset": 4,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5000000,
        "duration_milliseconds": 162,
        "text_offset": 9,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6750000,
        "duration_milliseconds": 175,
        "text_offset": 12,
        "word_length": 3,
        "text": "our",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8625000,
        "duration_milliseconds": 787,
        "text_offset": 16,
        "word_length": 12,
        "text": "approximated",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16750000,
        "duration_milliseconds": 600,
        "text_offset": 29,
        "word_length": 8,
        "text": "solution",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22875000,
        "duration_milliseconds": 100,
        "text_offset": 37,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "and-this-is-our-approximated-solution-2dd423c1.mp3",
    "final_audio": "and-this-is-our-approximated-solution-2dd423c1.mp3"
  },
  {
    "input_text": "We take a look at all the weights and sum them up.",
    "input_data": {
      "input_text": "We take a look at all the weights and sum them up.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We take a look at all the weights and sum them up.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We take a look at all the weights and sum them up.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 175,
        "text_offset": 0,
        "word_length": 2,
        "text": "We",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2375000,
        "duration_milliseconds": 200,
        "text_offset": 3,
        "word_length": 4,
        "text": "take",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4625000,
        "duration_milliseconds": 62,
        "text_offset": 8,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5375000,
        "duration_milliseconds": 237,
        "text_offset": 10,
        "word_length": 4,
        "text": "look",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7875000,
        "duration_milliseconds": 87,
        "text_offset": 15,
        "word_length": 2,
        "text": "at",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9000000,
        "duration_milliseconds": 150,
        "text_offset": 18,
        "word_length": 3,
        "text": "all",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10750000,
        "duration_milliseconds": 100,
        "text_offset": 22,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11875000,
        "duration_milliseconds": 312,
        "text_offset": 26,
        "word_length": 7,
        "text": "weights",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15125000,
        "duration_milliseconds": 112,
        "text_offset": 34,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16500000,
        "duration_milliseconds": 200,
        "text_offset": 38,
        "word_length": 3,
        "text": "sum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 18750000,
        "duration_milliseconds": 137,
        "text_offset": 42,
        "word_length": 4,
        "text": "them",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20250000,
        "duration_milliseconds": 262,
        "text_offset": 47,
        "word_length": 2,
        "text": "up",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23125000,
        "duration_milliseconds": 100,
        "text_offset": 49,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "we-take-a-look-at-all-the-weights-and-sum-them-up-b3d8f0d5.mp3",
    "final_audio": "we-take-a-look-at-all-the-weights-and-sum-them-up-b3d8f0d5.mp3"
  },
  {
    "input_text": "This is the value for our approximated solution.",
    "input_data": {
      "input_text": "This is the value for our approximated solution.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">This is the value for our approximated solution.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">This is the value for our approximated solution.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 275,
        "text_offset": 0,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3375000,
        "duration_milliseconds": 137,
        "text_offset": 5,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5000000,
        "duration_milliseconds": 100,
        "text_offset": 8,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6250000,
        "duration_milliseconds": 400,
        "text_offset": 12,
        "word_length": 5,
        "text": "value",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10500000,
        "duration_milliseconds": 200,
        "text_offset": 18,
        "word_length": 3,
        "text": "for",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12750000,
        "duration_milliseconds": 137,
        "text_offset": 22,
        "word_length": 3,
        "text": "our",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14250000,
        "duration_milliseconds": 787,
        "text_offset": 26,
        "word_length": 12,
        "text": "approximated",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22375000,
        "duration_milliseconds": 587,
        "text_offset": 39,
        "word_length": 8,
        "text": "solution",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28375000,
        "duration_milliseconds": 100,
        "text_offset": 47,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "this-is-the-value-for-our-approximated-solution-d7980c3a.mp3",
    "final_audio": "this-is-the-value-for-our-approximated-solution-d7980c3a.mp3"
  },
  {
    "input_text": "But now we still don't now how good this is compared to the optimum.",
    "input_data": {
      "input_text": "But now we still don't now how good this is compared to the optimum.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">But now we still don't now how good this is compared to the optimum.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">But now we still don't now how good this is compared to the optimum.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 175,
        "text_offset": 0,
        "word_length": 3,
        "text": "But",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2375000,
        "duration_milliseconds": 150,
        "text_offset": 4,
        "word_length": 3,
        "text": "now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4125000,
        "duration_milliseconds": 137,
        "text_offset": 8,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5750000,
        "duration_milliseconds": 262,
        "text_offset": 11,
        "word_length": 5,
        "text": "still",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8500000,
        "duration_milliseconds": 187,
        "text_offset": 17,
        "word_length": 5,
        "text": "don't",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10500000,
        "duration_milliseconds": 162,
        "text_offset": 23,
        "word_length": 3,
        "text": "now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12250000,
        "duration_milliseconds": 187,
        "text_offset": 27,
        "word_length": 3,
        "text": "how",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14375000,
        "duration_milliseconds": 225,
        "text_offset": 31,
        "word_length": 4,
        "text": "good",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16875000,
        "duration_milliseconds": 175,
        "text_offset": 36,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 18750000,
        "duration_milliseconds": 125,
        "text_offset": 41,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20125000,
        "duration_milliseconds": 412,
        "text_offset": 44,
        "word_length": 8,
        "text": "compared",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24375000,
        "duration_milliseconds": 75,
        "text_offset": 53,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 25375000,
        "duration_milliseconds": 112,
        "text_offset": 56,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26750000,
        "duration_milliseconds": 487,
        "text_offset": 60,
        "word_length": 7,
        "text": "optimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 31750000,
        "duration_milliseconds": 100,
        "text_offset": 67,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "but-now-we-still-don-t-now-how-good-this-is-5a8fe60a.mp3",
    "final_audio": "but-now-we-still-don-t-now-how-good-this-is-5a8fe60a.mp3"
  },
  {
    "input_text": "For this we use the lower bound.",
    "input_data": {
      "input_text": "For this we use the lower bound.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">For this we use the lower bound.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">For this we use the lower bound.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 212,
        "text_offset": 0,
        "word_length": 3,
        "text": "For",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2875000,
        "duration_milliseconds": 212,
        "text_offset": 4,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5125000,
        "duration_milliseconds": 125,
        "text_offset": 9,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6625000,
        "duration_milliseconds": 262,
        "text_offset": 12,
        "word_length": 3,
        "text": "use",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9500000,
        "duration_milliseconds": 112,
        "text_offset": 16,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10875000,
        "duration_milliseconds": 312,
        "text_offset": 20,
        "word_length": 5,
        "text": "lower",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14250000,
        "duration_milliseconds": 475,
        "text_offset": 26,
        "word_length": 5,
        "text": "bound",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19250000,
        "duration_milliseconds": 100,
        "text_offset": 31,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "for-this-we-use-the-lower-bound-1c87d913.mp3",
    "final_audio": "for-this-we-use-the-lower-bound-1c87d913.mp3"
  },
  {
    "input_text": "The lower bound is the value of the sum of every weight of every edge in a minimum spanning tree.",
    "input_data": {
      "input_text": "The lower bound is the value of the sum of every weight of every edge in a minimum spanning tree.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">The lower bound is the value of the sum of every weight of every edge in a minimum spanning tree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">The lower bound is the value of the sum of every weight of every edge in a minimum spanning tree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 137,
        "text_offset": 0,
        "word_length": 3,
        "text": "The",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2125000,
        "duration_milliseconds": 300,
        "text_offset": 4,
        "word_length": 5,
        "text": "lower",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5375000,
        "duration_milliseconds": 337,
        "text_offset": 10,
        "word_length": 5,
        "text": "bound",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 112,
        "text_offset": 16,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10250000,
        "duration_milliseconds": 100,
        "text_offset": 19,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11500000,
        "duration_milliseconds": 375,
        "text_offset": 23,
        "word_length": 5,
        "text": "value",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15500000,
        "duration_milliseconds": 87,
        "text_offset": 29,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16625000,
        "duration_milliseconds": 100,
        "text_offset": 32,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17875000,
        "duration_milliseconds": 200,
        "text_offset": 36,
        "word_length": 3,
        "text": "sum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20000000,
        "duration_milliseconds": 100,
        "text_offset": 40,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21250000,
        "duration_milliseconds": 237,
        "text_offset": 43,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23875000,
        "duration_milliseconds": 212,
        "text_offset": 49,
        "word_length": 6,
        "text": "weight",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26125000,
        "duration_milliseconds": 87,
        "text_offset": 56,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27250000,
        "duration_milliseconds": 250,
        "text_offset": 59,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29875000,
        "duration_milliseconds": 225,
        "text_offset": 65,
        "word_length": 4,
        "text": "edge",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32375000,
        "duration_milliseconds": 100,
        "text_offset": 70,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33625000,
        "duration_milliseconds": 50,
        "text_offset": 73,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34375000,
        "duration_milliseconds": 375,
        "text_offset": 75,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 38375000,
        "duration_milliseconds": 375,
        "text_offset": 83,
        "word_length": 8,
        "text": "spanning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 42250000,
        "duration_milliseconds": 337,
        "text_offset": 92,
        "word_length": 4,
        "text": "tree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 45875000,
        "duration_milliseconds": 100,
        "text_offset": 96,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "the-lower-bound-is-the-value-of-the-sum-of-every-805df4f2.mp3",
    "final_audio": "the-lower-bound-is-the-value-of-the-sum-of-every-805df4f2.mp3"
  },
  {
    "input_text": "So imagine we have these nodes from before.",
    "input_data": {
      "input_text": "So imagine we have these nodes from before.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">So imagine we have these nodes from before.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">So imagine we have these nodes from before.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 250,
        "text_offset": 0,
        "word_length": 2,
        "text": "So",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3250000,
        "duration_milliseconds": 450,
        "text_offset": 3,
        "word_length": 7,
        "text": "imagine",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8000000,
        "duration_milliseconds": 125,
        "text_offset": 11,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9500000,
        "duration_milliseconds": 212,
        "text_offset": 14,
        "word_length": 4,
        "text": "have",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11875000,
        "duration_milliseconds": 187,
        "text_offset": 19,
        "word_length": 5,
        "text": "these",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14000000,
        "duration_milliseconds": 287,
        "text_offset": 25,
        "word_length": 5,
        "text": "nodes",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17125000,
        "duration_milliseconds": 175,
        "text_offset": 31,
        "word_length": 4,
        "text": "from",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19000000,
        "duration_milliseconds": 562,
        "text_offset": 36,
        "word_length": 6,
        "text": "before",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24875000,
        "duration_milliseconds": 100,
        "text_offset": 42,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "so-imagine-we-have-these-nodes-from-before-a406d02c.mp3",
    "final_audio": "so-imagine-we-have-these-nodes-from-before-a406d02c.mp3"
  },
  {
    "input_text": "We add the edges and their weights to the nodes so we get our minimal spanning tree.",
    "input_data": {
      "input_text": "We add the edges and their weights to the nodes so we get our minimal spanning tree.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We add the edges and their weights to the nodes so we get our minimal spanning tree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We add the edges and their weights to the nodes so we get our minimal spanning tree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 200,
        "text_offset": 0,
        "word_length": 2,
        "text": "We",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2750000,
        "duration_milliseconds": 175,
        "text_offset": 3,
        "word_length": 3,
        "text": "add",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4750000,
        "duration_milliseconds": 100,
        "text_offset": 7,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6000000,
        "duration_milliseconds": 387,
        "text_offset": 11,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10125000,
        "duration_milliseconds": 87,
        "text_offset": 17,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11250000,
        "duration_milliseconds": 150,
        "text_offset": 21,
        "word_length": 5,
        "text": "their",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13000000,
        "duration_milliseconds": 237,
        "text_offset": 27,
        "word_length": 7,
        "text": "weights",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15500000,
        "duration_milliseconds": 87,
        "text_offset": 35,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16625000,
        "duration_milliseconds": 100,
        "text_offset": 38,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17750000,
        "duration_milliseconds": 325,
        "text_offset": 42,
        "word_length": 5,
        "text": "nodes",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21250000,
        "duration_milliseconds": 112,
        "text_offset": 48,
        "word_length": 2,
        "text": "so",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22625000,
        "duration_milliseconds": 125,
        "text_offset": 51,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24000000,
        "duration_milliseconds": 187,
        "text_offset": 54,
        "word_length": 3,
        "text": "get",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26125000,
        "duration_milliseconds": 112,
        "text_offset": 58,
        "word_length": 3,
        "text": "our",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27375000,
        "duration_milliseconds": 362,
        "text_offset": 62,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 31250000,
        "duration_milliseconds": 400,
        "text_offset": 70,
        "word_length": 8,
        "text": "spanning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35500000,
        "duration_milliseconds": 337,
        "text_offset": 79,
        "word_length": 4,
        "text": "tree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39125000,
        "duration_milliseconds": 100,
        "text_offset": 83,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "we-add-the-edges-and-their-weights-to-the-nodes-so-87ad4e09.mp3",
    "final_audio": "we-add-the-edges-and-their-weights-to-the-nodes-so-87ad4e09.mp3"
  },
  {
    "input_text": "We take again a look at all the weights and sum them up.",
    "input_data": {
      "input_text": "We take again a look at all the weights and sum them up.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We take again a look at all the weights and sum them up.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We take again a look at all the weights and sum them up.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 175,
        "text_offset": 0,
        "word_length": 2,
        "text": "We",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2500000,
        "duration_milliseconds": 200,
        "text_offset": 3,
        "word_length": 4,
        "text": "take",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4625000,
        "duration_milliseconds": 275,
        "text_offset": 8,
        "word_length": 5,
        "text": "again",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7625000,
        "duration_milliseconds": 62,
        "text_offset": 14,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8500000,
        "duration_milliseconds": 212,
        "text_offset": 16,
        "word_length": 4,
        "text": "look",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10875000,
        "duration_milliseconds": 87,
        "text_offset": 21,
        "word_length": 2,
        "text": "at",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12000000,
        "duration_milliseconds": 137,
        "text_offset": 24,
        "word_length": 3,
        "text": "all",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13625000,
        "duration_milliseconds": 100,
        "text_offset": 28,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14750000,
        "duration_milliseconds": 312,
        "text_offset": 32,
        "word_length": 7,
        "text": "weights",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 18000000,
        "duration_milliseconds": 112,
        "text_offset": 40,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19375000,
        "duration_milliseconds": 200,
        "text_offset": 44,
        "word_length": 3,
        "text": "sum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21625000,
        "duration_milliseconds": 137,
        "text_offset": 48,
        "word_length": 4,
        "text": "them",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23125000,
        "duration_milliseconds": 262,
        "text_offset": 53,
        "word_length": 2,
        "text": "up",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26000000,
        "duration_milliseconds": 100,
        "text_offset": 55,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "we-take-again-a-look-at-all-the-weights-and-sum-872dc865.mp3",
    "final_audio": "we-take-again-a-look-at-all-the-weights-and-sum-872dc865.mp3"
  },
  {
    "input_text": "This is the value of our lower bound.",
    "input_data": {
      "input_text": "This is the value of our lower bound.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">This is the value of our lower bound.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">This is the value of our lower bound.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 275,
        "text_offset": 0,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3375000,
        "duration_milliseconds": 125,
        "text_offset": 5,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4875000,
        "duration_milliseconds": 100,
        "text_offset": 8,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6000000,
        "duration_milliseconds": 425,
        "text_offset": 12,
        "word_length": 5,
        "text": "value",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10500000,
        "duration_milliseconds": 112,
        "text_offset": 18,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11875000,
        "duration_milliseconds": 150,
        "text_offset": 21,
        "word_length": 3,
        "text": "our",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13625000,
        "duration_milliseconds": 325,
        "text_offset": 25,
        "word_length": 5,
        "text": "lower",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17125000,
        "duration_milliseconds": 462,
        "text_offset": 31,
        "word_length": 5,
        "text": "bound",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22000000,
        "duration_milliseconds": 100,
        "text_offset": 36,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "this-is-the-value-of-our-lower-bound-333b1923.mp3",
    "final_audio": "this-is-the-value-of-our-lower-bound-333b1923.mp3"
  },
  {
    "input_text": "Now we have a value which we can compare to our approximated solution and we know how good it is!",
    "input_data": {
      "input_text": "Now we have a value which we can compare to our approximated solution and we know how good it is!",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we have a value which we can compare to our approximated solution and we know how good it is!</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we have a value which we can compare to our approximated solution and we know how good it is!</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 237,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3000000,
        "duration_milliseconds": 112,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4375000,
        "duration_milliseconds": 150,
        "text_offset": 7,
        "word_length": 4,
        "text": "have",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6000000,
        "duration_milliseconds": 62,
        "text_offset": 12,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6875000,
        "duration_milliseconds": 387,
        "text_offset": 14,
        "word_length": 5,
        "text": "value",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11000000,
        "duration_milliseconds": 175,
        "text_offset": 20,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12875000,
        "duration_milliseconds": 125,
        "text_offset": 26,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14375000,
        "duration_milliseconds": 150,
        "text_offset": 29,
        "word_length": 3,
        "text": "can",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16125000,
        "duration_milliseconds": 375,
        "text_offset": 33,
        "word_length": 7,
        "text": "compare",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20125000,
        "duration_milliseconds": 125,
        "text_offset": 41,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21625000,
        "duration_milliseconds": 137,
        "text_offset": 44,
        "word_length": 3,
        "text": "our",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23125000,
        "duration_milliseconds": 700,
        "text_offset": 48,
        "word_length": 12,
        "text": "approximated",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30375000,
        "duration_milliseconds": 450,
        "text_offset": 61,
        "word_length": 8,
        "text": "solution",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35125000,
        "duration_milliseconds": 100,
        "text_offset": 70,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36375000,
        "duration_milliseconds": 112,
        "text_offset": 74,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37750000,
        "duration_milliseconds": 162,
        "text_offset": 77,
        "word_length": 4,
        "text": "know",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39500000,
        "duration_milliseconds": 162,
        "text_offset": 82,
        "word_length": 3,
        "text": "how",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41375000,
        "duration_milliseconds": 162,
        "text_offset": 86,
        "word_length": 4,
        "text": "good",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 43250000,
        "duration_milliseconds": 87,
        "text_offset": 91,
        "word_length": 2,
        "text": "it",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44375000,
        "duration_milliseconds": 325,
        "text_offset": 94,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 47875000,
        "duration_milliseconds": 100,
        "text_offset": 96,
        "word_length": 1,
        "text": "!",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "now-we-have-a-value-which-we-can-compare-to-our-f3fc8475.mp3",
    "final_audio": "now-we-have-a-value-which-we-can-compare-to-our-f3fc8475.mp3"
  },
  {
    "input_text": "Now we go on with the next topic",
    "input_data": {
      "input_text": "Now we go on with the next topic",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we go on with the next topic</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we go on with the next topic</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 275,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3375000,
        "duration_milliseconds": 137,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5000000,
        "duration_milliseconds": 250,
        "text_offset": 7,
        "word_length": 2,
        "text": "go",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7625000,
        "duration_milliseconds": 175,
        "text_offset": 10,
        "word_length": 2,
        "text": "on",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9500000,
        "duration_milliseconds": 125,
        "text_offset": 13,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11000000,
        "duration_milliseconds": 87,
        "text_offset": 18,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12000000,
        "duration_milliseconds": 250,
        "text_offset": 22,
        "word_length": 4,
        "text": "next",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14625000,
        "duration_milliseconds": 437,
        "text_offset": 27,
        "word_length": 5,
        "text": "topic",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "now-we-go-on-with-the-next-topic-b4db96e8.mp3",
    "final_audio": "now-we-go-on-with-the-next-topic-b4db96e8.mp3"
  },
  {
    "input_text": "In the following we will explain the christofides algorithm.",
    "input_data": {
      "input_text": "In the following we will explain the christofides algorithm.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">In the following we will explain the christofides algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">In the following we will explain the christofides algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 175,
        "text_offset": 0,
        "word_length": 2,
        "text": "In",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2375000,
        "duration_milliseconds": 100,
        "text_offset": 3,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3625000,
        "duration_milliseconds": 450,
        "text_offset": 7,
        "word_length": 9,
        "text": "following",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8375000,
        "duration_milliseconds": 125,
        "text_offset": 17,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9875000,
        "duration_milliseconds": 137,
        "text_offset": 20,
        "word_length": 4,
        "text": "will",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11500000,
        "duration_milliseconds": 412,
        "text_offset": 25,
        "word_length": 7,
        "text": "explain",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15875000,
        "duration_milliseconds": 112,
        "text_offset": 33,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17250000,
        "duration_milliseconds": 875,
        "text_offset": 37,
        "word_length": 12,
        "text": "christofides",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26250000,
        "duration_milliseconds": 650,
        "text_offset": 50,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32875000,
        "duration_milliseconds": 100,
        "text_offset": 59,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "in-the-following-we-will-explain-the-christofides-94a11300.mp3",
    "final_audio": "in-the-following-we-will-explain-the-christofides-94a11300.mp3"
  },
  {
    "input_text": "This is an approximated algorithm to solve the TSP with a n to the third power complexity. This algorithm guarantees a solution that is at most fifthy percent longer than the optimal round trip.",
    "input_data": {
      "input_text": "This is an approximated algorithm to solve the TSP with a n to the third power complexity. This algorithm guarantees a solution that is at most fifthy percent longer than the optimal round trip.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">This is an approximated algorithm to solve the TSP with a n to the third power complexity. This algorithm guarantees a solution that is at most fifthy percent longer than the optimal round trip.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">This is an approximated algorithm to solve the TSP with a n to the third power complexity. This algorithm guarantees a solution that is at most fifthy percent longer than the optimal round trip.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 225,
        "text_offset": 0,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3000000,
        "duration_milliseconds": 112,
        "text_offset": 5,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4375000,
        "duration_milliseconds": 87,
        "text_offset": 8,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5500000,
        "duration_milliseconds": 762,
        "text_offset": 11,
        "word_length": 12,
        "text": "approximated",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13375000,
        "duration_milliseconds": 562,
        "text_offset": 24,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19250000,
        "duration_milliseconds": 100,
        "text_offset": 34,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20375000,
        "duration_milliseconds": 300,
        "text_offset": 37,
        "word_length": 5,
        "text": "solve",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23625000,
        "duration_milliseconds": 100,
        "text_offset": 43,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24750000,
        "duration_milliseconds": 562,
        "text_offset": 47,
        "word_length": 3,
        "text": "TSP",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30500000,
        "duration_milliseconds": 162,
        "text_offset": 51,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32375000,
        "duration_milliseconds": 112,
        "text_offset": 56,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33750000,
        "duration_milliseconds": 200,
        "text_offset": 58,
        "word_length": 1,
        "text": "n",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36000000,
        "duration_milliseconds": 100,
        "text_offset": 60,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37125000,
        "duration_milliseconds": 112,
        "text_offset": 63,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 38500000,
        "duration_milliseconds": 262,
        "text_offset": 67,
        "word_length": 5,
        "text": "third",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41250000,
        "duration_milliseconds": 287,
        "text_offset": 73,
        "word_length": 5,
        "text": "power",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44375000,
        "duration_milliseconds": 812,
        "text_offset": 79,
        "word_length": 10,
        "text": "complexity",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 52750000,
        "duration_milliseconds": 100,
        "text_offset": 89,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 61375000,
        "duration_milliseconds": 225,
        "text_offset": 91,
        "word_length": 4,
        "text": "This",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 63875000,
        "duration_milliseconds": 562,
        "text_offset": 96,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 69750000,
        "duration_milliseconds": 525,
        "text_offset": 106,
        "word_length": 10,
        "text": "guarantees",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 75250000,
        "duration_milliseconds": 62,
        "text_offset": 117,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76125000,
        "duration_milliseconds": 475,
        "text_offset": 119,
        "word_length": 8,
        "text": "solution",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 81125000,
        "duration_milliseconds": 125,
        "text_offset": 128,
        "word_length": 4,
        "text": "that",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 82500000,
        "duration_milliseconds": 112,
        "text_offset": 133,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 83875000,
        "duration_milliseconds": 100,
        "text_offset": 136,
        "word_length": 2,
        "text": "at",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 85125000,
        "duration_milliseconds": 275,
        "text_offset": 139,
        "word_length": 4,
        "text": "most",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 88125000,
        "duration_milliseconds": 300,
        "text_offset": 144,
        "word_length": 6,
        "text": "fifthy",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 91375000,
        "duration_milliseconds": 425,
        "text_offset": 151,
        "word_length": 7,
        "text": "percent",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 95750000,
        "duration_milliseconds": 337,
        "text_offset": 159,
        "word_length": 6,
        "text": "longer",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 99250000,
        "duration_milliseconds": 125,
        "text_offset": 166,
        "word_length": 4,
        "text": "than",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 100750000,
        "duration_milliseconds": 112,
        "text_offset": 171,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 102125000,
        "duration_milliseconds": 437,
        "text_offset": 175,
        "word_length": 7,
        "text": "optimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 106625000,
        "duration_milliseconds": 225,
        "text_offset": 183,
        "word_length": 5,
        "text": "round",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 109000000,
        "duration_milliseconds": 312,
        "text_offset": 189,
        "word_length": 4,
        "text": "trip",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 112250000,
        "duration_milliseconds": 100,
        "text_offset": 193,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "this-is-an-approximated-algorithm-to-solve-the-tsp-e9300d25.mp3",
    "final_audio": "this-is-an-approximated-algorithm-to-solve-the-tsp-e9300d25.mp3"
  },
  {
    "input_text": "First we will create a minimal spanning tree with every node by using the algrithm of Prim.",
    "input_data": {
      "input_text": "First we will create a minimal spanning tree with every node by using the algrithm of Prim.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">First we will create a minimal spanning tree with every node by using the algrithm of Prim.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">First we will create a minimal spanning tree with every node by using the algrithm of Prim.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 375,
        "text_offset": 0,
        "word_length": 5,
        "text": "First",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4500000,
        "duration_milliseconds": 112,
        "text_offset": 6,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5750000,
        "duration_milliseconds": 137,
        "text_offset": 9,
        "word_length": 4,
        "text": "will",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7375000,
        "duration_milliseconds": 312,
        "text_offset": 14,
        "word_length": 6,
        "text": "create",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10750000,
        "duration_milliseconds": 50,
        "text_offset": 21,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11375000,
        "duration_milliseconds": 375,
        "text_offset": 23,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15375000,
        "duration_milliseconds": 387,
        "text_offset": 31,
        "word_length": 8,
        "text": "spanning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19375000,
        "duration_milliseconds": 212,
        "text_offset": 40,
        "word_length": 4,
        "text": "tree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21625000,
        "duration_milliseconds": 187,
        "text_offset": 45,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23750000,
        "duration_milliseconds": 225,
        "text_offset": 50,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26250000,
        "duration_milliseconds": 275,
        "text_offset": 56,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29250000,
        "duration_milliseconds": 112,
        "text_offset": 61,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30625000,
        "duration_milliseconds": 362,
        "text_offset": 64,
        "word_length": 5,
        "text": "using",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34500000,
        "duration_milliseconds": 112,
        "text_offset": 70,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35875000,
        "duration_milliseconds": 475,
        "text_offset": 74,
        "word_length": 8,
        "text": "algrithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40875000,
        "duration_milliseconds": 112,
        "text_offset": 83,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 42250000,
        "duration_milliseconds": 375,
        "text_offset": 86,
        "word_length": 4,
        "text": "Prim",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 46250000,
        "duration_milliseconds": 100,
        "text_offset": 90,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "first-we-will-create-a-minimal-spanning-tree-with-a9ca7eef.mp3",
    "final_audio": "first-we-will-create-a-minimal-spanning-tree-with-a9ca7eef.mp3"
  },
  {
    "input_text": "Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom",
    "input_data": {
      "input_text": "Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we search for every node in the graph with an odd degree, meaning an odd number of edges by using the algorithm of Blossom</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 200,
        "text_offset": 0,
        "word_length": 4,
        "text": "Then",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2750000,
        "duration_milliseconds": 112,
        "text_offset": 5,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4125000,
        "duration_milliseconds": 250,
        "text_offset": 8,
        "word_length": 6,
        "text": "search",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6875000,
        "duration_milliseconds": 175,
        "text_offset": 15,
        "word_length": 3,
        "text": "for",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 212,
        "text_offset": 19,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11250000,
        "duration_milliseconds": 212,
        "text_offset": 25,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13500000,
        "duration_milliseconds": 62,
        "text_offset": 30,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14375000,
        "duration_milliseconds": 100,
        "text_offset": 33,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15625000,
        "duration_milliseconds": 312,
        "text_offset": 37,
        "word_length": 5,
        "text": "graph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19000000,
        "duration_milliseconds": 137,
        "text_offset": 43,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20625000,
        "duration_milliseconds": 87,
        "text_offset": 48,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21750000,
        "duration_milliseconds": 162,
        "text_offset": 51,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23500000,
        "duration_milliseconds": 362,
        "text_offset": 55,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28125000,
        "duration_milliseconds": 225,
        "text_offset": 61,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 30625000,
        "duration_milliseconds": 287,
        "text_offset": 63,
        "word_length": 7,
        "text": "meaning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33750000,
        "duration_milliseconds": 87,
        "text_offset": 71,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34750000,
        "duration_milliseconds": 200,
        "text_offset": 74,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37000000,
        "duration_milliseconds": 312,
        "text_offset": 78,
        "word_length": 6,
        "text": "number",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40250000,
        "duration_milliseconds": 75,
        "text_offset": 85,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41250000,
        "duration_milliseconds": 300,
        "text_offset": 88,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44500000,
        "duration_milliseconds": 125,
        "text_offset": 94,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 46000000,
        "duration_milliseconds": 362,
        "text_offset": 97,
        "word_length": 5,
        "text": "using",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 49875000,
        "duration_milliseconds": 112,
        "text_offset": 103,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 51250000,
        "duration_milliseconds": 587,
        "text_offset": 107,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 57375000,
        "duration_milliseconds": 112,
        "text_offset": 117,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58625000,
        "duration_milliseconds": 475,
        "text_offset": 120,
        "word_length": 7,
        "text": "Blossom",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "then-we-search-for-every-node-in-the-graph-with-an-cd2fe15a.mp3",
    "final_audio": "then-we-search-for-every-node-in-the-graph-with-an-cd2fe15a.mp3"
  },
  {
    "input_text": "After finding all the nodes with an odd degree we need to find a minimum perfect matching, so we need to find edges with minimum weight so every node gets an even degree.",
    "input_data": {
      "input_text": "After finding all the nodes with an odd degree we need to find a minimum perfect matching, so we need to find edges with minimum weight so every node gets an even degree.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">After finding all the nodes with an odd degree we need to find a minimum perfect matching, so we need to find edges with minimum weight so every node gets an even degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">After finding all the nodes with an odd degree we need to find a minimum perfect matching, so we need to find edges with minimum weight so every node gets an even degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 325,
        "text_offset": 0,
        "word_length": 5,
        "text": "After",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3875000,
        "duration_milliseconds": 350,
        "text_offset": 6,
        "word_length": 7,
        "text": "finding",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7625000,
        "duration_milliseconds": 112,
        "text_offset": 14,
        "word_length": 3,
        "text": "all",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 100,
        "text_offset": 18,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10125000,
        "duration_milliseconds": 275,
        "text_offset": 22,
        "word_length": 5,
        "text": "nodes",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13000000,
        "duration_milliseconds": 112,
        "text_offset": 28,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14375000,
        "duration_milliseconds": 100,
        "text_offset": 33,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15625000,
        "duration_milliseconds": 162,
        "text_offset": 36,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17500000,
        "duration_milliseconds": 312,
        "text_offset": 40,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20750000,
        "duration_milliseconds": 125,
        "text_offset": 47,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22250000,
        "duration_milliseconds": 150,
        "text_offset": 50,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23875000,
        "duration_milliseconds": 75,
        "text_offset": 55,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24875000,
        "duration_milliseconds": 237,
        "text_offset": 58,
        "word_length": 4,
        "text": "find",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27500000,
        "duration_milliseconds": 37,
        "text_offset": 63,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28000000,
        "duration_milliseconds": 387,
        "text_offset": 65,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32125000,
        "duration_milliseconds": 400,
        "text_offset": 73,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36250000,
        "duration_milliseconds": 400,
        "text_offset": 81,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41125000,
        "duration_milliseconds": 187,
        "text_offset": 89,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 43125000,
        "duration_milliseconds": 100,
        "text_offset": 91,
        "word_length": 2,
        "text": "so",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44375000,
        "duration_milliseconds": 87,
        "text_offset": 94,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 45500000,
        "duration_milliseconds": 150,
        "text_offset": 97,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 47125000,
        "duration_milliseconds": 75,
        "text_offset": 102,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 48125000,
        "duration_milliseconds": 262,
        "text_offset": 105,
        "word_length": 4,
        "text": "find",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 51000000,
        "duration_milliseconds": 275,
        "text_offset": 110,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 54000000,
        "duration_milliseconds": 162,
        "text_offset": 116,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 55875000,
        "duration_milliseconds": 375,
        "text_offset": 121,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 59750000,
        "duration_milliseconds": 225,
        "text_offset": 129,
        "word_length": 6,
        "text": "weight",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 62250000,
        "duration_milliseconds": 137,
        "text_offset": 136,
        "word_length": 2,
        "text": "so",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 63750000,
        "duration_milliseconds": 225,
        "text_offset": 139,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 66250000,
        "duration_milliseconds": 237,
        "text_offset": 145,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 68875000,
        "duration_milliseconds": 175,
        "text_offset": 150,
        "word_length": 4,
        "text": "gets",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 70750000,
        "duration_milliseconds": 100,
        "text_offset": 155,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 72000000,
        "duration_milliseconds": 187,
        "text_offset": 158,
        "word_length": 4,
        "text": "even",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 74000000,
        "duration_milliseconds": 475,
        "text_offset": 163,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 79000000,
        "duration_milliseconds": 100,
        "text_offset": 169,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "after-finding-all-the-nodes-with-an-odd-degree-we-9ea0bfe2.mp3",
    "final_audio": "after-finding-all-the-nodes-with-an-odd-degree-we-9ea0bfe2.mp3"
  },
  {
    "input_text": "Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.",
    "input_data": {
      "input_text": "Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Then we need to combine the minimum spanning tree with the perfect matching to obtain a multigraph in which every vertex has an even degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 200,
        "text_offset": 0,
        "word_length": 4,
        "text": "Then",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2750000,
        "duration_milliseconds": 100,
        "text_offset": 5,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4000000,
        "duration_milliseconds": 150,
        "text_offset": 8,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5625000,
        "duration_milliseconds": 100,
        "text_offset": 13,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6875000,
        "duration_milliseconds": 400,
        "text_offset": 16,
        "word_length": 7,
        "text": "combine",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11125000,
        "duration_milliseconds": 87,
        "text_offset": 24,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12250000,
        "duration_milliseconds": 362,
        "text_offset": 28,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16125000,
        "duration_milliseconds": 387,
        "text_offset": 36,
        "word_length": 8,
        "text": "spanning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20250000,
        "duration_milliseconds": 212,
        "text_offset": 45,
        "word_length": 4,
        "text": "tree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22625000,
        "duration_milliseconds": 137,
        "text_offset": 50,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24250000,
        "duration_milliseconds": 112,
        "text_offset": 55,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 25625000,
        "duration_milliseconds": 425,
        "text_offset": 59,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30000000,
        "duration_milliseconds": 362,
        "text_offset": 67,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33875000,
        "duration_milliseconds": 125,
        "text_offset": 76,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35375000,
        "duration_milliseconds": 300,
        "text_offset": 79,
        "word_length": 6,
        "text": "obtain",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 38625000,
        "duration_milliseconds": 62,
        "text_offset": 86,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39500000,
        "duration_milliseconds": 612,
        "text_offset": 88,
        "word_length": 10,
        "text": "multigraph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 45875000,
        "duration_milliseconds": 100,
        "text_offset": 99,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 47125000,
        "duration_milliseconds": 187,
        "text_offset": 102,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 49250000,
        "duration_milliseconds": 212,
        "text_offset": 108,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 51625000,
        "duration_milliseconds": 487,
        "text_offset": 114,
        "word_length": 6,
        "text": "vertex",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 56750000,
        "duration_milliseconds": 175,
        "text_offset": 121,
        "word_length": 3,
        "text": "has",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58750000,
        "duration_milliseconds": 100,
        "text_offset": 125,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60000000,
        "duration_milliseconds": 175,
        "text_offset": 128,
        "word_length": 4,
        "text": "even",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 61875000,
        "duration_milliseconds": 475,
        "text_offset": 133,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 66875000,
        "duration_milliseconds": 100,
        "text_offset": 139,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "then-we-need-to-combine-the-minimum-spanning-tree-ad2051d8.mp3",
    "final_audio": "then-we-need-to-combine-the-minimum-spanning-tree-ad2051d8.mp3"
  },
  {
    "input_text": "Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.",
    "input_data": {
      "input_text": "Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Since every vertex has an even degree, there exists an Eulerian circuit in this graph. An Eulerian circuit is a path that visits each edge exactly once. We need to find it.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 325,
        "text_offset": 0,
        "word_length": 5,
        "text": "Since",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4000000,
        "duration_milliseconds": 237,
        "text_offset": 6,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6625000,
        "duration_milliseconds": 475,
        "text_offset": 12,
        "word_length": 6,
        "text": "vertex",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11625000,
        "duration_milliseconds": 175,
        "text_offset": 19,
        "word_length": 3,
        "text": "has",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13625000,
        "duration_milliseconds": 100,
        "text_offset": 23,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14875000,
        "duration_milliseconds": 187,
        "text_offset": 26,
        "word_length": 4,
        "text": "even",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17000000,
        "duration_milliseconds": 400,
        "text_offset": 31,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21875000,
        "duration_milliseconds": 112,
        "text_offset": 37,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 23000000,
        "duration_milliseconds": 162,
        "text_offset": 39,
        "word_length": 5,
        "text": "there",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24750000,
        "duration_milliseconds": 425,
        "text_offset": 45,
        "word_length": 6,
        "text": "exists",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29250000,
        "duration_milliseconds": 112,
        "text_offset": 52,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30625000,
        "duration_milliseconds": 550,
        "text_offset": 55,
        "word_length": 8,
        "text": "Eulerian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36375000,
        "duration_milliseconds": 375,
        "text_offset": 64,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40375000,
        "duration_milliseconds": 87,
        "text_offset": 72,
        "word_length": 2,
        "text": "in",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41500000,
        "duration_milliseconds": 175,
        "text_offset": 75,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 43375000,
        "duration_milliseconds": 575,
        "text_offset": 80,
        "word_length": 5,
        "text": "graph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 49375000,
        "duration_milliseconds": 100,
        "text_offset": 85,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 58000000,
        "duration_milliseconds": 175,
        "text_offset": 87,
        "word_length": 2,
        "text": "An",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 60000000,
        "duration_milliseconds": 512,
        "text_offset": 90,
        "word_length": 8,
        "text": "Eulerian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 65375000,
        "duration_milliseconds": 375,
        "text_offset": 99,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 69250000,
        "duration_milliseconds": 125,
        "text_offset": 107,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 70750000,
        "duration_milliseconds": 62,
        "text_offset": 110,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 71625000,
        "duration_milliseconds": 312,
        "text_offset": 112,
        "word_length": 4,
        "text": "path",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 75000000,
        "duration_milliseconds": 150,
        "text_offset": 117,
        "word_length": 4,
        "text": "that",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76750000,
        "duration_milliseconds": 350,
        "text_offset": 122,
        "word_length": 6,
        "text": "visits",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 80500000,
        "duration_milliseconds": 212,
        "text_offset": 129,
        "word_length": 4,
        "text": "each",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 82875000,
        "duration_milliseconds": 150,
        "text_offset": 134,
        "word_length": 4,
        "text": "edge",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 84625000,
        "duration_milliseconds": 487,
        "text_offset": 139,
        "word_length": 7,
        "text": "exactly",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 89750000,
        "duration_milliseconds": 475,
        "text_offset": 147,
        "word_length": 4,
        "text": "once",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 94750000,
        "duration_milliseconds": 100,
        "text_offset": 151,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 103375000,
        "duration_milliseconds": 212,
        "text_offset": 153,
        "word_length": 2,
        "text": "We",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 105750000,
        "duration_milliseconds": 212,
        "text_offset": 156,
        "word_length": 4,
        "text": "need",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 108000000,
        "duration_milliseconds": 100,
        "text_offset": 161,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 109250000,
        "duration_milliseconds": 337,
        "text_offset": 164,
        "word_length": 4,
        "text": "find",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 112750000,
        "duration_milliseconds": 187,
        "text_offset": 169,
        "word_length": 2,
        "text": "it",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 114750000,
        "duration_milliseconds": 100,
        "text_offset": 171,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "since-every-vertex-has-an-even-degree-there-exists-20bb5a60.mp3",
    "final_audio": "since-every-vertex-has-an-even-degree-there-exists-20bb5a60.mp3"
  },
  {
    "input_text": "Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.",
    "input_data": {
      "input_text": "Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we convert the Eulerian circuit to a Hamiltonian circuit by skipping repeated vertices.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 237,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3125000,
        "duration_milliseconds": 125,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4625000,
        "duration_milliseconds": 375,
        "text_offset": 7,
        "word_length": 7,
        "text": "convert",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8625000,
        "duration_milliseconds": 75,
        "text_offset": 15,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9625000,
        "duration_milliseconds": 512,
        "text_offset": 19,
        "word_length": 8,
        "text": "Eulerian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15000000,
        "duration_milliseconds": 375,
        "text_offset": 28,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19000000,
        "duration_milliseconds": 125,
        "text_offset": 36,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20500000,
        "duration_milliseconds": 50,
        "text_offset": 39,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21250000,
        "duration_milliseconds": 712,
        "text_offset": 41,
        "word_length": 11,
        "text": "Hamiltonian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28625000,
        "duration_milliseconds": 387,
        "text_offset": 53,
        "word_length": 7,
        "text": "circuit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32750000,
        "duration_milliseconds": 150,
        "text_offset": 61,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 34500000,
        "duration_milliseconds": 462,
        "text_offset": 64,
        "word_length": 8,
        "text": "skipping",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39250000,
        "duration_milliseconds": 437,
        "text_offset": 73,
        "word_length": 8,
        "text": "repeated",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 43750000,
        "duration_milliseconds": 650,
        "text_offset": 82,
        "word_length": 8,
        "text": "vertices",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 50500000,
        "duration_milliseconds": 100,
        "text_offset": 90,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "now-we-convert-the-eulerian-circuit-to-a-5c9d1a2f.mp3",
    "final_audio": "now-we-convert-the-eulerian-circuit-to-a-5c9d1a2f.mp3"
  },
  {
    "input_text": "Let's take a look at the graph to visualize this algorithm.",
    "input_data": {
      "input_text": "Let's take a look at the graph to visualize this algorithm.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Let's take a look at the graph to visualize this algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Let's take a look at the graph to visualize this algorithm.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 300,
        "text_offset": 0,
        "word_length": 5,
        "text": "Let's",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3625000,
        "duration_milliseconds": 187,
        "text_offset": 6,
        "word_length": 4,
        "text": "take",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5750000,
        "duration_milliseconds": 62,
        "text_offset": 11,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6625000,
        "duration_milliseconds": 225,
        "text_offset": 13,
        "word_length": 4,
        "text": "look",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9125000,
        "duration_milliseconds": 75,
        "text_offset": 18,
        "word_length": 2,
        "text": "at",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10125000,
        "duration_milliseconds": 112,
        "text_offset": 21,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11500000,
        "duration_milliseconds": 325,
        "text_offset": 25,
        "word_length": 5,
        "text": "graph",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15000000,
        "duration_milliseconds": 100,
        "text_offset": 31,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16250000,
        "duration_milliseconds": 600,
        "text_offset": 34,
        "word_length": 9,
        "text": "visualize",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22500000,
        "duration_milliseconds": 187,
        "text_offset": 44,
        "word_length": 4,
        "text": "this",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24625000,
        "duration_milliseconds": 625,
        "text_offset": 49,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 31125000,
        "duration_milliseconds": 100,
        "text_offset": 58,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "let-s-take-a-look-at-the-graph-to-visualize-this-c57f7870.mp3",
    "final_audio": "let-s-take-a-look-at-the-graph-to-visualize-this-c57f7870.mp3"
  },
  {
    "input_text": "Like explained before we create a minimal spanning tree.",
    "input_data": {
      "input_text": "Like explained before we create a minimal spanning tree.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Like explained before we create a minimal spanning tree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Like explained before we create a minimal spanning tree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 225,
        "text_offset": 0,
        "word_length": 4,
        "text": "Like",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3000000,
        "duration_milliseconds": 500,
        "text_offset": 5,
        "word_length": 9,
        "text": "explained",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8250000,
        "duration_milliseconds": 337,
        "text_offset": 15,
        "word_length": 6,
        "text": "before",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11750000,
        "duration_milliseconds": 125,
        "text_offset": 22,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13250000,
        "duration_milliseconds": 337,
        "text_offset": 25,
        "word_length": 6,
        "text": "create",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16875000,
        "duration_milliseconds": 50,
        "text_offset": 32,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17500000,
        "duration_milliseconds": 375,
        "text_offset": 34,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21500000,
        "duration_milliseconds": 400,
        "text_offset": 42,
        "word_length": 8,
        "text": "spanning",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 25750000,
        "duration_milliseconds": 350,
        "text_offset": 51,
        "word_length": 4,
        "text": "tree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29500000,
        "duration_milliseconds": 100,
        "text_offset": 55,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "like-explained-before-we-create-a-minimal-spanning-44a9aef2.mp3",
    "final_audio": "like-explained-before-we-create-a-minimal-spanning-44a9aef2.mp3"
  },
  {
    "input_text": "Now we point out every node with an odd degree",
    "input_data": {
      "input_text": "Now we point out every node with an odd degree",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we point out every node with an odd degree</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we point out every node with an odd degree</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 250,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3250000,
        "duration_milliseconds": 125,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4625000,
        "duration_milliseconds": 262,
        "text_offset": 7,
        "word_length": 5,
        "text": "point",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7500000,
        "duration_milliseconds": 200,
        "text_offset": 13,
        "word_length": 3,
        "text": "out",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9625000,
        "duration_milliseconds": 225,
        "text_offset": 17,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12125000,
        "duration_milliseconds": 262,
        "text_offset": 23,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15000000,
        "duration_milliseconds": 137,
        "text_offset": 28,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16625000,
        "duration_milliseconds": 112,
        "text_offset": 33,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 17875000,
        "duration_milliseconds": 162,
        "text_offset": 36,
        "word_length": 3,
        "text": "odd",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19625000,
        "duration_milliseconds": 450,
        "text_offset": 40,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "now-we-point-out-every-node-with-an-odd-degree-02c8675e.mp3",
    "final_audio": "now-we-point-out-every-node-with-an-odd-degree-02c8675e.mp3"
  },
  {
    "input_text": "We can now point out the minimal perfect matching, so we add edges with the minimum weight until every node has an even degree.",
    "input_data": {
      "input_text": "We can now point out the minimal perfect matching, so we add edges with the minimum weight until every node has an even degree.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We can now point out the minimal perfect matching, so we add edges with the minimum weight until every node has an even degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">We can now point out the minimal perfect matching, so we add edges with the minimum weight until every node has an even degree.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 175,
        "text_offset": 0,
        "word_length": 2,
        "text": "We",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2500000,
        "duration_milliseconds": 137,
        "text_offset": 3,
        "word_length": 3,
        "text": "can",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4125000,
        "duration_milliseconds": 162,
        "text_offset": 7,
        "word_length": 3,
        "text": "now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5875000,
        "duration_milliseconds": 237,
        "text_offset": 11,
        "word_length": 5,
        "text": "point",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8500000,
        "duration_milliseconds": 125,
        "text_offset": 17,
        "word_length": 3,
        "text": "out",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10000000,
        "duration_milliseconds": 87,
        "text_offset": 21,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11125000,
        "duration_milliseconds": 375,
        "text_offset": 25,
        "word_length": 7,
        "text": "minimal",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15125000,
        "duration_milliseconds": 412,
        "text_offset": 33,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 19375000,
        "duration_milliseconds": 387,
        "text_offset": 41,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24125000,
        "duration_milliseconds": 175,
        "text_offset": 49,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 25875000,
        "duration_milliseconds": 112,
        "text_offset": 51,
        "word_length": 2,
        "text": "so",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27250000,
        "duration_milliseconds": 125,
        "text_offset": 54,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 28750000,
        "duration_milliseconds": 162,
        "text_offset": 57,
        "word_length": 3,
        "text": "add",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30625000,
        "duration_milliseconds": 287,
        "text_offset": 61,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 33750000,
        "duration_milliseconds": 137,
        "text_offset": 67,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35375000,
        "duration_milliseconds": 75,
        "text_offset": 72,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36250000,
        "duration_milliseconds": 387,
        "text_offset": 76,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40375000,
        "duration_milliseconds": 225,
        "text_offset": 84,
        "word_length": 6,
        "text": "weight",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 42750000,
        "duration_milliseconds": 337,
        "text_offset": 91,
        "word_length": 5,
        "text": "until",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 46250000,
        "duration_milliseconds": 212,
        "text_offset": 97,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 48625000,
        "duration_milliseconds": 225,
        "text_offset": 103,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 51125000,
        "duration_milliseconds": 187,
        "text_offset": 108,
        "word_length": 3,
        "text": "has",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 53250000,
        "duration_milliseconds": 100,
        "text_offset": 112,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 54500000,
        "duration_milliseconds": 175,
        "text_offset": 115,
        "word_length": 4,
        "text": "even",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 56375000,
        "duration_milliseconds": 487,
        "text_offset": 120,
        "word_length": 6,
        "text": "degree",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 61500000,
        "duration_milliseconds": 100,
        "text_offset": 126,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "we-can-now-point-out-the-minimal-perfect-matching-0068b542.mp3",
    "final_audio": "we-can-now-point-out-the-minimal-perfect-matching-0068b542.mp3"
  },
  {
    "input_text": "Now we are going to find an eulerian tour which hits every edge exact once.",
    "input_data": {
      "input_text": "Now we are going to find an eulerian tour which hits every edge exact once.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we are going to find an eulerian tour which hits every edge exact once.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we are going to find an eulerian tour which hits every edge exact once.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 250,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3250000,
        "duration_milliseconds": 112,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4625000,
        "duration_milliseconds": 100,
        "text_offset": 7,
        "word_length": 3,
        "text": "are",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5875000,
        "duration_milliseconds": 200,
        "text_offset": 11,
        "word_length": 5,
        "text": "going",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8000000,
        "duration_milliseconds": 75,
        "text_offset": 17,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 275,
        "text_offset": 20,
        "word_length": 4,
        "text": "find",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11875000,
        "duration_milliseconds": 75,
        "text_offset": 25,
        "word_length": 2,
        "text": "an",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12875000,
        "duration_milliseconds": 525,
        "text_offset": 28,
        "word_length": 8,
        "text": "eulerian",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 18375000,
        "duration_milliseconds": 312,
        "text_offset": 37,
        "word_length": 4,
        "text": "tour",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21750000,
        "duration_milliseconds": 175,
        "text_offset": 42,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 23750000,
        "duration_milliseconds": 237,
        "text_offset": 48,
        "word_length": 4,
        "text": "hits",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 26250000,
        "duration_milliseconds": 275,
        "text_offset": 53,
        "word_length": 5,
        "text": "every",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 29125000,
        "duration_milliseconds": 175,
        "text_offset": 59,
        "word_length": 4,
        "text": "edge",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 31000000,
        "duration_milliseconds": 412,
        "text_offset": 64,
        "word_length": 5,
        "text": "exact",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35375000,
        "duration_milliseconds": 387,
        "text_offset": 70,
        "word_length": 4,
        "text": "once",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 39375000,
        "duration_milliseconds": 100,
        "text_offset": 74,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "now-we-are-going-to-find-an-eulerian-tour-which-332be64c.mp3",
    "final_audio": "now-we-are-going-to-find-an-eulerian-tour-which-332be64c.mp3"
  },
  {
    "input_text": "The last step will be to convert the euleric circle into a hamilton circle, so we have to delete all edges which make the circle visit a node which we have seen before. In our case these are the edges between 9 and 4.",
    "input_data": {
      "input_text": "The last step will be to convert the euleric circle into a hamilton circle, so we have to delete all edges which make the circle visit a node which we have seen before. In our case these are the edges between 9 and 4.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">The last step will be to convert the euleric circle into a hamilton circle, so we have to delete all edges which make the circle visit a node which we have seen before. In our case these are the edges between 9 and 4.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">The last step will be to convert the euleric circle into a hamilton circle, so we have to delete all edges which make the circle visit a node which we have seen before. In our case these are the edges between 9 and 4.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 137,
        "text_offset": 0,
        "word_length": 3,
        "text": "The",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2125000,
        "duration_milliseconds": 250,
        "text_offset": 4,
        "word_length": 4,
        "text": "last",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 4875000,
        "duration_milliseconds": 250,
        "text_offset": 9,
        "word_length": 4,
        "text": "step",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7625000,
        "duration_milliseconds": 87,
        "text_offset": 14,
        "word_length": 4,
        "text": "will",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8750000,
        "duration_milliseconds": 112,
        "text_offset": 19,
        "word_length": 2,
        "text": "be",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 10000000,
        "duration_milliseconds": 100,
        "text_offset": 22,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11250000,
        "duration_milliseconds": 400,
        "text_offset": 25,
        "word_length": 7,
        "text": "convert",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 15500000,
        "duration_milliseconds": 75,
        "text_offset": 33,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 16500000,
        "duration_milliseconds": 412,
        "text_offset": 37,
        "word_length": 7,
        "text": "euleric",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20875000,
        "duration_milliseconds": 387,
        "text_offset": 45,
        "word_length": 6,
        "text": "circle",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 24875000,
        "duration_milliseconds": 200,
        "text_offset": 52,
        "word_length": 4,
        "text": "into",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27125000,
        "duration_milliseconds": 37,
        "text_offset": 57,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 27625000,
        "duration_milliseconds": 462,
        "text_offset": 59,
        "word_length": 8,
        "text": "hamilton",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 32500000,
        "duration_milliseconds": 400,
        "text_offset": 68,
        "word_length": 6,
        "text": "circle",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 37500000,
        "duration_milliseconds": 187,
        "text_offset": 74,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 39375000,
        "duration_milliseconds": 100,
        "text_offset": 76,
        "word_length": 2,
        "text": "so",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 40500000,
        "duration_milliseconds": 100,
        "text_offset": 79,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41750000,
        "duration_milliseconds": 150,
        "text_offset": 82,
        "word_length": 4,
        "text": "have",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 43375000,
        "duration_milliseconds": 87,
        "text_offset": 87,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 44375000,
        "duration_milliseconds": 312,
        "text_offset": 90,
        "word_length": 6,
        "text": "delete",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 47750000,
        "duration_milliseconds": 225,
        "text_offset": 97,
        "word_length": 3,
        "text": "all",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 50250000,
        "duration_milliseconds": 300,
        "text_offset": 101,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 53500000,
        "duration_milliseconds": 187,
        "text_offset": 107,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 55500000,
        "duration_milliseconds": 175,
        "text_offset": 113,
        "word_length": 4,
        "text": "make",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 57500000,
        "duration_milliseconds": 100,
        "text_offset": 118,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58750000,
        "duration_milliseconds": 375,
        "text_offset": 122,
        "word_length": 6,
        "text": "circle",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 62625000,
        "duration_milliseconds": 287,
        "text_offset": 129,
        "word_length": 5,
        "text": "visit",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 65750000,
        "duration_milliseconds": 37,
        "text_offset": 135,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 66250000,
        "duration_milliseconds": 275,
        "text_offset": 137,
        "word_length": 4,
        "text": "node",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 69250000,
        "duration_milliseconds": 187,
        "text_offset": 142,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 71250000,
        "duration_milliseconds": 125,
        "text_offset": 148,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 72750000,
        "duration_milliseconds": 112,
        "text_offset": 151,
        "word_length": 4,
        "text": "have",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 74000000,
        "duration_milliseconds": 225,
        "text_offset": 156,
        "word_length": 4,
        "text": "seen",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76500000,
        "duration_milliseconds": 525,
        "text_offset": 161,
        "word_length": 6,
        "text": "before",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 82000000,
        "duration_milliseconds": 100,
        "text_offset": 167,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 90625000,
        "duration_milliseconds": 162,
        "text_offset": 169,
        "word_length": 2,
        "text": "In",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 92500000,
        "duration_milliseconds": 125,
        "text_offset": 172,
        "word_length": 3,
        "text": "our",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 93875000,
        "duration_milliseconds": 262,
        "text_offset": 176,
        "word_length": 4,
        "text": "case",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 96750000,
        "duration_milliseconds": 212,
        "text_offset": 181,
        "word_length": 5,
        "text": "these",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 99125000,
        "duration_milliseconds": 100,
        "text_offset": 187,
        "word_length": 3,
        "text": "are",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 100250000,
        "duration_milliseconds": 87,
        "text_offset": 191,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 101375000,
        "duration_milliseconds": 387,
        "text_offset": 195,
        "word_length": 5,
        "text": "edges",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 105500000,
        "duration_milliseconds": 362,
        "text_offset": 201,
        "word_length": 7,
        "text": "between",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 109375000,
        "duration_milliseconds": 250,
        "text_offset": 209,
        "word_length": 1,
        "text": "9",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 112000000,
        "duration_milliseconds": 87,
        "text_offset": 211,
        "word_length": 3,
        "text": "and",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 113125000,
        "duration_milliseconds": 487,
        "text_offset": 215,
        "word_length": 1,
        "text": "4",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 118250000,
        "duration_milliseconds": 100,
        "text_offset": 216,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "the-last-step-will-be-to-convert-the-euleric-3ff5adf2.mp3",
    "final_audio": "the-last-step-will-be-to-convert-the-euleric-3ff5adf2.mp3"
  },
  {
    "input_text": "If we take a look at the time complexity of the Christofides algorithm it is mainly determined by the step of finding a minimum perfect matching, which is n to the third power.",
    "input_data": {
      "input_text": "If we take a look at the time complexity of the Christofides algorithm it is mainly determined by the step of finding a minimum perfect matching, which is n to the third power.",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">If we take a look at the time complexity of the Christofides algorithm it is mainly determined by the step of finding a minimum perfect matching, which is n to the third power.</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">If we take a look at the time complexity of the Christofides algorithm it is mainly determined by the step of finding a minimum perfect matching, which is n to the third power.</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 187,
        "text_offset": 0,
        "word_length": 2,
        "text": "If",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 2625000,
        "duration_milliseconds": 112,
        "text_offset": 3,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3875000,
        "duration_milliseconds": 175,
        "text_offset": 6,
        "word_length": 4,
        "text": "take",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5750000,
        "duration_milliseconds": 62,
        "text_offset": 11,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 6625000,
        "duration_milliseconds": 200,
        "text_offset": 13,
        "word_length": 4,
        "text": "look",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 8875000,
        "duration_milliseconds": 62,
        "text_offset": 18,
        "word_length": 2,
        "text": "at",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9750000,
        "duration_milliseconds": 100,
        "text_offset": 21,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11000000,
        "duration_milliseconds": 275,
        "text_offset": 25,
        "word_length": 4,
        "text": "time",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 13875000,
        "duration_milliseconds": 650,
        "text_offset": 30,
        "word_length": 10,
        "text": "complexity",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 20625000,
        "duration_milliseconds": 62,
        "text_offset": 41,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 21500000,
        "duration_milliseconds": 87,
        "text_offset": 44,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 22625000,
        "duration_milliseconds": 750,
        "text_offset": 48,
        "word_length": 12,
        "text": "Christofides",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 30375000,
        "duration_milliseconds": 525,
        "text_offset": 61,
        "word_length": 9,
        "text": "algorithm",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 35875000,
        "duration_milliseconds": 87,
        "text_offset": 71,
        "word_length": 2,
        "text": "it",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 36875000,
        "duration_milliseconds": 125,
        "text_offset": 74,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 38250000,
        "duration_milliseconds": 325,
        "text_offset": 77,
        "word_length": 6,
        "text": "mainly",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 41750000,
        "duration_milliseconds": 512,
        "text_offset": 84,
        "word_length": 10,
        "text": "determined",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 47125000,
        "duration_milliseconds": 125,
        "text_offset": 95,
        "word_length": 2,
        "text": "by",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 48500000,
        "duration_milliseconds": 112,
        "text_offset": 98,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 49875000,
        "duration_milliseconds": 250,
        "text_offset": 102,
        "word_length": 4,
        "text": "step",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 52500000,
        "duration_milliseconds": 112,
        "text_offset": 107,
        "word_length": 2,
        "text": "of",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 53875000,
        "duration_milliseconds": 375,
        "text_offset": 110,
        "word_length": 7,
        "text": "finding",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 57875000,
        "duration_milliseconds": 50,
        "text_offset": 118,
        "word_length": 1,
        "text": "a",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 58500000,
        "duration_milliseconds": 400,
        "text_offset": 120,
        "word_length": 7,
        "text": "minimum",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 62750000,
        "duration_milliseconds": 400,
        "text_offset": 128,
        "word_length": 7,
        "text": "perfect",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 66875000,
        "duration_milliseconds": 387,
        "text_offset": 136,
        "word_length": 8,
        "text": "matching",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 71625000,
        "duration_milliseconds": 162,
        "text_offset": 144,
        "word_length": 1,
        "text": ",",
        "boundary_type": "Punctuation"
      },
      {
        "audio_offset": 73250000,
        "duration_milliseconds": 175,
        "text_offset": 146,
        "word_length": 5,
        "text": "which",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 75125000,
        "duration_milliseconds": 125,
        "text_offset": 152,
        "word_length": 2,
        "text": "is",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 76625000,
        "duration_milliseconds": 112,
        "text_offset": 155,
        "word_length": 1,
        "text": "n",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 78000000,
        "duration_milliseconds": 87,
        "text_offset": 157,
        "word_length": 2,
        "text": "to",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 79125000,
        "duration_milliseconds": 112,
        "text_offset": 160,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 80500000,
        "duration_milliseconds": 250,
        "text_offset": 164,
        "word_length": 5,
        "text": "third",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 83125000,
        "duration_milliseconds": 425,
        "text_offset": 170,
        "word_length": 5,
        "text": "power",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 87625000,
        "duration_milliseconds": 100,
        "text_offset": 175,
        "word_length": 1,
        "text": ".",
        "boundary_type": "Punctuation"
      }
    ],
    "original_audio": "if-we-take-a-look-at-the-time-complexity-of-the-310e118c.mp3",
    "final_audio": "if-we-take-a-look-at-the-time-complexity-of-the-310e118c.mp3"
  },
  {
    "input_text": "Now we go on with the next topic",
    "input_data": {
      "input_text": "Now we go on with the next topic",
      "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we go on with the next topic</mstts:express-as>\n    </voice>\n</speak>\n        ",
      "service": "azure",
      "config": {
        "voice": "en-US-GuyNeural ",
        "style": "newscast-casual",
        "output_format": "Audio48Khz192KBitRateMonoMp3",
        "prosody": null
      }
    },
    "ssml": "<speak version=\"1.0\" xmlns=\"http://www.w3.org/2001/10/synthesis\"\n    xmlns:mstts=\"https://www.w3.org/2001/mstts\" xml:lang=\"en-US\">\n    <voice name=\"en-US-GuyNeural \">\n        <mstts:express-as style=\"newscast-casual\">Now we go on with the next topic</mstts:express-as>\n    </voice>\n</speak>\n        ",
    "word_boundaries": [
      {
        "audio_offset": 500000,
        "duration_milliseconds": 275,
        "text_offset": 0,
        "word_length": 3,
        "text": "Now",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 3375000,
        "duration_milliseconds": 137,
        "text_offset": 4,
        "word_length": 2,
        "text": "we",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 5000000,
        "duration_milliseconds": 250,
        "text_offset": 7,
        "word_length": 2,
        "text": "go",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 7625000,
        "duration_milliseconds": 175,
        "text_offset": 10,
        "word_length": 2,
        "text": "on",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 9500000,
        "duration_milliseconds": 125,
        "text_offset": 13,
        "word_length": 4,
        "text": "with",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 11000000,
        "duration_milliseconds": 87,
        "text_offset": 18,
        "word_length": 3,
        "text": "the",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 12000000,
        "duration_milliseconds": 250,
        "text_offset": 22,
        "word_length": 4,
        "text": "next",
        "boundary_type": "Word"
      },
      {
        "audio_offset": 14625000,
        "duration_milliseconds": 437,
        "text_offset": 27,
        "word_length": 5,
        "text": "topic",
        "boundary_type": "Word"
      }
    ],
    "original_audio": "now-we-go-on-with-the-next-topic-b4db96e8.mp3",
    "final_audio": "now-we-go-on-with-the-next-topic-b4db96e8.mp3"
  }
]