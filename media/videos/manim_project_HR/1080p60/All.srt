1
00:00:00,000 --> 00:00:02,943
Welcome back guys! Today, we're diving

2
00:00:03,043 --> 00:00:06,068
into the Traveling Salesperson Problem.

3
00:00:06,166 --> 00:00:08,940
Imagine we have a traveling salesperson - tasked

4
00:00:09,040 --> 00:00:11,634
with selling your products in various cities.

5
00:00:11,733 --> 00:00:15,497
This guy is Alex, a salesperson with a big challenge.

6
00:00:15,583 --> 00:00:19,429
Alex has to sell products in various cities and wants to take

7
00:00:19,529 --> 00:00:23,376
the shortest route to save time. But how does Alex figure out

8
00:00:23,476 --> 00:00:27,387
the best route? Let's dive in and help Alex solve this puzzle.

9
00:00:27,483 --> 00:00:30,479
Let's say he needs to visit 4 cities.

10
00:00:30,566 --> 00:00:34,670
Sounds straightforward, right? What do you think happens if

11
00:00:34,770 --> 00:00:37,306
we add one more city to Alex's route?

12
00:00:37,400 --> 00:00:41,063
Of course, if we add more cities it get's more complex. So how

13
00:00:41,163 --> 00:00:45,676
do you determine the shortest possible route that connects all these cities?

14
00:00:45,766 --> 00:00:49,820
One approach is to try out every possible route. But here lies

15
00:00:49,920 --> 00:00:54,176
the problem: Complexity! So, with every new city Alex adds to the

16
00:00:54,276 --> 00:00:58,866
trip, the challenge of finding the shortest route grows significantly.

17
00:01:01,766 --> 00:01:05,459
The Problem to find the shortest way between multiple points

18
00:01:05,559 --> 00:01:09,441
is called the Traveling Salesperson Problem (TSP). Alex goal is

19
00:01:09,541 --> 00:01:12,538
to keep the distance traveled as low as possible.

20
00:01:12,633 --> 00:01:17,186
There are 2 main conditions: He needs to visit every destination once.

21
00:01:17,286 --> 00:01:21,773
starting from a particular one and returning to the same destination.

22
00:01:23,866 --> 00:01:27,459
To solve it, we'll think of each city as a point, or

23
00:01:27,559 --> 00:01:32,358
'node', on a graph. The edges symbolize possible paths Alex can take.

24
00:01:32,450 --> 00:01:35,326
It's complete, this means there's a direct path

25
00:01:35,426 --> 00:01:37,606
from every city to every other city.

26
00:01:39,050 --> 00:01:43,236
Our TSP is symmetric. It means the distance from city A

27
00:01:43,336 --> 00:01:46,822
to B is identical to the distance from B to A.

28
00:01:46,916 --> 00:01:50,501
Also, in our model, the direct path between any two cities

29
00:01:50,601 --> 00:01:53,996
is always the shortest. This means for two cities A and

30
00:01:54,096 --> 00:01:56,918
B there is no path with an added point that is

31
00:01:57,018 --> 00:02:02,128
shorter than the direct connection. adhering to the triangle inequality principle.

32
00:02:02,216 --> 00:02:04,567
With these rules in mind, let's explore

33
00:02:04,667 --> 00:02:06,892
how Alex can find the shortest route.

34
00:02:07,983 --> 00:02:10,186
To solve TSP, we have two primary

35
00:02:10,286 --> 00:02:13,955
approaches: the Optimal and the Approximation methods.

36
00:02:14,050 --> 00:02:16,970
In the Optimal category, we have two prominent

37
00:02:17,070 --> 00:02:19,926
algorithms: Brute Force and Branch and Bound.

38
00:02:20,016 --> 00:02:23,482
Moving on to the Approximation approach, we'll explain

39
00:02:23,582 --> 00:02:27,312
the algorithms k nearest neighbors (kNN) and Christofides.

40
00:02:27,412 --> 00:02:30,548
But let's start with the optimal solutions first.

41
00:02:31,633 --> 00:02:35,937
The Brute Force method is a straightforward but time-consuming approach

42
00:02:36,037 --> 00:02:39,224
to solve the TSP. It involves trying out all possible

43
00:02:39,324 --> 00:02:41,829
orders in which the cities can be visited.

44
00:02:41,916 --> 00:02:45,611
As the first step in our Brute-Force algorithm, we generate

45
00:02:45,711 --> 00:02:49,856
all possible permutations of the cities. This means creating every

46
00:02:49,956 --> 00:02:53,072
possible order in which the cities can be visited.

47
00:02:53,316 --> 00:02:57,173
Then, For each generated permutation, we calculate the length of

48
00:02:57,273 --> 00:03:00,944
the tour by summing the distances between the visited cities.

49
00:03:02,033 --> 00:03:04,664
Now, we need to Identify the tour with the

50
00:03:04,764 --> 00:03:08,241
shortest length among all the calculated tours. This is

51
00:03:08,341 --> 00:03:12,013
the optimal solution to the Traveling Salesperson Problem.

52
00:03:13,100 --> 00:03:15,615
We can calculate the time complexity as the

53
00:03:15,715 --> 00:03:18,657
number of possible permutations of n elements when

54
00:03:18,757 --> 00:03:21,760
each permutation is counted as a separate operation

55
00:03:21,850 --> 00:03:24,552
For the example we've seen before we used

56
00:03:24,652 --> 00:03:27,150
5 nodes, so we get 12 possible routes.

57
00:03:27,233 --> 00:03:29,858
If we just increase the number of nodes

58
00:03:29,958 --> 00:03:32,653
by 1, we already get 60 possible routes.

59
00:03:32,750 --> 00:03:38,986
For 10 nodes, it's already 181440 potential shortest paths!!

60
00:03:40,083 --> 00:03:43,991
This is because we got an exponential time complexity.

61
00:03:48,083 --> 00:03:52,567
Our first approximation approach is k nearest neighbors (kNN).

62
00:03:52,666 --> 00:03:55,604
We start at a specific city (any city can be the

63
00:03:55,704 --> 00:03:59,464
starting point). Then we check the shortest path and add this

64
00:03:59,564 --> 00:04:02,502
point to the tour. Same for the next node and so

65
00:04:02,602 --> 00:04:05,982
on ... we repeat this until there is no unvisited node.

66
00:04:07,266 --> 00:04:11,054
Finally, we draw a connection back to the starting point.

67
00:04:14,150 --> 00:04:17,506
This is how it can look like with more vertexesd.

68
00:04:21,150 --> 00:04:25,346
For a dataset with n cities, the time complexity of applying kNN to

69
00:04:25,446 --> 00:04:29,450
TSP is O of n squared. Even though it's better than using Branch

70
00:04:29,550 --> 00:04:33,554
and Bound in most cases we won't find the optimal shortest path.

