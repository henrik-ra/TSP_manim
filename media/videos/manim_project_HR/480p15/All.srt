1
00:00:00,000 --> 00:00:02,943
Welcome back guys! Today, we're diving

2
00:00:03,043 --> 00:00:06,068
into the Traveling Salesperson Problem.

3
00:00:06,133 --> 00:00:08,907
Imagine we have a traveling salesperson - tasked

4
00:00:09,007 --> 00:00:11,601
with selling your products in various cities.

5
00:00:11,666 --> 00:00:15,430
This guy is Alex, a salesperson with a big challenge.

6
00:00:15,466 --> 00:00:19,313
Alex has to sell products in various cities and wants to take

7
00:00:19,413 --> 00:00:23,259
the shortest route to save time. But how does Alex figure out

8
00:00:23,359 --> 00:00:27,270
the best route? Let's dive in and help Alex solve this puzzle.

9
00:00:27,333 --> 00:00:30,329
Let's say he needs to visit 4 cities.

10
00:00:30,400 --> 00:00:34,503
Sounds straightforward, right? What do you think happens if

11
00:00:34,603 --> 00:00:37,140
we add one more city to Alex's route?

12
00:00:37,200 --> 00:00:40,863
Of course, if we add more cities it get's more complex. So how

13
00:00:40,963 --> 00:00:45,476
do you determine the shortest possible route that connects all these cities?

14
00:00:45,533 --> 00:00:49,587
One approach is to try out every possible route. But here lies

15
00:00:49,687 --> 00:00:53,942
the problem: Complexity! So, with every new city Alex adds to the

16
00:00:54,042 --> 00:00:58,633
trip, the challenge of finding the shortest route grows significantly.

17
00:00:59,866 --> 00:01:03,559
The Problem to find the shortest way between multiple points

18
00:01:03,659 --> 00:01:07,541
is called the Traveling Salesperson Problem (TSP). Alex goal is

19
00:01:07,641 --> 00:01:10,638
to keep the distance traveled as low as possible.

20
00:01:10,733 --> 00:01:15,286
There are 2 main conditions: He needs to visit every destination once.

21
00:01:15,386 --> 00:01:19,873
starting from a particular one and returning to the same destination.

22
00:01:19,933 --> 00:01:23,525
To solve it, we'll think of each city as a point, or

23
00:01:23,625 --> 00:01:28,425
'node', on a graph. The edges symbolize possible paths Alex can take.

24
00:01:28,466 --> 00:01:31,342
It's complete, this means there's a direct path

25
00:01:31,442 --> 00:01:33,622
from every city to every other city.

26
00:01:36,266 --> 00:01:40,453
Our TSP is symmetric. It means the distance from city A

27
00:01:40,553 --> 00:01:44,038
to B is identical to the distance from B to A.

28
00:01:44,133 --> 00:01:47,718
Also, in our model, the direct path between any two cities

29
00:01:47,818 --> 00:01:51,212
is always the shortest. This means for two cities A and

30
00:01:51,312 --> 00:01:54,135
B there is no path with an added point that is

31
00:01:54,235 --> 00:01:59,345
shorter than the direct connection. adhering to the triangle inequality principle.

32
00:01:59,400 --> 00:02:01,750
With these rules in mind, let's explore

33
00:02:01,850 --> 00:02:04,076
how Alex can find the shortest route.

34
00:02:08,133 --> 00:02:10,336
To solve TSP, we have two primary

35
00:02:10,436 --> 00:02:14,105
approaches: the Optimal and the Approximation methods.

36
00:02:14,200 --> 00:02:17,120
In the Optimal category, we have two prominent

37
00:02:17,220 --> 00:02:20,076
algorithms: Brute Force and Branch and Bound.

38
00:02:20,133 --> 00:02:23,599
Moving on to the Approximation approach, we'll explain

39
00:02:23,699 --> 00:02:27,429
the algorithms k nearest neighbors (kNN) and Christofides.

40
00:02:27,529 --> 00:02:30,665
But let's start with the optimal solutions first.

41
00:02:33,733 --> 00:02:38,037
The Brute Force method is a straightforward but time-consuming approach

42
00:02:38,137 --> 00:02:41,324
to solve the TSP. It involves trying out all possible

43
00:02:41,424 --> 00:02:43,929
orders in which the cities can be visited.

44
00:02:44,000 --> 00:02:47,694
As the first step in our Brute-Force algorithm, we generate

45
00:02:47,794 --> 00:02:51,940
all possible permutations of the cities. This means creating every

46
00:02:52,040 --> 00:02:55,156
possible order in which the cities can be visited.

47
00:02:56,000 --> 00:02:59,856
Then, For each generated permutation, we calculate the length of

48
00:02:59,956 --> 00:03:03,628
the tour by summing the distances between the visited cities.

49
00:03:04,666 --> 00:03:07,298
Now, we need to Identify the tour with the

50
00:03:07,398 --> 00:03:10,874
shortest length among all the calculated tours. This is

51
00:03:10,974 --> 00:03:14,646
the optimal solution to the Traveling Salesperson Problem.

52
00:03:17,733 --> 00:03:20,249
We can calculate the time complexity as the

53
00:03:20,349 --> 00:03:23,290
number of possible permutations of n elements when

54
00:03:23,390 --> 00:03:26,393
each permutation is counted as a separate operation

55
00:03:26,466 --> 00:03:29,169
For the example we've seen before we used

56
00:03:29,269 --> 00:03:31,766
5 nodes, so we get 12 possible routes.

57
00:03:31,866 --> 00:03:34,491
If we just increase the number of nodes

58
00:03:34,591 --> 00:03:37,286
by 1, we already get 60 possible routes.

59
00:03:37,333 --> 00:03:43,603
For 10 nodes, it's already 181440 potential shortest paths!!

60
00:03:43,703 --> 00:03:49,761
This is because we got an ??exponential?? time complexity.

61
00:04:06,800 --> 00:04:09,737
We start at a specific city (any city can be the

62
00:04:09,837 --> 00:04:13,597
starting point). Then we check the shortest path and add this

63
00:04:13,697 --> 00:04:16,635
point to the tour. Same for the next node and so

64
00:04:16,735 --> 00:04:20,116
on ... we repeat this until there is no unvisited node.

65
00:04:22,933 --> 00:04:26,721
Finally, we draw a connection back to the starting point.

66
00:04:31,800 --> 00:04:35,348
If we add more cities, the time complexity still stays good,

67
00:04:35,448 --> 00:04:38,876
but in most cases we won't find the optimal shortest path.

68
00:04:40,466 --> 00:04:43,969
For a dataset with n cities, the time complexity of

69
00:04:44,069 --> 00:04:47,006
applying kNN to TSP is O of n squared. Even

70
00:04:47,106 --> 00:04:50,326
though it's better than using Branch and Bound.

