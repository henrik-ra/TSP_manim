1
00:00:00,000 --> 00:00:03,144
Another way of solving the TSP is with the help of

2
00:00:03,244 --> 00:00:06,908
the branch and bound method. Let's start with a simple TSP

3
00:00:07,008 --> 00:00:10,153
example. Again we have a set of cities and need to

4
00:00:10,253 --> 00:00:14,372
find the shortest possible route visiting each city exactly once.

5
00:00:18,000 --> 00:00:22,200
The Branch-and-Bound method begins by constructing a tree of

6
00:00:22,300 --> 00:00:25,856
all possibilities. First we need a Graph. Let's use

7
00:00:25,956 --> 00:00:28,508
the same graph and start at node one.

8
00:00:28,600 --> 00:00:34,066
Now we have to look at the next possible nodes. In this case we

9
00:00:34,166 --> 00:00:38,484
have four options. We can go to node 2, 3, 4 or 5.

10
00:00:39,600 --> 00:00:43,256
At the same time we can tranform the graph on the right to

11
00:00:43,356 --> 00:00:46,947
a tree with node one as the root. This tree will show all

12
00:00:47,047 --> 00:00:52,258
the possible routes that the salesperson can use. As explained, starting with node

13
00:00:52,358 --> 00:00:55,820
one the next possible nodes could be node 2, 3, 4 or 5.

14
00:00:55,916 --> 00:00:59,306
This would be the first version of the tree. Now we

15
00:00:59,406 --> 00:01:02,591
have to take a look at the next steps. Let's say

16
00:01:02,691 --> 00:01:05,944
we choose node 2 as the second node to travel to.

17
00:01:06,033 --> 00:01:11,021
Starting from node 2, the next options would be node 3, 4 or 5.

18
00:01:13,033 --> 00:01:17,295
Now we can create the next step at the tree. Again the next

19
00:01:17,395 --> 00:01:21,213
possible nodes to travel to would be node 3, 4 and 5.

20
00:01:21,300 --> 00:01:25,530
Let's continue creating one possible route. We decide to

21
00:01:25,630 --> 00:01:28,160
travel to node 5 as our next city.

22
00:01:28,250 --> 00:01:32,233
Starting from node 5, there are two cities left that

23
00:01:32,333 --> 00:01:35,374
have not been visited yet. Node 3 and 4.

24
00:01:35,466 --> 00:01:39,950
Let's go back to the tree and add the last two options, node 3 and 4

25
00:01:43,366 --> 00:01:46,626
This time we choose node 3 as the next city.

26
00:01:48,366 --> 00:01:52,826
As you can see the last city, that we have not visited is city 4.

27
00:01:52,916 --> 00:01:58,480
Let's also add node 4 in the tree. Now we have visited every city.

28
00:01:58,566 --> 00:02:02,269
At the end we have to travel to the city where we started

29
00:02:02,369 --> 00:02:06,338
the tour. Let's finish our route by traveling back to city 1.

30
00:02:06,433 --> 00:02:08,721
Now we can also finish our route on the

31
00:02:08,821 --> 00:02:11,109
tree by adding node 1 as our last node.

32
00:02:11,200 --> 00:02:14,191
As you can see this is one possible route and

33
00:02:14,291 --> 00:02:18,108
the tree is not complete. Let's create the complete tree.

34
00:02:21,200 --> 00:02:25,449
This tree shows every possible route, if you start from node one. Here

35
00:02:25,549 --> 00:02:29,053
we can now see that there are 24 possible routes to get to

36
00:02:29,153 --> 00:02:32,595
the last node. But is you take a closer look at the first

37
00:02:32,695 --> 00:02:36,572
and last route, you can see that the routes are identical, if we

38
00:02:36,672 --> 00:02:40,735
have a symmetrical TSP. That means if we have a symmetrical TSP, as

39
00:02:40,835 --> 00:02:43,780
in our example, we can ignore half of the routes.

40
00:02:44,366 --> 00:02:48,586
Here we can also visualize which route we took in the first example.

41
00:02:48,683 --> 00:02:53,027
After having created a tree for every possible route, the branch and bound method

42
00:02:53,127 --> 00:02:56,978
calculates the cost for every route and compares it to the best route so

43
00:02:57,078 --> 00:03:00,490
far. If the cost of the current route is higher than the cost of

44
00:03:00,590 --> 00:03:03,727
the best route so far, the current route will be discarded.

45
00:03:03,816 --> 00:03:08,537
Let's take a look at an example. Lets say the algorithm calculated

46
00:03:08,637 --> 00:03:12,116
our route first with the cost of 15. As it is the

47
00:03:12,216 --> 00:03:15,476
first route, it is also the best route so far.

48
00:03:15,566 --> 00:03:20,183
Next, the algorithm calculates the route on the left. The cost of this

49
00:03:20,283 --> 00:03:24,158
route is 12. As this route is better than the best route so

50
00:03:24,258 --> 00:03:28,066
far, the best route so far will be replaced by this route.

51
00:03:28,150 --> 00:03:31,866
Next, the algorithm calculates the next route.

