1
00:00:00,000 --> 00:00:02,943
Welcome back guys! Today, we're diving

2
00:00:03,043 --> 00:00:06,068
into the Traveling Salesperson Problem.

3
00:00:06,533 --> 00:00:09,307
Imagine we have a traveling salesperson - tasked

4
00:00:09,407 --> 00:00:12,001
with selling your products in various cities.

5
00:00:12,066 --> 00:00:15,830
This guy is Alex, a salesperson with a big challenge.

6
00:00:16,066 --> 00:00:19,913
Alex has to sell products in various cities and wants to take

7
00:00:20,013 --> 00:00:23,859
the shortest route to save time. But how does Alex figure out

8
00:00:23,959 --> 00:00:27,870
the best route? Let's dive in and help Alex solve this puzzle.

9
00:00:27,933 --> 00:00:30,929
Let's say he needs to visit 4 cities.

10
00:00:31,000 --> 00:00:35,103
Sounds straightforward, right? What do you think happens if

11
00:00:35,203 --> 00:00:37,740
we add one more city to Alex's route?

12
00:00:37,800 --> 00:00:41,463
Of course, if we add more cities it get's more complex. So how

13
00:00:41,563 --> 00:00:46,076
do you determine the shortest possible route that connects all these cities?

14
00:00:46,133 --> 00:00:50,187
One approach is to try out every possible route. But here lies

15
00:00:50,287 --> 00:00:54,542
the problem: Complexity! So, with every new city Alex adds to the

16
00:00:54,642 --> 00:00:59,233
trip, the challenge of finding the shortest route grows significantly.

17
00:01:00,466 --> 00:01:04,159
The Problem to find the shortest way between multiple points

18
00:01:04,259 --> 00:01:08,141
is called the Traveling Salesperson Problem (TSP). Alex goal is

19
00:01:08,241 --> 00:01:11,238
to keep the distance traveled as low as possible.

20
00:01:11,333 --> 00:01:15,046
There are 2 main conditions: He needs to visit every city exactly

21
00:01:15,146 --> 00:01:19,153
once, starting from a specific one and returning to the starting city.

22
00:01:20,200 --> 00:01:23,792
To solve it, we'll think of each city as a point, or

23
00:01:23,892 --> 00:01:28,692
'node', on a graph. The edges symbolize possible paths Alex can take.

24
00:01:28,733 --> 00:01:31,758
The graph is complete, this means there's a direct

25
00:01:31,858 --> 00:01:34,321
path from every city to every other city.

26
00:01:36,533 --> 00:01:40,118
Also, in our model, the direct path between any two cities

27
00:01:40,218 --> 00:01:43,612
is always the shortest. This means for two cities A and

28
00:01:43,712 --> 00:01:46,535
B there is no path with an added point that is

29
00:01:46,635 --> 00:01:51,745
shorter than the direct connection. adhering to the triangle inequality principle.

30
00:01:51,800 --> 00:01:55,986
Our TSP is symmetric. It means the distance from city A

31
00:01:56,086 --> 00:01:59,572
to B is identical to the distance from B to A.

32
00:02:00,200 --> 00:02:02,795
This isn't really accurate in real life because

33
00:02:02,895 --> 00:02:05,836
of conditions of the landscape or construction sites.

34
00:02:05,933 --> 00:02:09,529
Thats why there is also a asymmetrical TSP.

35
00:02:09,600 --> 00:02:13,907
The TSP is called asymmetrical if there are two edges between every node

36
00:02:14,007 --> 00:02:17,641
and they don't have the same weight. As you can see the graph

37
00:02:17,741 --> 00:02:21,680
is then directed. This is way more accurate to the real world, but

38
00:02:21,780 --> 00:02:25,965
this is also more complex to solve then the symmetrical. In this video

39
00:02:26,065 --> 00:02:29,516
we will only show you ways of solving the symmetrical TSP.

40
00:02:29,600 --> 00:02:33,124
Let's take a look at how the TSP can be solved

41
00:02:33,200 --> 00:02:35,598
To solve the TSP, we have two primary

42
00:02:35,698 --> 00:02:39,244
approaches: the Optimal and the Approximation methods.

43
00:02:39,333 --> 00:02:42,254
In the Optimal category, we have two prominent

44
00:02:42,354 --> 00:02:45,209
algorithms: Brute Force and Branch and Bound.

45
00:02:45,266 --> 00:02:48,692
Moving on to the Approximation approach, we'll explain

46
00:02:48,792 --> 00:02:52,479
the algorithms Christofides and k nearest neighbors (kNN).

47
00:02:52,579 --> 00:02:55,678
But let's start with the optimal solutions first.

48
00:02:56,733 --> 00:03:01,037
The Brute Force method is a straightforward but time-consuming approach

49
00:03:01,137 --> 00:03:04,324
to solve the TSP. It involves trying out all possible

50
00:03:04,424 --> 00:03:06,929
orders in which the cities can be visited.

51
00:03:07,000 --> 00:03:10,694
As the first step in our Brute-Force algorithm, we generate

52
00:03:10,794 --> 00:03:14,940
all possible permutations of the cities. This means creating every

53
00:03:15,040 --> 00:03:18,156
possible order in which the cities can be visited.

54
00:03:19,000 --> 00:03:22,856
Then, For each generated permutation, we calculate the length of

55
00:03:22,956 --> 00:03:26,628
the tour by summing the distances between the visited cities.

56
00:03:27,666 --> 00:03:30,298
Now, we need to Identify the tour with the

57
00:03:30,398 --> 00:03:33,874
shortest length among all the calculated tours. This is

58
00:03:33,974 --> 00:03:37,646
the optimal solution to the Traveling Salesperson Problem.

59
00:03:38,733 --> 00:03:41,517
We can calculate the number of possible paths as

60
00:03:41,617 --> 00:03:44,761
the number of possible permutations of n elements when

61
00:03:44,861 --> 00:03:47,825
each permutation is counted as a separate operation

62
00:03:47,866 --> 00:03:50,569
For the example we've seen before we used

63
00:03:50,669 --> 00:03:53,166
5 nodes, so we get 12 possible routes.

64
00:03:53,266 --> 00:03:55,891
If we just increase the number of nodes

65
00:03:55,991 --> 00:03:58,686
by 1, we already get 60 possible routes.

66
00:03:58,733 --> 00:04:04,969
For 10 nodes, it's already 181440 potential shortest paths!!

67
00:04:06,066 --> 00:04:10,718
So we got a factorial time complexity for the Brute Force algorithm.

68
00:04:14,066 --> 00:04:17,211
Another way of solving the TSP is with the help of

69
00:04:17,311 --> 00:04:20,975
the branch and bound method. Let's start with a simple TSP

70
00:04:21,075 --> 00:04:24,220
example. Again we have a set of cities and need to

71
00:04:24,320 --> 00:04:28,438
find the shortest possible route visiting each city exactly once.

72
00:04:33,933 --> 00:04:38,133
The Branch-and-Bound method begins by constructing a tree of

73
00:04:38,233 --> 00:04:41,789
all possibilities. First we need a Graph. Let's use

74
00:04:41,889 --> 00:04:44,441
the same graph and start at node one.

75
00:04:44,533 --> 00:04:49,999
Now we have to look at the next possible nodes. In this case we

76
00:04:50,099 --> 00:04:54,417
have four options. We can go to node 2, 3, 4 or 5.

77
00:04:55,533 --> 00:04:59,250
At the same time we can transform the graph on the right to

78
00:04:59,350 --> 00:05:02,938
a tree with node one as the root. This tree will show all

79
00:05:03,038 --> 00:05:08,243
the possible routes that the salesperson can use. As explained, starting with node

80
00:05:08,343 --> 00:05:11,801
one the next possible nodes could be node 2, 3, 4 or 5.

81
00:05:11,866 --> 00:05:15,256
This would be the first version of the tree. Now we

82
00:05:15,356 --> 00:05:18,541
have to take a look at the next steps. Let's say

83
00:05:18,641 --> 00:05:21,894
we choose node 2 as the second node to travel to.

84
00:05:21,933 --> 00:05:26,921
Starting from node 2, the next options would be node 3, 4 or 5.

85
00:05:28,933 --> 00:05:33,195
Now we can create the next step at the tree. Again the next

86
00:05:33,295 --> 00:05:37,113
possible nodes to travel to would be node 3, 4 and 5.

87
00:05:37,200 --> 00:05:41,430
Let's continue creating one possible route. We decide to

88
00:05:41,530 --> 00:05:44,060
travel to node 5 as our next city.

89
00:05:44,133 --> 00:05:48,116
Starting from node 5, there are two cities left that

90
00:05:48,216 --> 00:05:51,257
have not been visited yet. Node 3 and 4.

91
00:05:51,333 --> 00:05:55,817
Let's go back to the tree and add the last two options, node 3 and 4

92
00:05:59,333 --> 00:06:02,593
This time we choose node 3 as the next city.

93
00:06:04,333 --> 00:06:08,793
As you can see the last city, that we have not visited is city 4.

94
00:06:08,866 --> 00:06:14,430
Let's also add node 4 in the tree. Now we have visited every city.

95
00:06:14,466 --> 00:06:18,169
At the end we have to travel to the city where we started

96
00:06:18,269 --> 00:06:22,238
the tour. Let's finish our route by traveling back to city 1.

97
00:06:22,333 --> 00:06:24,621
Now we can also finish our route on the

98
00:06:24,721 --> 00:06:27,009
tree by adding node 1 as our last node.

99
00:06:27,066 --> 00:06:30,058
As you can see this is one possible route and

100
00:06:30,158 --> 00:06:33,974
the tree is not complete. Let's create the complete tree.

101
00:06:37,066 --> 00:06:41,316
This tree shows every possible route, if you start from node one. Here

102
00:06:41,416 --> 00:06:44,920
we can now see that there are 24 possible routes to get to

103
00:06:45,020 --> 00:06:48,462
the last node. But is you take a closer look at the first

104
00:06:48,562 --> 00:06:52,438
and last route, you can see that the routes are identical, if we

105
00:06:52,538 --> 00:06:56,601
have a symmetrical TSP. That means if we have a symmetrical TSP, as

106
00:06:56,701 --> 00:06:59,646
in our example, we can ignore half of the routes.

107
00:06:59,733 --> 00:07:02,729
Let's mark out the routes that we can ignore.

108
00:07:04,800 --> 00:07:09,020
Here we can also visualize which route we took in the first example.

109
00:07:09,466 --> 00:07:13,811
After having created a tree for every possible route, the branch and bound method

110
00:07:13,911 --> 00:07:17,761
calculates the cost for every route and compares it to the best route so

111
00:07:17,861 --> 00:07:21,273
far. If the cost of the current route is higher than the cost of

112
00:07:21,373 --> 00:07:24,510
the best route so far, the current route will be discarded.

113
00:07:24,600 --> 00:07:29,320
Let's take a look at an example. Lets say the algorithm calculated

114
00:07:29,420 --> 00:07:32,900
our route first with the cost of 15. As it is the

115
00:07:33,000 --> 00:07:36,260
first route, it is also the best route so far.

116
00:07:37,800 --> 00:07:42,018
Next, the algorithm calculates the route on the left. The cost

117
00:07:42,118 --> 00:07:45,432
of this route is 12. As this route is better than

118
00:07:45,532 --> 00:07:49,124
the best route so far, it becomes the new best route.

119
00:07:49,800 --> 00:07:53,485
Now the algorithm calculates the next route. In our

120
00:07:53,585 --> 00:07:56,900
example it will be the seventh possible route.

121
00:07:56,933 --> 00:08:00,761
In this route the algorithm realizes at the third node that the added

122
00:08:00,861 --> 00:08:04,120
costs are at 14. Since the cost of the route till the third

123
00:08:04,220 --> 00:08:08,048
node is already higher than the cost of the best route, the algorithm

124
00:08:08,148 --> 00:08:11,521
can discard this route without calculating it untill the end.

125
00:08:11,600 --> 00:08:15,463
This way of calculating the best route is applied to every

126
00:08:15,563 --> 00:08:19,289
route. At the end the algorithm will have found the best

127
00:08:19,389 --> 00:08:22,228
route. In this example it is the first one.

128
00:08:22,266 --> 00:08:26,294
As explained, the algorithm calculates every possible route. But

129
00:08:26,394 --> 00:08:29,197
as we have seen before, it can discard routes

130
00:08:29,297 --> 00:08:31,454
that are worse than the best route.

131
00:08:31,533 --> 00:08:35,067
That means the algorithm does not have to calculate every route

132
00:08:35,167 --> 00:08:38,816
untill the end. Nevertheless, in the worst case the algorithm has

133
00:08:38,916 --> 00:08:42,334
to calculate every possible route untill the end and the time

134
00:08:42,434 --> 00:08:45,161
complexity is the same as the brute force method.

135
00:08:45,200 --> 00:08:48,340
Thats it for the optimal solutions so far.

136
00:08:50,400 --> 00:08:53,252
For the approximation methods, one problem is

137
00:08:53,352 --> 00:08:56,204
to evaluate how good the algorithm performed.

138
00:08:56,266 --> 00:09:00,280
So we need to point out how good our approximated solution is, compared to

139
00:09:00,380 --> 00:09:04,672
the optimum. In some business cases there is a treshold given by the supervisor

140
00:09:04,772 --> 00:09:08,286
so you don't need to know how near the solution is to the optimum

141
00:09:08,386 --> 00:09:11,733
but in a theroetic case we want to know this. For large TSP to

142
00:09:11,833 --> 00:09:16,569
determine the optimum is not economically sensible because of the complexity so we need

143
00:09:16,669 --> 00:09:19,182
to find an other value to measure our solution.

144
00:09:19,266 --> 00:09:22,958
So lets imagine we have these nodes as a tsp

145
00:09:23,000 --> 00:09:26,044
and this is our approximated solution.

146
00:09:28,000 --> 00:09:31,044
We take a look at all the weights and sum them up.

147
00:09:32,000 --> 00:09:35,596
This is the value for our approximated solution.

148
00:09:36,000 --> 00:09:39,932
But now we still don't now how good this is compared to the optimum.

149
00:09:41,466 --> 00:09:44,126
For this we use the lower bound.

150
00:09:44,200 --> 00:09:46,473
The lower bound is the value of the sum of

151
00:09:46,573 --> 00:09:49,524
every weight of every edge in a minimum spanning tree.

152
00:09:49,600 --> 00:09:52,836
So imagine we have these nodes from before.

153
00:09:52,933 --> 00:09:55,180
We add the edges and their weights to the

154
00:09:55,280 --> 00:09:57,585
nodes so we get our minimal spanning tree.

155
00:09:57,666 --> 00:10:00,998
We take again a look at all the weights and sum them up.

156
00:10:01,066 --> 00:10:03,990
This is the value of our lower bound.

157
00:10:04,066 --> 00:10:06,492
Now we have a value which we can compare to

158
00:10:06,592 --> 00:10:09,606
our approximated solution and we know how good it is!

159
00:10:09,666 --> 00:10:13,574
Now we can continue with the approximated algorithms

160
00:10:13,666 --> 00:10:17,595
In the following we will explain the christofides algorithm.

161
00:10:17,695 --> 00:10:21,020
This is an approximated algorithm to solve the TSP.

162
00:10:21,120 --> 00:10:24,512
This algorithm guarantees a solution that is at most

163
00:10:24,612 --> 00:10:27,870
fifthy percent longer than the optimal round trip.

164
00:10:27,933 --> 00:10:31,793
Let's take a look at the graph to visualize this algorithm.

165
00:10:31,866 --> 00:10:35,726
First we will create a minimal spanning tree with every node.

166
00:10:35,800 --> 00:10:38,416
Then we search for every node in the graph with

167
00:10:38,516 --> 00:10:41,076
an odd degree, meaning an odd number of edges.

168
00:10:41,133 --> 00:10:44,462
After finding all the nodes with an odd degree we need to find

169
00:10:44,562 --> 00:10:48,445
a minimum perfect matching, so we need to find edges with minimum weight

170
00:10:48,545 --> 00:10:51,819
for every node to get an even degree. Then we combine them to

171
00:10:51,919 --> 00:10:55,193
obtain a multigraph in which every vertex has an even degree.

172
00:10:55,266 --> 00:10:58,638
Since every vertex has an even degree, we can find an

173
00:10:58,738 --> 00:11:02,633
Eulerian circuit in this graph. An Eulerian circuit is a path

174
00:11:02,733 --> 00:11:06,105
that visits each edge exactly once. So as you can see

175
00:11:06,205 --> 00:11:10,166
we go through our multigraph and note down every visited node.

176
00:11:19,266 --> 00:11:22,815
The last step will be to convert the euleric circle into

177
00:11:22,915 --> 00:11:26,399
a hamilton circle, so we have to delete all edges which

178
00:11:26,499 --> 00:11:29,917
we have already seen before. In our case these are the

179
00:11:30,017 --> 00:11:33,110
edges between 9 and 4. There we got our solution!

180
00:11:33,200 --> 00:11:37,106
If we take a look at the time complexity of the Christofides algorithm

181
00:11:37,206 --> 00:11:41,341
it is mainly determined by the step of finding a minimum perfect matching,

182
00:11:41,441 --> 00:11:45,118
which is n to the third power. If time complexity is important, it

183
00:11:45,218 --> 00:11:48,724
could be preferable than using Brute Force or Branch and Bound.

184
00:11:48,800 --> 00:11:53,380
Our second approximation approach is k nearest neighbors (kNN).

185
00:11:53,466 --> 00:11:56,404
We start at a specific city (any city can be the

186
00:11:56,504 --> 00:12:00,264
starting point). Then we check the shortest path and add this

187
00:12:00,364 --> 00:12:03,302
point to the tour. Same for the next node and so

188
00:12:03,402 --> 00:12:06,782
on ... we repeat this until there is no unvisited node.

189
00:12:09,866 --> 00:12:13,654
Finally, we draw a connection back to the starting point.

190
00:12:16,733 --> 00:12:19,041
This is how it can look like with more

191
00:12:19,141 --> 00:12:21,577
nodes, so more cities Alex has to visit.

192
00:12:25,533 --> 00:12:29,879
For a dataset with n cities, the time complexity of applying kNN to

193
00:12:29,979 --> 00:12:33,595
TSP is O of n squared. For kNN, time complexity is a bit

194
00:12:33,695 --> 00:12:37,045
better compared to O of n to the power of 3 by using

195
00:12:37,145 --> 00:12:42,752
Christofides. Both are faster than using Brute Force with a factorial time complexity,

196
00:12:42,852 --> 00:12:46,601
but in most cases we won't find the optimal shortest path.

197
00:12:48,666 --> 00:12:51,700
In this video, we showed you different methods to

198
00:12:51,800 --> 00:12:55,602
solve the traveling salesperson problem. Every method has its

199
00:12:55,702 --> 00:12:59,568
own advantages and disadvantages. The brute force algorithm is

200
00:12:59,668 --> 00:13:02,510
the most accurate, but it is also the slowest.

201
00:13:03,666 --> 00:13:06,080
The branch and bound method is faster, but

202
00:13:06,180 --> 00:13:08,654
it is still not efficient for large graphs.

203
00:13:08,733 --> 00:13:12,389
The Christofides algorithm is a heuristic algorithm, which means

204
00:13:12,489 --> 00:13:15,323
it is not guaranteed to find the optimal solution,

205
00:13:15,423 --> 00:13:18,257
but it is much faster than the previous solutions.

206
00:13:18,333 --> 00:13:22,918
The k-nearest neighbor algorithm is also a heuristic algorithm. Even though

207
00:13:23,018 --> 00:13:27,292
it is faster than the Christofides algorithm, results are often worse.

208
00:13:27,392 --> 00:13:30,415
In the end depending on the size of the graph, you

209
00:13:30,515 --> 00:13:34,289
have to decide which solution is best suited for your problem.

210
00:13:34,333 --> 00:13:37,713
Thanks for joining us today! If you enjoyed the video

211
00:13:37,813 --> 00:13:41,193
and learned something new, please give it a thumbs up

212
00:13:41,733 --> 00:13:46,109
Don't forget to subscribe and hit the bell so you won't miss

213
00:13:46,209 --> 00:13:51,257
our next adventure. Until next time, stay curious and take care. Bye!

