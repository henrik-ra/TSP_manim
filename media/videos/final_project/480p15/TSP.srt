1
00:00:00,000 --> 00:00:02,943
Welcome back guys! Today, we're diving

2
00:00:03,043 --> 00:00:06,068
into the Traveling Salesperson Problem.

3
00:00:06,133 --> 00:00:08,907
Imagine we have a traveling salesperson - tasked

4
00:00:09,007 --> 00:00:11,601
with selling your products in various cities.

5
00:00:11,666 --> 00:00:15,430
This guy is Alex, a salesperson with a big challenge.

6
00:00:15,466 --> 00:00:19,313
Alex has to sell products in various cities and wants to take

7
00:00:19,413 --> 00:00:23,259
the shortest route to save time. But how does Alex figure out

8
00:00:23,359 --> 00:00:27,270
the best route? Let's dive in and help Alex solve this puzzle.

9
00:00:27,333 --> 00:00:30,329
Let's say he needs to visit 4 cities.

10
00:00:30,400 --> 00:00:34,503
Sounds straightforward, right? What do you think happens if

11
00:00:34,603 --> 00:00:37,140
we add one more city to Alex's route?

12
00:00:37,200 --> 00:00:40,863
Of course, if we add more cities it get's more complex. So how

13
00:00:40,963 --> 00:00:45,476
do you determine the shortest possible route that connects all these cities?

14
00:00:45,533 --> 00:00:49,587
One approach is to try out every possible route. But here lies

15
00:00:49,687 --> 00:00:53,942
the problem: Complexity! So, with every new city Alex adds to the

16
00:00:54,042 --> 00:00:58,633
trip, the challenge of finding the shortest route grows significantly.

17
00:00:59,866 --> 00:01:03,559
The Problem to find the shortest way between multiple points

18
00:01:03,659 --> 00:01:07,541
is called the Traveling Salesperson Problem (TSP). Alex goal is

19
00:01:07,641 --> 00:01:10,638
to keep the distance traveled as low as possible.

20
00:01:10,733 --> 00:01:14,446
There are 2 main conditions: He needs to visit every city exactly

21
00:01:14,546 --> 00:01:18,553
once, starting from a specific one and returning to the starting city.

22
00:01:20,600 --> 00:01:24,192
To solve it, we'll think of each city as a point, or

23
00:01:24,292 --> 00:01:29,092
'node', on a graph. The edges symbolize possible paths Alex can take.

24
00:01:29,133 --> 00:01:32,009
It's complete, this means there's a direct path

25
00:01:32,109 --> 00:01:34,289
from every city to every other city.

26
00:01:36,933 --> 00:01:41,120
Our TSP is symmetric. It means the distance from city A

27
00:01:41,220 --> 00:01:44,705
to B is identical to the distance from B to A.

28
00:01:44,800 --> 00:01:48,385
Also, in our model, the direct path between any two cities

29
00:01:48,485 --> 00:01:51,879
is always the shortest. This means for two cities A and

30
00:01:51,979 --> 00:01:54,802
B there is no path with an added point that is

31
00:01:54,902 --> 00:02:00,012
shorter than the direct connection. adhering to the triangle inequality principle.

32
00:02:00,066 --> 00:02:02,417
With these rules in mind, let's explore

33
00:02:02,517 --> 00:02:04,742
how Alex can find the shortest route.

34
00:02:05,800 --> 00:02:08,003
To solve TSP, we have two primary

35
00:02:08,103 --> 00:02:11,772
approaches: the Optimal and the Approximation methods.

36
00:02:11,866 --> 00:02:14,787
In the Optimal category, we have two prominent

37
00:02:14,887 --> 00:02:17,742
algorithms: Brute Force and Branch and Bound.

38
00:02:17,800 --> 00:02:21,266
Moving on to the Approximation approach, we'll explain

39
00:02:21,366 --> 00:02:25,096
the algorithms k nearest neighbors (kNN) and Christofides.

40
00:02:25,196 --> 00:02:28,332
But let's start with the optimal solutions first.

41
00:02:29,400 --> 00:02:33,703
The Brute Force method is a straightforward but time-consuming approach

42
00:02:33,803 --> 00:02:36,990
to solve the TSP. It involves trying out all possible

43
00:02:37,090 --> 00:02:39,596
orders in which the cities can be visited.

44
00:02:39,666 --> 00:02:43,361
As the first step in our Brute-Force algorithm, we generate

45
00:02:43,461 --> 00:02:47,606
all possible permutations of the cities. This means creating every

46
00:02:47,706 --> 00:02:50,822
possible order in which the cities can be visited.

47
00:02:51,666 --> 00:02:55,523
Then, For each generated permutation, we calculate the length of

48
00:02:55,623 --> 00:02:59,294
the tour by summing the distances between the visited cities.

49
00:03:00,333 --> 00:03:02,964
Now, we need to Identify the tour with the

50
00:03:03,064 --> 00:03:06,541
shortest length among all the calculated tours. This is

51
00:03:06,641 --> 00:03:10,313
the optimal solution to the Traveling Salesperson Problem.

52
00:03:11,400 --> 00:03:14,183
We can calculate the number of possible paths as

53
00:03:14,283 --> 00:03:17,428
the number of possible permutations of n elements when

54
00:03:17,528 --> 00:03:20,492
each permutation is counted as a separate operation

55
00:03:20,533 --> 00:03:23,235
For the example we've seen before we used

56
00:03:23,335 --> 00:03:25,833
5 nodes, so we get 12 possible routes.

57
00:03:25,933 --> 00:03:28,558
If we just increase the number of nodes

58
00:03:28,658 --> 00:03:31,353
by 1, we already get 60 possible routes.

59
00:03:31,400 --> 00:03:37,636
For 10 nodes, it's already 181440 potential shortest paths!!

60
00:03:38,733 --> 00:03:42,641
This is because we got an exponential time complexity.

61
00:03:45,733 --> 00:03:48,878
Another way of solving the TSP is with the help of

62
00:03:48,978 --> 00:03:52,642
the branch and bound method. Let's start with a simple TSP

63
00:03:52,742 --> 00:03:55,887
example. Again we have a set of cities and need to

64
00:03:55,987 --> 00:04:00,105
find the shortest possible route visiting each city exactly once.

65
00:04:06,066 --> 00:04:10,267
The Branch-and-Bound method begins by constructing a tree of

66
00:04:10,367 --> 00:04:13,922
all possibilities. First we need a Graph. Let's use

67
00:04:14,022 --> 00:04:16,574
the same graph and start at node one.

68
00:04:17,066 --> 00:04:22,532
Now we have to look at the next possible nodes. In this case we

69
00:04:22,632 --> 00:04:26,950
have four options. We can go to node 2, 3, 4 or 5.

70
00:04:28,066 --> 00:04:31,722
At the same time we can tranform the graph on the right to

71
00:04:31,822 --> 00:04:35,414
a tree with node one as the root. This tree will show all

72
00:04:35,514 --> 00:04:40,724
the possible routes that the salesperson can use. As explained, starting with node

73
00:04:40,824 --> 00:04:44,286
one the next possible nodes could be node 2, 3, 4 or 5.

74
00:04:44,333 --> 00:04:47,723
This would be the first version of the tree. Now we

75
00:04:47,823 --> 00:04:51,008
have to take a look at the next steps. Let's say

76
00:04:51,108 --> 00:04:54,361
we choose node 2 as the second node to travel to.

77
00:04:54,400 --> 00:04:59,388
Starting from node 2, the next options would be node 3, 4 or 5.

78
00:05:01,400 --> 00:05:05,661
Now we can create the next step at the tree. Again the next

79
00:05:05,761 --> 00:05:09,580
possible nodes to travel to would be node 3, 4 and 5.

80
00:05:09,666 --> 00:05:13,897
Let's continue creating one possible route. We decide to

81
00:05:13,997 --> 00:05:16,526
travel to node 5 as our next city.

82
00:05:16,600 --> 00:05:20,583
Starting from node 5, there are two cities left that

83
00:05:20,683 --> 00:05:23,724
have not been visited yet. Node 3 and 4.

84
00:05:23,800 --> 00:05:28,284
Let's go back to the tree and add the last two options, node 3 and 4

85
00:05:31,800 --> 00:05:35,060
This time we choose node 3 as the next city.

86
00:05:36,800 --> 00:05:41,260
As you can see the last city, that we have not visited is city 4.

87
00:05:41,333 --> 00:05:46,897
Let's also add node 4 in the tree. Now we have visited every city.

88
00:05:46,933 --> 00:05:50,635
At the end we have to travel to the city where we started

89
00:05:50,735 --> 00:05:54,705
the tour. Let's finish our route by traveling back to city 1.

90
00:05:54,800 --> 00:05:57,088
Now we can also finish our route on the

91
00:05:57,188 --> 00:05:59,476
tree by adding node 1 as our last node.

92
00:05:59,533 --> 00:06:02,525
As you can see this is one possible route and

93
00:06:02,625 --> 00:06:06,441
the tree is not complete. Let's create the complete tree.

94
00:06:09,533 --> 00:06:13,782
This tree shows every possible route, if you start from node one. Here

95
00:06:13,882 --> 00:06:17,386
we can now see that there are 24 possible routes to get to

96
00:06:17,486 --> 00:06:20,928
the last node. But is you take a closer look at the first

97
00:06:21,028 --> 00:06:24,905
and last route, you can see that the routes are identical, if we

98
00:06:25,005 --> 00:06:29,068
have a symmetrical TSP. That means if we have a symmetrical TSP, as

99
00:06:29,168 --> 00:06:32,113
in our example, we can ignore half of the routes.

100
00:06:32,200 --> 00:06:35,268
Let's blur out the routes that we can ignore.

101
00:06:37,333 --> 00:06:41,553
Here we can also visualize which route we took in the first example.

102
00:06:42,000 --> 00:06:46,344
After having created a tree for every possible route, the branch and bound method

103
00:06:46,444 --> 00:06:50,295
calculates the cost for every route and compares it to the best route so

104
00:06:50,395 --> 00:06:53,806
far. If the cost of the current route is higher than the cost of

105
00:06:53,906 --> 00:06:57,044
the best route so far, the current route will be discarded.

106
00:06:57,133 --> 00:07:01,854
Let's take a look at an example. Lets say the algorithm calculated

107
00:07:01,954 --> 00:07:05,433
our route first with the cost of 15. As it is the

108
00:07:05,533 --> 00:07:08,793
first route, it is also the best route so far.

109
00:07:10,333 --> 00:07:14,552
Next, the algorithm calculates the route on the left. The cost

110
00:07:14,652 --> 00:07:17,965
of this route is 12. As this route is better than

111
00:07:18,065 --> 00:07:21,657
the best route so far, it becomes the new best route.

112
00:07:22,333 --> 00:07:26,018
Now the algorithm calculates the next route. In our

113
00:07:26,118 --> 00:07:29,433
example it will be the seventh possible route.

114
00:07:29,466 --> 00:07:33,294
In this route the algorithm realizes at the third node that the added

115
00:07:33,394 --> 00:07:36,653
costs are at 14. Since the cost of the route till the third

116
00:07:36,753 --> 00:07:40,581
node is already higher than the cost of the best route, the algorithm

117
00:07:40,681 --> 00:07:44,054
can discard this route without calculating it untill the end.

118
00:07:44,133 --> 00:07:47,964
This way of calculating the best route is applied to every

119
00:07:48,064 --> 00:07:51,759
route. At the end the algorithm will have found the best

120
00:07:51,859 --> 00:07:54,809
route. In this example it is the first route.

121
00:07:54,866 --> 00:07:57,969
Let's take a look now at the time complexity of the

122
00:07:58,069 --> 00:08:02,868
branch and bound method. As explained, the algorithm calculates every possible

123
00:08:02,968 --> 00:08:06,384
route. But as we have seen before, it can discard routes

124
00:08:06,484 --> 00:08:09,022
that are worse than the best route so far.

125
00:08:09,066 --> 00:08:12,993
That means the algorithm does not have to calculate every route untill

126
00:08:13,093 --> 00:08:17,135
the end. Still having to calculate every possible route makes the branch

127
00:08:17,235 --> 00:08:21,104
and bound method very time consuming. In the worst case the algorithm

128
00:08:21,204 --> 00:08:24,843
has to calculate every possible route untill the end and the time

129
00:08:24,943 --> 00:08:27,662
complexity is the same as the brute force method.

130
00:08:27,733 --> 00:08:31,171
However the algorithm performs very well in practice and it is

131
00:08:31,271 --> 00:08:34,709
mostly better than the brute force method. For that reason the

132
00:08:34,809 --> 00:08:38,303
time complexity of the branch and bound method is mostly better

133
00:08:38,403 --> 00:08:41,385
then the brute force algorithm, but still exponential.

134
00:08:41,466 --> 00:08:45,950
Our first approximation approach is k nearest neighbors (kNN).

135
00:08:46,000 --> 00:08:48,937
We start at a specific city (any city can be the

136
00:08:49,037 --> 00:08:52,797
starting point). Then we check the shortest path and add this

137
00:08:52,897 --> 00:08:55,835
point to the tour. Same for the next node and so

138
00:08:55,935 --> 00:08:59,316
on ... we repeat this until there is no unvisited node.

139
00:09:01,933 --> 00:09:05,721
Finally, we draw a connection back to the starting point.

140
00:09:08,800 --> 00:09:11,021
This is how it can look like with more

141
00:09:11,121 --> 00:09:13,404
nodes so more cities Alex has to visit.

142
00:09:19,133 --> 00:09:22,962
For a dataset with n cities, the time complexity of applying kNN

143
00:09:23,062 --> 00:09:26,277
to TSP is O of n squared. Even though it's better than

144
00:09:26,377 --> 00:09:29,347
using Branch and Bound with O of 2 to the power of

145
00:09:29,447 --> 00:09:32,785
n in most cases we won't find the optimal shortest path.

