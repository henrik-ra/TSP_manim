1
00:00:00,000 --> 00:00:03,929
In the following we will explain the christofides algorithm.

2
00:00:04,029 --> 00:00:07,354
This is an approximated algorithm to solve the TSP.

3
00:00:07,454 --> 00:00:10,846
This algorithm guarantees a solution that is at most

4
00:00:10,946 --> 00:00:14,204
fifthy percent longer than the optimal round trip.

5
00:00:14,300 --> 00:00:18,160
First we will create a minimal spanning tree with every node.

6
00:00:18,250 --> 00:00:20,866
Then we search for every node in the graph with

7
00:00:20,966 --> 00:00:23,526
an odd degree, meaning an odd number of edges.

8
00:00:23,626 --> 00:00:26,341
After finding all the nodes with an odd degree we need

9
00:00:26,441 --> 00:00:29,157
to find a minimum perfect matching, so we need to find

10
00:00:29,257 --> 00:00:32,286
edges with minimum weight so every node gets an even degree.

11
00:00:32,376 --> 00:00:36,342
Then we need to combine the minimum spanning tree with the perfect matching

12
00:00:36,442 --> 00:00:39,812
to obtain a multigraph in which every vertex has an even degree.

13
00:00:39,909 --> 00:00:43,853
Since every vertex has an even degree, there exists an Eulerian

14
00:00:43,953 --> 00:00:47,447
circuit in this graph which we need to find. An Eulerian

15
00:00:47,547 --> 00:00:50,849
circuit is a path that visits each edge exactly once.

16
00:00:50,942 --> 00:00:53,325
Now we convert the Eulerian circuit to

17
00:00:53,425 --> 00:00:56,722
a Hamiltonian circuit by skipping repeated vertices.

18
00:00:56,822 --> 00:01:00,682
Let's take a look at the graph to visualize this algorithm.

19
00:01:00,782 --> 00:01:04,474
Like explained before we create a minimal spanning tree.

20
00:01:04,566 --> 00:01:07,730
Now we point out every node with an odd degree

21
00:01:07,816 --> 00:01:11,053
We can now point out the minimal perfect matching, so we add

22
00:01:11,153 --> 00:01:14,724
edges with the minimum weight until every node has an even degree.

23
00:01:14,816 --> 00:01:17,039
Now we are going to find an eulerian

24
00:01:17,139 --> 00:01:19,492
tour which hits every edge exact once.

25
00:01:37,616 --> 00:01:40,832
The last step will be to convert the euleric circle into

26
00:01:40,932 --> 00:01:44,088
a hamilton circle, so we have to delete all edges which

27
00:01:44,188 --> 00:01:47,345
make the circle visit a node which we have seen before.

28
00:01:47,445 --> 00:01:50,188
In our case these are the edges between 9 and 4.

29
00:01:50,282 --> 00:01:52,775
If we take a look at the time complexity of the

30
00:01:52,875 --> 00:01:56,582
Christofides algorithm it is mainly determined by the step of finding

31
00:01:56,682 --> 00:01:59,782
a minimum perfect matching, which is n to the third power.

